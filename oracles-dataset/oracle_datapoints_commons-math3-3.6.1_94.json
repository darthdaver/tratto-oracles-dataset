[ {
  "id" : 20437,
  "oracle" : ";",
  "oracleType" : "NORMAL_POST",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.ode",
  "className" : "ContinuousOutputModel",
  "javadocTag" : "@return -1 if the double is before the interval, 0 if it is in\nthe interval, and +1 if it is after the interval, according to\nthe interval direction",
  "methodJavadoc" : "    /** Compare a step interval and a double.\n   * @param time point to locate\n   * @param interval step interval\n   * @return -1 if the double is before the interval, 0 if it is in\n   * the interval, and +1 if it is after the interval, according to\n   * the interval direction\n   */",
  "methodSourceCode" : "private int locatePoint(final double time, final StepInterpolator interval){\n    if (forward) {\n        if (time < interval.getPreviousTime()) {\n            return -1;\n        } else if (time > interval.getCurrentTime()) {\n            return +1;\n        } else {\n            return 0;\n        }\n    }\n    if (time > interval.getPreviousTime()) {\n        return -1;\n    } else if (time < interval.getCurrentTime()) {\n        return +1;\n    } else {\n        return 0;\n    }\n}",
  "classJavadoc" : "/**\n * This class stores all information provided by an ODE integrator\n * during the integration process and build a continuous model of the\n * solution from this.\n *\n * <p>This class act as a step handler from the integrator point of\n * view. It is called iteratively during the integration process and\n * stores a copy of all steps information in a sorted collection for\n * later use. Once the integration process is over, the user can use\n * the {@link #setInterpolatedTime setInterpolatedTime} and {@link\n * #getInterpolatedState getInterpolatedState} to retrieve this\n * information at any time. It is important to wait for the\n * integration to be over before attempting to call {@link\n * #setInterpolatedTime setInterpolatedTime} because some internal\n * variables are set only once the last step has been handled.</p>\n *\n * <p>This is useful for example if the main loop of the user\n * application should remain independent from the integration process\n * or if one needs to mimic the behaviour of an analytical model\n * despite a numerical model is used (i.e. one needs the ability to\n * get the model value at any time or to navigate through the\n * data).</p>\n *\n * <p>If problem modeling is done with several separate\n * integration phases for contiguous intervals, the same\n * ContinuousOutputModel can be used as step handler for all\n * integration phases as long as they are performed in order and in\n * the same direction. As an example, one can extrapolate the\n * trajectory of a satellite with one model (i.e. one set of\n * differential equations) up to the beginning of a maneuver, use\n * another more complex model including thrusters modeling and\n * accurate attitude control during the maneuver, and revert to the\n * first model after the end of the maneuver. If the same continuous\n * output model handles the steps of all integration phases, the user\n * do not need to bother when the maneuver begins or ends, he has all\n * the data available in a transparent manner.</p>\n *\n * <p>An important feature of this class is that it implements the\n * <code>Serializable</code> interface. This means that the result of\n * an integration can be serialized and reused later (if stored into a\n * persistent medium like a filesystem or a database) or elsewhere (if\n * sent to another application). Only the result of the integration is\n * stored, there is no reference to the integrated problem by\n * itself.</p>\n *\n * <p>One should be aware that the amount of data stored in a\n * ContinuousOutputModel instance can be important if the state vector\n * is large, if the integration interval is long or if the steps are\n * small (which can result from small tolerance settings in {@link\n * org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator adaptive\n * step size integrators}).</p>\n *\n * @see StepHandler\n * @see StepInterpolator\n * @since 1.2\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.ode;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.MathIllegalArgumentException;\nimport org.apache.commons.math3.exception.MaxCountExceededException;\nimport org.apache.commons.math3.exception.util.LocalizedFormats;\nimport org.apache.commons.math3.ode.sampling.StepHandler;\nimport org.apache.commons.math3.ode.sampling.StepInterpolator;\nimport org.apache.commons.math3.util.FastMath;\n\n/**\n * This class stores all information provided by an ODE integrator\n * during the integration process and build a continuous model of the\n * solution from this.\n *\n * <p>This class act as a step handler from the integrator point of\n * view. It is called iteratively during the integration process and\n * stores a copy of all steps information in a sorted collection for\n * later use. Once the integration process is over, the user can use\n * the {@link #setInterpolatedTime setInterpolatedTime} and {@link\n * #getInterpolatedState getInterpolatedState} to retrieve this\n * information at any time. It is important to wait for the\n * integration to be over before attempting to call {@link\n * #setInterpolatedTime setInterpolatedTime} because some internal\n * variables are set only once the last step has been handled.</p>\n *\n * <p>This is useful for example if the main loop of the user\n * application should remain independent from the integration process\n * or if one needs to mimic the behaviour of an analytical model\n * despite a numerical model is used (i.e. one needs the ability to\n * get the model value at any time or to navigate through the\n * data).</p>\n *\n * <p>If problem modeling is done with several separate\n * integration phases for contiguous intervals, the same\n * ContinuousOutputModel can be used as step handler for all\n * integration phases as long as they are performed in order and in\n * the same direction. As an example, one can extrapolate the\n * trajectory of a satellite with one model (i.e. one set of\n * differential equations) up to the beginning of a maneuver, use\n * another more complex model including thrusters modeling and\n * accurate attitude control during the maneuver, and revert to the\n * first model after the end of the maneuver. If the same continuous\n * output model handles the steps of all integration phases, the user\n * do not need to bother when the maneuver begins or ends, he has all\n * the data available in a transparent manner.</p>\n *\n * <p>An important feature of this class is that it implements the\n * <code>Serializable</code> interface. This means that the result of\n * an integration can be serialized and reused later (if stored into a\n * persistent medium like a filesystem or a database) or elsewhere (if\n * sent to another application). Only the result of the integration is\n * stored, there is no reference to the integrated problem by\n * itself.</p>\n *\n * <p>One should be aware that the amount of data stored in a\n * ContinuousOutputModel instance can be important if the state vector\n * is large, if the integration interval is long or if the steps are\n * small (which can result from small tolerance settings in {@link\n * org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator adaptive\n * step size integrators}).</p>\n *\n * @see StepHandler\n * @see StepInterpolator\n * @since 1.2\n */\n\npublic class ContinuousOutputModel\n  implements StepHandler, Serializable {\n\n    /** Serializable version identifier */\n    private static final long serialVersionUID = -1417964919405031606L;\n\n    /** Initial integration time. */\n    private double initialTime;\n\n    /** Final integration time. */\n    private double finalTime;\n\n    /** Integration direction indicator. */\n    private boolean forward;\n\n    /** Current interpolator index. */\n    private int index;\n\n    /** Steps table. */\n    private List<StepInterpolator> steps;\n\n  /** Simple constructor.\n   * Build an empty continuous output model.\n   */\n  public ContinuousOutputModel() {\n    steps = new ArrayList<StepInterpolator>();\n    initialTime = Double.NaN;\n    finalTime   = Double.NaN;\n    forward     = true;\n    index       = 0;\n  }\n\n  /** Append another model at the end of the instance.\n   * @param model model to add at the end of the instance\n   * @exception MathIllegalArgumentException if the model to append is not\n   * compatible with the instance (dimension of the state vector,\n   * propagation direction, hole between the dates)\n   * @exception MaxCountExceededException if the number of functions evaluations is exceeded\n   * during step finalization\n   */\n  public void append(final ContinuousOutputModel model)\n    throws MathIllegalArgumentException, MaxCountExceededException {\n\n    if (model.steps.size() == 0) {\n      return;\n    }\n\n    if (steps.size() == 0) {\n      initialTime = model.initialTime;\n      forward     = model.forward;\n    } else {\n\n      if (getInterpolatedState().length != model.getInterpolatedState().length) {\n          throw new DimensionMismatchException(model.getInterpolatedState().length,\n                                               getInterpolatedState().length);\n      }\n\n      if (forward ^ model.forward) {\n          throw new MathIllegalArgumentException(LocalizedFormats.PROPAGATION_DIRECTION_MISMATCH);\n      }\n\n      final StepInterpolator lastInterpolator = steps.get(index);\n      final double current  = lastInterpolator.getCurrentTime();\n      final double previous = lastInterpolator.getPreviousTime();\n      final double step = current - previous;\n      final double gap = model.getInitialTime() - current;\n      if (FastMath.abs(gap) > 1.0e-3 * FastMath.abs(step)) {\n        throw new MathIllegalArgumentException(LocalizedFormats.HOLE_BETWEEN_MODELS_TIME_RANGES,\n                                               FastMath.abs(gap));\n      }\n\n    }\n\n    for (StepInterpolator interpolator : model.steps) {\n      steps.add(interpolator.copy());\n    }\n\n    index = steps.size() - 1;\n    finalTime = (steps.get(index)).getCurrentTime();\n\n  }\n\n  /** {@inheritDoc} */\n  public void init(double t0, double[] y0, double t) {\n    initialTime = Double.NaN;\n    finalTime   = Double.NaN;\n    forward     = true;\n    index       = 0;\n    steps.clear();\n  }\n\n  /** Handle the last accepted step.\n   * A copy of the information provided by the last step is stored in\n   * the instance for later use.\n   * @param interpolator interpolator for the last accepted step.\n   * @param isLast true if the step is the last one\n   * @exception MaxCountExceededException if the number of functions evaluations is exceeded\n   * during step finalization\n   */\n  public void handleStep(final StepInterpolator interpolator, final boolean isLast)\n      throws MaxCountExceededException {\n\n    if (steps.size() == 0) {\n      initialTime = interpolator.getPreviousTime();\n      forward     = interpolator.isForward();\n    }\n\n    steps.add(interpolator.copy());\n\n    if (isLast) {\n      finalTime = interpolator.getCurrentTime();\n      index     = steps.size() - 1;\n    }\n\n  }\n\n  /**\n   * Get the initial integration time.\n   * @return initial integration time\n   */\n  public double getInitialTime() {\n    return initialTime;\n  }\n\n  /**\n   * Get the final integration time.\n   * @return final integration time\n   */\n  public double getFinalTime() {\n    return finalTime;\n  }\n\n  /**\n   * Get the time of the interpolated point.\n   * If {@link #setInterpolatedTime} has not been called, it returns\n   * the final integration time.\n   * @return interpolation point time\n   */\n  public double getInterpolatedTime() {\n    return steps.get(index).getInterpolatedTime();\n  }\n\n  /** Set the time of the interpolated point.\n   * <p>This method should <strong>not</strong> be called before the\n   * integration is over because some internal variables are set only\n   * once the last step has been handled.</p>\n   * <p>Setting the time outside of the integration interval is now\n   * allowed, but should be used with care since the accuracy of the\n   * interpolator will probably be very poor far from this interval.\n   * This allowance has been added to simplify implementation of search\n   * algorithms near the interval endpoints.</p>\n   * <p>Note that each time this method is called, the internal arrays\n   * returned in {@link #getInterpolatedState()}, {@link\n   * #getInterpolatedDerivatives()} and {@link #getInterpolatedSecondaryState(int)}\n   * <em>will</em> be overwritten. So if their content must be preserved\n   * across several calls, user must copy them.</p>\n   * @param time time of the interpolated point\n   * @see #getInterpolatedState()\n   * @see #getInterpolatedDerivatives()\n   * @see #getInterpolatedSecondaryState(int)\n   */\n  public void setInterpolatedTime(final double time) {\n\n      // initialize the search with the complete steps table\n      int iMin = 0;\n      final StepInterpolator sMin = steps.get(iMin);\n      double tMin = 0.5 * (sMin.getPreviousTime() + sMin.getCurrentTime());\n\n      int iMax = steps.size() - 1;\n      final StepInterpolator sMax = steps.get(iMax);\n      double tMax = 0.5 * (sMax.getPreviousTime() + sMax.getCurrentTime());\n\n      // handle points outside of the integration interval\n      // or in the first and last step\n      if (locatePoint(time, sMin) <= 0) {\n        index = iMin;\n        sMin.setInterpolatedTime(time);\n        return;\n      }\n      if (locatePoint(time, sMax) >= 0) {\n        index = iMax;\n        sMax.setInterpolatedTime(time);\n        return;\n      }\n\n      // reduction of the table slice size\n      while (iMax - iMin > 5) {\n\n        // use the last estimated index as the splitting index\n        final StepInterpolator si = steps.get(index);\n        final int location = locatePoint(time, si);\n        if (location < 0) {\n          iMax = index;\n          tMax = 0.5 * (si.getPreviousTime() + si.getCurrentTime());\n        } else if (location > 0) {\n          iMin = index;\n          tMin = 0.5 * (si.getPreviousTime() + si.getCurrentTime());\n        } else {\n          // we have found the target step, no need to continue searching\n          si.setInterpolatedTime(time);\n          return;\n        }\n\n        // compute a new estimate of the index in the reduced table slice\n        final int iMed = (iMin + iMax) / 2;\n        final StepInterpolator sMed = steps.get(iMed);\n        final double tMed = 0.5 * (sMed.getPreviousTime() + sMed.getCurrentTime());\n\n        if ((FastMath.abs(tMed - tMin) < 1e-6) || (FastMath.abs(tMax - tMed) < 1e-6)) {\n          // too close to the bounds, we estimate using a simple dichotomy\n          index = iMed;\n        } else {\n          // estimate the index using a reverse quadratic polynom\n          // (reverse means we have i = P(t), thus allowing to simply\n          // compute index = P(time) rather than solving a quadratic equation)\n          final double d12 = tMax - tMed;\n          final double d23 = tMed - tMin;\n          final double d13 = tMax - tMin;\n          final double dt1 = time - tMax;\n          final double dt2 = time - tMed;\n          final double dt3 = time - tMin;\n          final double iLagrange = ((dt2 * dt3 * d23) * iMax -\n                                    (dt1 * dt3 * d13) * iMed +\n                                    (dt1 * dt2 * d12) * iMin) /\n                                   (d12 * d23 * d13);\n          index = (int) FastMath.rint(iLagrange);\n        }\n\n        // force the next size reduction to be at least one tenth\n        final int low  = FastMath.max(iMin + 1, (9 * iMin + iMax) / 10);\n        final int high = FastMath.min(iMax - 1, (iMin + 9 * iMax) / 10);\n        if (index < low) {\n          index = low;\n        } else if (index > high) {\n          index = high;\n        }\n\n      }\n\n      // now the table slice is very small, we perform an iterative search\n      index = iMin;\n      while ((index <= iMax) && (locatePoint(time, steps.get(index)) > 0)) {\n        ++index;\n      }\n\n      steps.get(index).setInterpolatedTime(time);\n\n  }\n\n  /**\n   * Get the state vector of the interpolated point.\n   * <p>The returned vector is a reference to a reused array, so\n   * it should not be modified and it should be copied if it needs\n   * to be preserved across several calls to the associated\n   * {@link #setInterpolatedTime(double)} method.</p>\n   * @return state vector at time {@link #getInterpolatedTime}\n   * @exception MaxCountExceededException if the number of functions evaluations is exceeded\n   * @see #setInterpolatedTime(double)\n   * @see #getInterpolatedDerivatives()\n   * @see #getInterpolatedSecondaryState(int)\n   * @see #getInterpolatedSecondaryDerivatives(int)\n   */\n  public double[] getInterpolatedState() throws MaxCountExceededException {\n    return steps.get(index).getInterpolatedState();\n  }\n\n  /**\n   * Get the derivatives of the state vector of the interpolated point.\n   * <p>The returned vector is a reference to a reused array, so\n   * it should not be modified and it should be copied if it needs\n   * to be preserved across several calls to the associated\n   * {@link #setInterpolatedTime(double)} method.</p>\n   * @return derivatives of the state vector at time {@link #getInterpolatedTime}\n   * @exception MaxCountExceededException if the number of functions evaluations is exceeded\n   * @see #setInterpolatedTime(double)\n   * @see #getInterpolatedState()\n   * @see #getInterpolatedSecondaryState(int)\n   * @see #getInterpolatedSecondaryDerivatives(int)\n   * @since 3.4\n   */\n  public double[] getInterpolatedDerivatives() throws MaxCountExceededException {\n    return steps.get(index).getInterpolatedDerivatives();\n  }\n\n  /** Get the interpolated secondary state corresponding to the secondary equations.\n   * <p>The returned vector is a reference to a reused array, so\n   * it should not be modified and it should be copied if it needs\n   * to be preserved across several calls to the associated\n   * {@link #setInterpolatedTime(double)} method.</p>\n   * @param secondaryStateIndex index of the secondary set, as returned by {@link\n   * org.apache.commons.math3.ode.ExpandableStatefulODE#addSecondaryEquations(\n   * org.apache.commons.math3.ode.SecondaryEquations)\n   * ExpandableStatefulODE.addSecondaryEquations(SecondaryEquations)}\n   * @return interpolated secondary state at the current interpolation date\n   * @see #setInterpolatedTime(double)\n   * @see #getInterpolatedState()\n   * @see #getInterpolatedDerivatives()\n   * @see #getInterpolatedSecondaryDerivatives(int)\n   * @since 3.2\n   * @exception MaxCountExceededException if the number of functions evaluations is exceeded\n   */\n  public double[] getInterpolatedSecondaryState(final int secondaryStateIndex)\n    throws MaxCountExceededException {\n    return steps.get(index).getInterpolatedSecondaryState(secondaryStateIndex);\n  }\n\n  /** Get the interpolated secondary derivatives corresponding to the secondary equations.\n   * <p>The returned vector is a reference to a reused array, so\n   * it should not be modified and it should be copied if it needs\n   * to be preserved across several calls to the associated\n   * {@link #setInterpolatedTime(double)} method.</p>\n   * @param secondaryStateIndex index of the secondary set, as returned by {@link\n   * org.apache.commons.math3.ode.ExpandableStatefulODE#addSecondaryEquations(\n   * org.apache.commons.math3.ode.SecondaryEquations)\n   * ExpandableStatefulODE.addSecondaryEquations(SecondaryEquations)}\n   * @return interpolated secondary derivatives at the current interpolation date\n   * @see #setInterpolatedTime(double)\n   * @see #getInterpolatedState()\n   * @see #getInterpolatedDerivatives()\n   * @see #getInterpolatedSecondaryState(int)\n   * @since 3.4\n   * @exception MaxCountExceededException if the number of functions evaluations is exceeded\n   */\n  public double[] getInterpolatedSecondaryDerivatives(final int secondaryStateIndex)\n    throws MaxCountExceededException {\n    return steps.get(index).getInterpolatedSecondaryDerivatives(secondaryStateIndex);\n  }\n\n  /** Compare a step interval and a double.\n   * @param time point to locate\n   * @param interval step interval\n   * @return -1 if the double is before the interval, 0 if it is in\n   * the interval, and +1 if it is after the interval, according to\n   * the interval direction\n   */\n  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\n      return +1;\n    } else {\n      return 0;\n    }\n  }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ [ "-1", "int" ], [ "0", "int" ], [ "1", "int" ] ],
  "tokensMethodArguments" : [ [ "time", "", "double" ], [ "interval", "org.apache.commons.math3.ode.sampling", "StepInterpolator" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getInterpolatedSecondaryState", "org.apache.commons.math3.ode", "ContinuousOutputModel", "public double[] getInterpolatedSecondaryState(final int secondaryStateIndex) throws MaxCountExceededException" ], [ "getInterpolatedSecondaryDerivatives", "org.apache.commons.math3.ode", "ContinuousOutputModel", "public double[] getInterpolatedSecondaryDerivatives(final int secondaryStateIndex) throws MaxCountExceededException" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getInterpolatedDerivatives", "org.apache.commons.math3.ode", "ContinuousOutputModel", "public double[] getInterpolatedDerivatives() throws MaxCountExceededException" ], [ "getFinalTime", "org.apache.commons.math3.ode", "ContinuousOutputModel", "public double getFinalTime()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getInterpolatedState", "org.apache.commons.math3.ode", "ContinuousOutputModel", "public double[] getInterpolatedState() throws MaxCountExceededException" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getInitialTime", "org.apache.commons.math3.ode", "ContinuousOutputModel", "public double getInitialTime()" ], [ "getInterpolatedTime", "org.apache.commons.math3.ode", "ContinuousOutputModel", "public double getInterpolatedTime()" ], [ "getInterpolatedTime", "org.apache.commons.math3.ode.sampling", "StepInterpolator", "public abstract double getInterpolatedTime()" ], [ "copy", "org.apache.commons.math3.ode.sampling", "StepInterpolator", "public abstract StepInterpolator copy() throws MaxCountExceededException" ], [ "getPreviousTime", "org.apache.commons.math3.ode.sampling", "StepInterpolator", "public abstract double getPreviousTime()" ], [ "getInterpolatedSecondaryState", "org.apache.commons.math3.ode.sampling", "StepInterpolator", "public abstract double[] getInterpolatedSecondaryState(int arg0) throws MaxCountExceededException" ], [ "isForward", "org.apache.commons.math3.ode.sampling", "StepInterpolator", "public abstract boolean isForward()" ], [ "getInterpolatedSecondaryDerivatives", "org.apache.commons.math3.ode.sampling", "StepInterpolator", "public abstract double[] getInterpolatedSecondaryDerivatives(int arg0) throws MaxCountExceededException" ], [ "getCurrentTime", "org.apache.commons.math3.ode.sampling", "StepInterpolator", "public abstract double getCurrentTime()" ], [ "getInterpolatedDerivatives", "org.apache.commons.math3.ode.sampling", "StepInterpolator", "public abstract double[] getInterpolatedDerivatives() throws MaxCountExceededException" ], [ "getInterpolatedState", "org.apache.commons.math3.ode.sampling", "StepInterpolator", "public abstract double[] getInterpolatedState() throws MaxCountExceededException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 20443,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.ode",
  "className" : "FirstOrderDifferentialEquations",
  "javadocTag" : "@throws DimensionMismatchException if arrays dimensions do not match equations settings",
  "methodJavadoc" : "    /** Get the current time derivative of the state vector.\n     * @param t current value of the independent <I>time</I> variable\n     * @param y array containing the current value of the state vector\n     * @param yDot placeholder array where to put the time derivative of the state vector\n     * @throws MaxCountExceededException if the number of functions evaluations is exceeded\n     * @throws DimensionMismatchException if arrays dimensions do not match equations settings\n     */",
  "methodSourceCode" : "void computeDerivatives(double t, double[] y, double[] yDot) throws MaxCountExceededException, DimensionMismatchException;",
  "classJavadoc" : "/**\n * This interface represents a first order differential equations set.\n *\n * <p>This interface should be implemented by all real first order\n * differential equation problems before they can be handled by the\n * integrators {@link FirstOrderIntegrator#integrate} method.</p>\n *\n * <p>A first order differential equations problem, as seen by an\n * integrator is the time derivative <code>dY/dt</code> of a state\n * vector <code>Y</code>, both being one dimensional arrays. From the\n * integrator point of view, this derivative depends only on the\n * current time <code>t</code> and on the state vector\n * <code>Y</code>.</p>\n *\n * <p>For real problems, the derivative depends also on parameters\n * that do not belong to the state vector (dynamical model constants\n * for example). These constants are completely outside of the scope\n * of this interface, the classes that implement it are allowed to\n * handle them as they want.</p>\n *\n * @see FirstOrderIntegrator\n * @see FirstOrderConverter\n * @see SecondOrderDifferentialEquations\n *\n * @since 1.2\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.ode;\n\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.MaxCountExceededException;\n\n\n\n/** This interface represents a first order differential equations set.\n *\n * <p>This interface should be implemented by all real first order\n * differential equation problems before they can be handled by the\n * integrators {@link FirstOrderIntegrator#integrate} method.</p>\n *\n * <p>A first order differential equations problem, as seen by an\n * integrator is the time derivative <code>dY/dt</code> of a state\n * vector <code>Y</code>, both being one dimensional arrays. From the\n * integrator point of view, this derivative depends only on the\n * current time <code>t</code> and on the state vector\n * <code>Y</code>.</p>\n *\n * <p>For real problems, the derivative depends also on parameters\n * that do not belong to the state vector (dynamical model constants\n * for example). These constants are completely outside of the scope\n * of this interface, the classes that implement it are allowed to\n * handle them as they want.</p>\n *\n * @see FirstOrderIntegrator\n * @see FirstOrderConverter\n * @see SecondOrderDifferentialEquations\n *\n * @since 1.2\n */\n\npublic interface FirstOrderDifferentialEquations {\n\n    /** Get the dimension of the problem.\n     * @return dimension of the problem\n     */\n    int getDimension();\n\n    /** Get the current time derivative of the state vector.\n     * @param t current value of the independent <I>time</I> variable\n     * @param y array containing the current value of the state vector\n     * @param yDot placeholder array where to put the time derivative of the state vector\n     * @exception MaxCountExceededException if the number of functions evaluations is exceeded\n     * @exception DimensionMismatchException if arrays dimensions do not match equations settings\n     */\n    void computeDerivatives(double t, double[] y, double[] yDot)\n        throws MaxCountExceededException, DimensionMismatchException;\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "t", "", "double" ], [ "y", "", "double[]" ], [ "yDot", "", "double[]" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getDimension", "org.apache.commons.math3.ode", "FirstOrderDifferentialEquations", "int getDimension()" ], [ "equals", "", "double[]", "public boolean equals(Object);" ], [ "toString", "", "double[]", "public String toString()" ], [ "hashCode", "", "double[]", "public native int hashCode()" ], [ "getClass", "", "double[]", "public final native Class getClass();" ], [ "clone", "", "double[]", "public T[] clone();" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "length", "", "double[]", "public final int length;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 20451,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.ode",
  "className" : "EquationsMapper",
  "javadocTag" : "@throws DimensionMismatchException if the dimension of the equation data does not\nmatch the mapper dimension",
  "methodJavadoc" : "    /** Insert equation data into a complete state or derivative array.\n     * @param equationData equation data to be inserted into the complete array\n     * @param complete placeholder where to put equation data (only the\n     * part corresponding to the equation will be overwritten)\n     * @throws DimensionMismatchException if the dimension of the equation data does not\n     * match the mapper dimension\n     */",
  "methodSourceCode" : "public void insertEquationData(double[] equationData, double[] complete) throws DimensionMismatchException{\n    if (equationData.length != dimension) {\n        throw new DimensionMismatchException(equationData.length, dimension);\n    }\n    System.arraycopy(equationData, 0, complete, firstIndex, dimension);\n}",
  "classJavadoc" : "/**\n * Class mapping the part of a complete state or derivative that pertains\n * to a specific differential equation.\n * <p>\n * Instances of this class are guaranteed to be immutable.\n * </p>\n * @see SecondaryEquations\n * @since 3.0\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.ode;\n\nimport java.io.Serializable;\n\nimport org.apache.commons.math3.exception.DimensionMismatchException;\n\n/**\n * Class mapping the part of a complete state or derivative that pertains\n * to a specific differential equation.\n * <p>\n * Instances of this class are guaranteed to be immutable.\n * </p>\n * @see SecondaryEquations\n * @since 3.0\n */\npublic class EquationsMapper implements Serializable {\n\n    /** Serializable UID. */\n    private static final long serialVersionUID = 20110925L;\n\n    /** Index of the first equation element in complete state arrays. */\n    private final int firstIndex;\n\n    /** Dimension of the secondary state parameters. */\n    private final int dimension;\n\n    /** simple constructor.\n     * @param firstIndex index of the first equation element in complete state arrays\n     * @param dimension dimension of the secondary state parameters\n     */\n    public EquationsMapper(final int firstIndex, final int dimension) {\n        this.firstIndex = firstIndex;\n        this.dimension  = dimension;\n    }\n\n    /** Get the index of the first equation element in complete state arrays.\n     * @return index of the first equation element in complete state arrays\n     */\n    public int getFirstIndex() {\n        return firstIndex;\n    }\n\n    /** Get the dimension of the secondary state parameters.\n     * @return dimension of the secondary state parameters\n     */\n    public int getDimension() {\n        return dimension;\n    }\n\n    /** Extract equation data from a complete state or derivative array.\n     * @param complete complete state or derivative array from which\n     * equation data should be retrieved\n     * @param equationData placeholder where to put equation data\n     * @throws DimensionMismatchException if the dimension of the equation data does not\n     * match the mapper dimension\n     */\n    public void extractEquationData(double[] complete, double[] equationData)\n        throws DimensionMismatchException {\n        if (equationData.length != dimension) {\n            throw new DimensionMismatchException(equationData.length, dimension);\n        }\n        System.arraycopy(complete, firstIndex, equationData, 0, dimension);\n    }\n\n    /** Insert equation data into a complete state or derivative array.\n     * @param equationData equation data to be inserted into the complete array\n     * @param complete placeholder where to put equation data (only the\n     * part corresponding to the equation will be overwritten)\n     * @throws DimensionMismatchException if the dimension of the equation data does not\n     * match the mapper dimension\n     */\n    public void insertEquationData(double[] equationData, double[] complete)\n        throws DimensionMismatchException {\n        if (equationData.length != dimension) {\n            throw new DimensionMismatchException(equationData.length, dimension);\n        }\n        System.arraycopy(equationData, 0, complete, firstIndex, dimension);\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "equationData", "", "double[]" ], [ "complete", "", "double[]" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getFirstIndex", "org.apache.commons.math3.ode", "EquationsMapper", "public int getFirstIndex()" ], [ "getDimension", "org.apache.commons.math3.ode", "EquationsMapper", "public int getDimension()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "equals", "", "double[]", "public boolean equals(Object);" ], [ "toString", "", "double[]", "public String toString()" ], [ "hashCode", "", "double[]", "public native int hashCode()" ], [ "getClass", "", "double[]", "public final native Class getClass();" ], [ "clone", "", "double[]", "public T[] clone();" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "length", "", "double[]", "public final int length;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 20464,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.ode.events",
  "className" : "FieldEventState",
  "javadocTag" : "@throws MaxCountExceededException if the interpolator throws one because\nthe number of functions evaluations is exceeded",
  "methodJavadoc" : "    /** Evaluate the impact of the proposed step on the event handler.\n     * @param interpolator step interpolator for the proposed step\n     * @return true if the event handler triggers an event before\n     * the end of the proposed step\n     * @throws MaxCountExceededException if the interpolator throws one because\n     * the number of functions evaluations is exceeded\n     * @throws NoBracketingException if the event cannot be bracketed\n     */",
  "methodSourceCode" : "public boolean evaluateStep(final FieldStepInterpolator<T> interpolator) throws MaxCountExceededException, NoBracketingException{\n    forward = interpolator.isForward();\n    final FieldODEStateAndDerivative<T> s1 = interpolator.getCurrentState();\n    final T t1 = s1.getTime();\n    final T dt = t1.subtract(t0);\n    if (dt.abs().subtract(convergence).getReal() < 0) {\n        // we cannot do anything on such a small step, don't trigger any events\n        return false;\n    }\n    final int n = FastMath.max(1, (int) FastMath.ceil(FastMath.abs(dt.getReal()) / maxCheckInterval));\n    final T h = dt.divide(n);\n    final RealFieldUnivariateFunction<T> f = new RealFieldUnivariateFunction<T>() {\n\n        /**\n         * {@inheritDoc}\n         */\n        public T value(final T t) {\n            return handler.g(interpolator.getInterpolatedState(t));\n        }\n    };\n    T ta = t0;\n    T ga = g0;\n    for (int i = 0; i < n; ++i) {\n        // evaluate handler value at the end of the substep\n        final T tb = (i == n - 1) ? t1 : t0.add(h.multiply(i + 1));\n        final T gb = handler.g(interpolator.getInterpolatedState(tb));\n        // check events occurrence\n        if (g0Positive ^ (gb.getReal() >= 0)) {\n            // there is a sign change: an event is expected during this step\n            // variation direction, with respect to the integration direction\n            increasing = gb.subtract(ga).getReal() >= 0;\n            // find the event time making sure we select a solution just at or past the exact root\n            final T root = forward ? solver.solve(maxIterationCount, f, ta, tb, AllowedSolution.RIGHT_SIDE) : solver.solve(maxIterationCount, f, tb, ta, AllowedSolution.LEFT_SIDE);\n            if (previousEventTime != null && root.subtract(ta).abs().subtract(convergence).getReal() <= 0 && root.subtract(previousEventTime).abs().subtract(convergence).getReal() <= 0) {\n                // we have either found nothing or found (again ?) a past event,\n                // retry the substep excluding this value, and taking care to have the\n                // required sign in case the g function is noisy around its zero and\n                // crosses the axis several times\n                do {\n                    ta = forward ? ta.add(convergence) : ta.subtract(convergence);\n                    ga = f.value(ta);\n                } while ((g0Positive ^ (ga.getReal() >= 0)) && (forward ^ (ta.subtract(tb).getReal() >= 0)));\n                if (forward ^ (ta.subtract(tb).getReal() >= 0)) {\n                    // we were able to skip this spurious root\n                    --i;\n                } else {\n                    // we can't avoid this root before the end of the step,\n                    // we have to handle it despite it is close to the former one\n                    // maybe we have two very close roots\n                    pendingEventTime = root;\n                    pendingEvent = true;\n                    return true;\n                }\n            } else if (previousEventTime == null || previousEventTime.subtract(root).abs().subtract(convergence).getReal() > 0) {\n                pendingEventTime = root;\n                pendingEvent = true;\n                return true;\n            } else {\n                // no sign change: there is no event for now\n                ta = tb;\n                ga = gb;\n            }\n        } else {\n            // no sign change: there is no event for now\n            ta = tb;\n            ga = gb;\n        }\n    }\n    // no event during the whole step\n    pendingEvent = false;\n    pendingEventTime = null;\n    return false;\n}",
  "classJavadoc" : "/** This class handles the state for one {@link EventHandler\n * event handler} during integration steps.\n *\n * <p>Each time the integrator proposes a step, the event handler\n * switching function should be checked. This class handles the state\n * of one handler during one integration step, with references to the\n * state at the end of the preceding step. This information is used to\n * decide if the handler should trigger an event or not during the\n * proposed step.</p>\n *\n * @param <T> the type of the field elements\n * @since 3.6\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.ode.events;\n\nimport org.apache.commons.math3.RealFieldElement;\nimport org.apache.commons.math3.analysis.RealFieldUnivariateFunction;\nimport org.apache.commons.math3.analysis.solvers.AllowedSolution;\nimport org.apache.commons.math3.analysis.solvers.BracketedRealFieldUnivariateSolver;\nimport org.apache.commons.math3.exception.MaxCountExceededException;\nimport org.apache.commons.math3.exception.NoBracketingException;\nimport org.apache.commons.math3.ode.FieldODEState;\nimport org.apache.commons.math3.ode.FieldODEStateAndDerivative;\nimport org.apache.commons.math3.ode.sampling.FieldStepInterpolator;\nimport org.apache.commons.math3.util.FastMath;\n\n/** This class handles the state for one {@link EventHandler\n * event handler} during integration steps.\n *\n * <p>Each time the integrator proposes a step, the event handler\n * switching function should be checked. This class handles the state\n * of one handler during one integration step, with references to the\n * state at the end of the preceding step. This information is used to\n * decide if the handler should trigger an event or not during the\n * proposed step.</p>\n *\n * @param <T> the type of the field elements\n * @since 3.6\n */\npublic class FieldEventState<T extends RealFieldElement<T>> {\n\n    /** Event handler. */\n    private final FieldEventHandler<T> handler;\n\n    /** Maximal time interval between events handler checks. */\n    private final double maxCheckInterval;\n\n    /** Convergence threshold for event localization. */\n    private final T convergence;\n\n    /** Upper limit in the iteration count for event localization. */\n    private final int maxIterationCount;\n\n    /** Time at the beginning of the step. */\n    private T t0;\n\n    /** Value of the events handler at the beginning of the step. */\n    private T g0;\n\n    /** Simulated sign of g0 (we cheat when crossing events). */\n    private boolean g0Positive;\n\n    /** Indicator of event expected during the step. */\n    private boolean pendingEvent;\n\n    /** Occurrence time of the pending event. */\n    private T pendingEventTime;\n\n    /** Occurrence time of the previous event. */\n    private T previousEventTime;\n\n    /** Integration direction. */\n    private boolean forward;\n\n    /** Variation direction around pending event.\n     *  (this is considered with respect to the integration direction)\n     */\n    private boolean increasing;\n\n    /** Next action indicator. */\n    private Action nextAction;\n\n    /** Root-finding algorithm to use to detect state events. */\n    private final BracketedRealFieldUnivariateSolver<T> solver;\n\n    /** Simple constructor.\n     * @param handler event handler\n     * @param maxCheckInterval maximal time interval between switching\n     * function checks (this interval prevents missing sign changes in\n     * case the integration steps becomes very large)\n     * @param convergence convergence threshold in the event time search\n     * @param maxIterationCount upper limit of the iteration count in\n     * the event time search\n     * @param solver Root-finding algorithm to use to detect state events\n     */\n    public FieldEventState(final FieldEventHandler<T> handler, final double maxCheckInterval,\n                           final T convergence, final int maxIterationCount,\n                           final BracketedRealFieldUnivariateSolver<T> solver) {\n        this.handler           = handler;\n        this.maxCheckInterval  = maxCheckInterval;\n        this.convergence       = convergence.abs();\n        this.maxIterationCount = maxIterationCount;\n        this.solver            = solver;\n\n        // some dummy values ...\n        t0                = null;\n        g0                = null;\n        g0Positive        = true;\n        pendingEvent      = false;\n        pendingEventTime  = null;\n        previousEventTime = null;\n        increasing        = true;\n        nextAction        = Action.CONTINUE;\n\n    }\n\n    /** Get the underlying event handler.\n     * @return underlying event handler\n     */\n    public FieldEventHandler<T> getEventHandler() {\n        return handler;\n    }\n\n    /** Get the maximal time interval between events handler checks.\n     * @return maximal time interval between events handler checks\n     */\n    public double getMaxCheckInterval() {\n        return maxCheckInterval;\n    }\n\n    /** Get the convergence threshold for event localization.\n     * @return convergence threshold for event localization\n     */\n    public T getConvergence() {\n        return convergence;\n    }\n\n    /** Get the upper limit in the iteration count for event localization.\n     * @return upper limit in the iteration count for event localization\n     */\n    public int getMaxIterationCount() {\n        return maxIterationCount;\n    }\n\n    /** Reinitialize the beginning of the step.\n     * @param interpolator valid for the current step\n     * @exception MaxCountExceededException if the interpolator throws one because\n     * the number of functions evaluations is exceeded\n     */\n    public void reinitializeBegin(final FieldStepInterpolator<T> interpolator)\n        throws MaxCountExceededException {\n\n        final FieldODEStateAndDerivative<T> s0 = interpolator.getPreviousState();\n        t0 = s0.getTime();\n        g0 = handler.g(s0);\n        if (g0.getReal() == 0) {\n            // excerpt from MATH-421 issue:\n            // If an ODE solver is setup with an EventHandler that return STOP\n            // when the even is triggered, the integrator stops (which is exactly\n            // the expected behavior). If however the user wants to restart the\n            // solver from the final state reached at the event with the same\n            // configuration (expecting the event to be triggered again at a\n            // later time), then the integrator may fail to start. It can get stuck\n            // at the previous event. The use case for the bug MATH-421 is fairly\n            // general, so events occurring exactly at start in the first step should\n            // be ignored.\n\n            // extremely rare case: there is a zero EXACTLY at interval start\n            // we will use the sign slightly after step beginning to force ignoring this zero\n            final double epsilon = FastMath.max(solver.getAbsoluteAccuracy().getReal(),\n                                                FastMath.abs(solver.getRelativeAccuracy().multiply(t0).getReal()));\n            final T tStart = t0.add(0.5 * epsilon);\n            g0 = handler.g(interpolator.getInterpolatedState(tStart));\n        }\n        g0Positive = g0.getReal() >= 0;\n\n    }\n\n    /** Evaluate the impact of the proposed step on the event handler.\n     * @param interpolator step interpolator for the proposed step\n     * @return true if the event handler triggers an event before\n     * the end of the proposed step\n     * @exception MaxCountExceededException if the interpolator throws one because\n     * the number of functions evaluations is exceeded\n     * @exception NoBracketingException if the event cannot be bracketed\n     */\n    public boolean evaluateStep(final FieldStepInterpolator<T> interpolator)\n        throws MaxCountExceededException, NoBracketingException {\n\n        forward = interpolator.isForward();\n        final FieldODEStateAndDerivative<T> s1 = interpolator.getCurrentState();\n        final T t1 = s1.getTime();\n        final T dt = t1.subtract(t0);\n        if (dt.abs().subtract(convergence).getReal() < 0) {\n            // we cannot do anything on such a small step, don't trigger any events\n            return false;\n        }\n        final int n = FastMath.max(1, (int) FastMath.ceil(FastMath.abs(dt.getReal()) / maxCheckInterval));\n        final T   h = dt.divide(n);\n\n        final RealFieldUnivariateFunction<T> f = new RealFieldUnivariateFunction<T>() {\n            /** {@inheritDoc} */\n            public T value(final T t) {\n                return handler.g(interpolator.getInterpolatedState(t));\n            }\n        };\n\n        T ta = t0;\n        T ga = g0;\n        for (int i = 0; i < n; ++i) {\n\n            // evaluate handler value at the end of the substep\n            final T tb = (i == n - 1) ? t1 : t0.add(h.multiply(i + 1));\n            final T gb = handler.g(interpolator.getInterpolatedState(tb));\n\n            // check events occurrence\n            if (g0Positive ^ (gb.getReal() >= 0)) {\n                // there is a sign change: an event is expected during this step\n\n                // variation direction, with respect to the integration direction\n                increasing = gb.subtract(ga).getReal() >= 0;\n\n                // find the event time making sure we select a solution just at or past the exact root\n                final T root = forward ?\n                               solver.solve(maxIterationCount, f, ta, tb, AllowedSolution.RIGHT_SIDE) :\n                               solver.solve(maxIterationCount, f, tb, ta, AllowedSolution.LEFT_SIDE);\n\n                if (previousEventTime != null &&\n                    root.subtract(ta).abs().subtract(convergence).getReal() <= 0 &&\n                    root.subtract(previousEventTime).abs().subtract(convergence).getReal() <= 0) {\n                    // we have either found nothing or found (again ?) a past event,\n                    // retry the substep excluding this value, and taking care to have the\n                    // required sign in case the g function is noisy around its zero and\n                    // crosses the axis several times\n                    do {\n                        ta = forward ? ta.add(convergence) : ta.subtract(convergence);\n                        ga = f.value(ta);\n                    } while ((g0Positive ^ (ga.getReal() >= 0)) && (forward ^ (ta.subtract(tb).getReal() >= 0)));\n\n                    if (forward ^ (ta.subtract(tb).getReal() >= 0)) {\n                        // we were able to skip this spurious root\n                        --i;\n                    } else {\n                        // we can't avoid this root before the end of the step,\n                        // we have to handle it despite it is close to the former one\n                        // maybe we have two very close roots\n                        pendingEventTime = root;\n                        pendingEvent     = true;\n                        return true;\n                    }\n                } else if (previousEventTime == null ||\n                           previousEventTime.subtract(root).abs().subtract(convergence).getReal() > 0) {\n                    pendingEventTime = root;\n                    pendingEvent     = true;\n                    return true;\n                } else {\n                    // no sign change: there is no event for now\n                    ta = tb;\n                    ga = gb;\n                }\n\n            } else {\n                // no sign change: there is no event for now\n                ta = tb;\n                ga = gb;\n            }\n\n        }\n\n        // no event during the whole step\n        pendingEvent     = false;\n        pendingEventTime = null;\n        return false;\n\n    }\n\n    /** Get the occurrence time of the event triggered in the current step.\n     * @return occurrence time of the event triggered in the current\n     * step or infinity if no events are triggered\n     */\n    public T getEventTime() {\n        return pendingEvent ?\n               pendingEventTime :\n               t0.getField().getZero().add(forward ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY);\n    }\n\n    /** Acknowledge the fact the step has been accepted by the integrator.\n     * @param state state at the end of the step\n     */\n    public void stepAccepted(final FieldODEStateAndDerivative<T> state) {\n\n        t0 = state.getTime();\n        g0 = handler.g(state);\n\n        if (pendingEvent && pendingEventTime.subtract(state.getTime()).abs().subtract(convergence).getReal() <= 0) {\n            // force the sign to its value \"just after the event\"\n            previousEventTime = state.getTime();\n            g0Positive        = increasing;\n            nextAction        = handler.eventOccurred(state, !(increasing ^ forward));\n        } else {\n            g0Positive = g0.getReal() >= 0;\n            nextAction = Action.CONTINUE;\n        }\n    }\n\n    /** Check if the integration should be stopped at the end of the\n     * current step.\n     * @return true if the integration should be stopped\n     */\n    public boolean stop() {\n        return nextAction == Action.STOP;\n    }\n\n    /** Let the event handler reset the state if it wants.\n     * @param state state at the beginning of the next step\n     * @return reset state (may by the same as initial state if only\n     * derivatives should be reset), or null if nothing is reset\n     */\n    public FieldODEState<T> reset(final FieldODEStateAndDerivative<T> state) {\n\n        if (!(pendingEvent && pendingEventTime.subtract(state.getTime()).abs().subtract(convergence).getReal() <= 0)) {\n            return null;\n        }\n\n        final FieldODEState<T> newState;\n        if (nextAction == Action.RESET_STATE) {\n            newState = handler.resetState(state);\n        } else if (nextAction == Action.RESET_DERIVATIVES) {\n            newState = state;\n        } else {\n            newState = null;\n        }\n        pendingEvent      = false;\n        pendingEventTime  = null;\n\n        return newState;\n\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "interpolator", "org.apache.commons.math3.ode.sampling.FieldStepInterpolator", "FieldStepInterpolator<T>" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getMaxCheckInterval", "org.apache.commons.math3.ode.events", "FieldEventState", "public double getMaxCheckInterval()" ], [ "getMaxIterationCount", "org.apache.commons.math3.ode.events", "FieldEventState", "public int getMaxIterationCount()" ], [ "reset", "org.apache.commons.math3.ode.events", "FieldEventState", "public FieldODEState<T> reset(final FieldODEStateAndDerivative<T> state)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "evaluateStep", "org.apache.commons.math3.ode.events", "FieldEventState", "public boolean evaluateStep(final FieldStepInterpolator<T> interpolator) throws MaxCountExceededException, NoBracketingException" ], [ "stop", "org.apache.commons.math3.ode.events", "FieldEventState", "public boolean stop()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getEventHandler", "org.apache.commons.math3.ode.events", "FieldEventState", "public FieldEventHandler<T> getEventHandler()" ], [ "getEventTime", "org.apache.commons.math3.ode.events", "FieldEventState", "public T getEventTime()" ], [ "getConvergence", "org.apache.commons.math3.ode.events", "FieldEventState", "public T getConvergence()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "getInterpolatedState", "org.apache.commons.math3.ode.sampling", "FieldStepInterpolator", "public abstract FieldODEStateAndDerivative<T> getInterpolatedState(T arg0)" ], [ "getCurrentState", "org.apache.commons.math3.ode.sampling", "FieldStepInterpolator", "public abstract FieldODEStateAndDerivative<T> getCurrentState()" ], [ "isForward", "org.apache.commons.math3.ode.sampling", "FieldStepInterpolator", "public abstract boolean isForward()" ], [ "getPreviousState", "org.apache.commons.math3.ode.sampling", "FieldStepInterpolator", "public abstract FieldODEStateAndDerivative<T> getPreviousState()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 20469,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.ode.events",
  "className" : "FieldEventState",
  "javadocTag" : "@param state state at the beginning of the next step",
  "methodJavadoc" : "    /** Let the event handler reset the state if it wants.\n     * @param state state at the beginning of the next step\n     * @return reset state (may by the same as initial state if only\n     * derivatives should be reset), or null if nothing is reset\n     */",
  "methodSourceCode" : "public FieldODEState<T> reset(final FieldODEStateAndDerivative<T> state){\n    if (!(pendingEvent && pendingEventTime.subtract(state.getTime()).abs().subtract(convergence).getReal() <= 0)) {\n        return null;\n    }\n    final FieldODEState<T> newState;\n    if (nextAction == Action.RESET_STATE) {\n        newState = handler.resetState(state);\n    } else if (nextAction == Action.RESET_DERIVATIVES) {\n        newState = state;\n    } else {\n        newState = null;\n    }\n    pendingEvent = false;\n    pendingEventTime = null;\n    return newState;\n}",
  "classJavadoc" : "/** This class handles the state for one {@link EventHandler\n * event handler} during integration steps.\n *\n * <p>Each time the integrator proposes a step, the event handler\n * switching function should be checked. This class handles the state\n * of one handler during one integration step, with references to the\n * state at the end of the preceding step. This information is used to\n * decide if the handler should trigger an event or not during the\n * proposed step.</p>\n *\n * @param <T> the type of the field elements\n * @since 3.6\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.ode.events;\n\nimport org.apache.commons.math3.RealFieldElement;\nimport org.apache.commons.math3.analysis.RealFieldUnivariateFunction;\nimport org.apache.commons.math3.analysis.solvers.AllowedSolution;\nimport org.apache.commons.math3.analysis.solvers.BracketedRealFieldUnivariateSolver;\nimport org.apache.commons.math3.exception.MaxCountExceededException;\nimport org.apache.commons.math3.exception.NoBracketingException;\nimport org.apache.commons.math3.ode.FieldODEState;\nimport org.apache.commons.math3.ode.FieldODEStateAndDerivative;\nimport org.apache.commons.math3.ode.sampling.FieldStepInterpolator;\nimport org.apache.commons.math3.util.FastMath;\n\n/** This class handles the state for one {@link EventHandler\n * event handler} during integration steps.\n *\n * <p>Each time the integrator proposes a step, the event handler\n * switching function should be checked. This class handles the state\n * of one handler during one integration step, with references to the\n * state at the end of the preceding step. This information is used to\n * decide if the handler should trigger an event or not during the\n * proposed step.</p>\n *\n * @param <T> the type of the field elements\n * @since 3.6\n */\npublic class FieldEventState<T extends RealFieldElement<T>> {\n\n    /** Event handler. */\n    private final FieldEventHandler<T> handler;\n\n    /** Maximal time interval between events handler checks. */\n    private final double maxCheckInterval;\n\n    /** Convergence threshold for event localization. */\n    private final T convergence;\n\n    /** Upper limit in the iteration count for event localization. */\n    private final int maxIterationCount;\n\n    /** Time at the beginning of the step. */\n    private T t0;\n\n    /** Value of the events handler at the beginning of the step. */\n    private T g0;\n\n    /** Simulated sign of g0 (we cheat when crossing events). */\n    private boolean g0Positive;\n\n    /** Indicator of event expected during the step. */\n    private boolean pendingEvent;\n\n    /** Occurrence time of the pending event. */\n    private T pendingEventTime;\n\n    /** Occurrence time of the previous event. */\n    private T previousEventTime;\n\n    /** Integration direction. */\n    private boolean forward;\n\n    /** Variation direction around pending event.\n     *  (this is considered with respect to the integration direction)\n     */\n    private boolean increasing;\n\n    /** Next action indicator. */\n    private Action nextAction;\n\n    /** Root-finding algorithm to use to detect state events. */\n    private final BracketedRealFieldUnivariateSolver<T> solver;\n\n    /** Simple constructor.\n     * @param handler event handler\n     * @param maxCheckInterval maximal time interval between switching\n     * function checks (this interval prevents missing sign changes in\n     * case the integration steps becomes very large)\n     * @param convergence convergence threshold in the event time search\n     * @param maxIterationCount upper limit of the iteration count in\n     * the event time search\n     * @param solver Root-finding algorithm to use to detect state events\n     */\n    public FieldEventState(final FieldEventHandler<T> handler, final double maxCheckInterval,\n                           final T convergence, final int maxIterationCount,\n                           final BracketedRealFieldUnivariateSolver<T> solver) {\n        this.handler           = handler;\n        this.maxCheckInterval  = maxCheckInterval;\n        this.convergence       = convergence.abs();\n        this.maxIterationCount = maxIterationCount;\n        this.solver            = solver;\n\n        // some dummy values ...\n        t0                = null;\n        g0                = null;\n        g0Positive        = true;\n        pendingEvent      = false;\n        pendingEventTime  = null;\n        previousEventTime = null;\n        increasing        = true;\n        nextAction        = Action.CONTINUE;\n\n    }\n\n    /** Get the underlying event handler.\n     * @return underlying event handler\n     */\n    public FieldEventHandler<T> getEventHandler() {\n        return handler;\n    }\n\n    /** Get the maximal time interval between events handler checks.\n     * @return maximal time interval between events handler checks\n     */\n    public double getMaxCheckInterval() {\n        return maxCheckInterval;\n    }\n\n    /** Get the convergence threshold for event localization.\n     * @return convergence threshold for event localization\n     */\n    public T getConvergence() {\n        return convergence;\n    }\n\n    /** Get the upper limit in the iteration count for event localization.\n     * @return upper limit in the iteration count for event localization\n     */\n    public int getMaxIterationCount() {\n        return maxIterationCount;\n    }\n\n    /** Reinitialize the beginning of the step.\n     * @param interpolator valid for the current step\n     * @exception MaxCountExceededException if the interpolator throws one because\n     * the number of functions evaluations is exceeded\n     */\n    public void reinitializeBegin(final FieldStepInterpolator<T> interpolator)\n        throws MaxCountExceededException {\n\n        final FieldODEStateAndDerivative<T> s0 = interpolator.getPreviousState();\n        t0 = s0.getTime();\n        g0 = handler.g(s0);\n        if (g0.getReal() == 0) {\n            // excerpt from MATH-421 issue:\n            // If an ODE solver is setup with an EventHandler that return STOP\n            // when the even is triggered, the integrator stops (which is exactly\n            // the expected behavior). If however the user wants to restart the\n            // solver from the final state reached at the event with the same\n            // configuration (expecting the event to be triggered again at a\n            // later time), then the integrator may fail to start. It can get stuck\n            // at the previous event. The use case for the bug MATH-421 is fairly\n            // general, so events occurring exactly at start in the first step should\n            // be ignored.\n\n            // extremely rare case: there is a zero EXACTLY at interval start\n            // we will use the sign slightly after step beginning to force ignoring this zero\n            final double epsilon = FastMath.max(solver.getAbsoluteAccuracy().getReal(),\n                                                FastMath.abs(solver.getRelativeAccuracy().multiply(t0).getReal()));\n            final T tStart = t0.add(0.5 * epsilon);\n            g0 = handler.g(interpolator.getInterpolatedState(tStart));\n        }\n        g0Positive = g0.getReal() >= 0;\n\n    }\n\n    /** Evaluate the impact of the proposed step on the event handler.\n     * @param interpolator step interpolator for the proposed step\n     * @return true if the event handler triggers an event before\n     * the end of the proposed step\n     * @exception MaxCountExceededException if the interpolator throws one because\n     * the number of functions evaluations is exceeded\n     * @exception NoBracketingException if the event cannot be bracketed\n     */\n    public boolean evaluateStep(final FieldStepInterpolator<T> interpolator)\n        throws MaxCountExceededException, NoBracketingException {\n\n        forward = interpolator.isForward();\n        final FieldODEStateAndDerivative<T> s1 = interpolator.getCurrentState();\n        final T t1 = s1.getTime();\n        final T dt = t1.subtract(t0);\n        if (dt.abs().subtract(convergence).getReal() < 0) {\n            // we cannot do anything on such a small step, don't trigger any events\n            return false;\n        }\n        final int n = FastMath.max(1, (int) FastMath.ceil(FastMath.abs(dt.getReal()) / maxCheckInterval));\n        final T   h = dt.divide(n);\n\n        final RealFieldUnivariateFunction<T> f = new RealFieldUnivariateFunction<T>() {\n            /** {@inheritDoc} */\n            public T value(final T t) {\n                return handler.g(interpolator.getInterpolatedState(t));\n            }\n        };\n\n        T ta = t0;\n        T ga = g0;\n        for (int i = 0; i < n; ++i) {\n\n            // evaluate handler value at the end of the substep\n            final T tb = (i == n - 1) ? t1 : t0.add(h.multiply(i + 1));\n            final T gb = handler.g(interpolator.getInterpolatedState(tb));\n\n            // check events occurrence\n            if (g0Positive ^ (gb.getReal() >= 0)) {\n                // there is a sign change: an event is expected during this step\n\n                // variation direction, with respect to the integration direction\n                increasing = gb.subtract(ga).getReal() >= 0;\n\n                // find the event time making sure we select a solution just at or past the exact root\n                final T root = forward ?\n                               solver.solve(maxIterationCount, f, ta, tb, AllowedSolution.RIGHT_SIDE) :\n                               solver.solve(maxIterationCount, f, tb, ta, AllowedSolution.LEFT_SIDE);\n\n                if (previousEventTime != null &&\n                    root.subtract(ta).abs().subtract(convergence).getReal() <= 0 &&\n                    root.subtract(previousEventTime).abs().subtract(convergence).getReal() <= 0) {\n                    // we have either found nothing or found (again ?) a past event,\n                    // retry the substep excluding this value, and taking care to have the\n                    // required sign in case the g function is noisy around its zero and\n                    // crosses the axis several times\n                    do {\n                        ta = forward ? ta.add(convergence) : ta.subtract(convergence);\n                        ga = f.value(ta);\n                    } while ((g0Positive ^ (ga.getReal() >= 0)) && (forward ^ (ta.subtract(tb).getReal() >= 0)));\n\n                    if (forward ^ (ta.subtract(tb).getReal() >= 0)) {\n                        // we were able to skip this spurious root\n                        --i;\n                    } else {\n                        // we can't avoid this root before the end of the step,\n                        // we have to handle it despite it is close to the former one\n                        // maybe we have two very close roots\n                        pendingEventTime = root;\n                        pendingEvent     = true;\n                        return true;\n                    }\n                } else if (previousEventTime == null ||\n                           previousEventTime.subtract(root).abs().subtract(convergence).getReal() > 0) {\n                    pendingEventTime = root;\n                    pendingEvent     = true;\n                    return true;\n                } else {\n                    // no sign change: there is no event for now\n                    ta = tb;\n                    ga = gb;\n                }\n\n            } else {\n                // no sign change: there is no event for now\n                ta = tb;\n                ga = gb;\n            }\n\n        }\n\n        // no event during the whole step\n        pendingEvent     = false;\n        pendingEventTime = null;\n        return false;\n\n    }\n\n    /** Get the occurrence time of the event triggered in the current step.\n     * @return occurrence time of the event triggered in the current\n     * step or infinity if no events are triggered\n     */\n    public T getEventTime() {\n        return pendingEvent ?\n               pendingEventTime :\n               t0.getField().getZero().add(forward ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY);\n    }\n\n    /** Acknowledge the fact the step has been accepted by the integrator.\n     * @param state state at the end of the step\n     */\n    public void stepAccepted(final FieldODEStateAndDerivative<T> state) {\n\n        t0 = state.getTime();\n        g0 = handler.g(state);\n\n        if (pendingEvent && pendingEventTime.subtract(state.getTime()).abs().subtract(convergence).getReal() <= 0) {\n            // force the sign to its value \"just after the event\"\n            previousEventTime = state.getTime();\n            g0Positive        = increasing;\n            nextAction        = handler.eventOccurred(state, !(increasing ^ forward));\n        } else {\n            g0Positive = g0.getReal() >= 0;\n            nextAction = Action.CONTINUE;\n        }\n    }\n\n    /** Check if the integration should be stopped at the end of the\n     * current step.\n     * @return true if the integration should be stopped\n     */\n    public boolean stop() {\n        return nextAction == Action.STOP;\n    }\n\n    /** Let the event handler reset the state if it wants.\n     * @param state state at the beginning of the next step\n     * @return reset state (may by the same as initial state if only\n     * derivatives should be reset), or null if nothing is reset\n     */\n    public FieldODEState<T> reset(final FieldODEStateAndDerivative<T> state) {\n\n        if (!(pendingEvent && pendingEventTime.subtract(state.getTime()).abs().subtract(convergence).getReal() <= 0)) {\n            return null;\n        }\n\n        final FieldODEState<T> newState;\n        if (nextAction == Action.RESET_STATE) {\n            newState = handler.resetState(state);\n        } else if (nextAction == Action.RESET_DERIVATIVES) {\n            newState = state;\n        } else {\n            newState = null;\n        }\n        pendingEvent      = false;\n        pendingEventTime  = null;\n\n        return newState;\n\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "state", "org.apache.commons.math3.ode.FieldODEStateAndDerivative", "FieldODEStateAndDerivative<T>" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getMaxCheckInterval", "org.apache.commons.math3.ode.events", "FieldEventState", "public double getMaxCheckInterval()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getEventTime", "org.apache.commons.math3.ode.events", "FieldEventState", "public T getEventTime()" ], [ "getConvergence", "org.apache.commons.math3.ode.events", "FieldEventState", "public T getConvergence()" ], [ "getEventHandler", "org.apache.commons.math3.ode.events", "FieldEventState", "public FieldEventHandler<T> getEventHandler()" ], [ "stop", "org.apache.commons.math3.ode.events", "FieldEventState", "public boolean stop()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getMaxIterationCount", "org.apache.commons.math3.ode.events", "FieldEventState", "public int getMaxIterationCount()" ], [ "evaluateStep", "org.apache.commons.math3.ode.events", "FieldEventState", "public boolean evaluateStep(final FieldStepInterpolator<T> interpolator) throws MaxCountExceededException, NoBracketingException" ], [ "reset", "org.apache.commons.math3.ode.events", "FieldEventState", "public FieldODEState<T> reset(final FieldODEStateAndDerivative<T> state)" ], [ "getDerivative", "org.apache.commons.math3.ode", "FieldODEStateAndDerivative", "public T[] getDerivative()" ], [ "getSecondaryDerivative", "org.apache.commons.math3.ode", "FieldODEStateAndDerivative", "public T[] getSecondaryDerivative(int arg0)" ], [ "getSecondaryStateDimension", "org.apache.commons.math3.ode", "FieldODEState", "public int getSecondaryStateDimension(int arg0)" ], [ "getSecondaryState", "org.apache.commons.math3.ode", "FieldODEState", "public T[] getSecondaryState(int arg0)" ], [ "copy", "org.apache.commons.math3.ode", "FieldODEState", "protected T[][] copy(Field<T> arg0, T[][] arg1)" ], [ "getState", "org.apache.commons.math3.ode", "FieldODEState", "public T[] getState()" ], [ "getStateDimension", "org.apache.commons.math3.ode", "FieldODEState", "public int getStateDimension()" ], [ "getNumberOfSecondaryStates", "org.apache.commons.math3.ode", "FieldODEState", "public int getNumberOfSecondaryStates()" ], [ "getTime", "org.apache.commons.math3.ode", "FieldODEState", "public T getTime()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 20489,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.ode.events",
  "className" : "EventHandler",
  "javadocTag" : "@param y array containing the current value of the state vector",
  "methodJavadoc" : "    /** Compute the value of the switching function.\n\n   * <p>The discrete events are generated when the sign of this\n   * switching function changes. The integrator will take care to change\n   * the stepsize in such a way these events occur exactly at step boundaries.\n   * The switching function must be continuous in its roots neighborhood\n   * (but not necessarily smooth), as the integrator will need to find its\n   * roots to locate precisely the events.</p>\n   * <p>Also note that the integrator expect that once an event has occurred,\n   * the sign of the switching function at the start of the next step (i.e.\n   * just after the event) is the opposite of the sign just before the event.\n   * This consistency between the steps <string>must</strong> be preserved,\n   * otherwise {@link org.apache.commons.math3.exception.NoBracketingException\n   * exceptions} related to root not being bracketed will occur.</p>\n   * <p>This need for consistency is sometimes tricky to achieve. A typical\n   * example is using an event to model a ball bouncing on the floor. The first\n   * idea to represent this would be to have {@code g(t) = h(t)} where h is the\n   * height above the floor at time {@code t}. When {@code g(t)} reaches 0, the\n   * ball is on the floor, so it should bounce and the typical way to do this is\n   * to reverse its vertical velocity. However, this would mean that before the\n   * event {@code g(t)} was decreasing from positive values to 0, and after the\n   * event {@code g(t)} would be increasing from 0 to positive values again.\n   * Consistency is broken here! The solution here is to have {@code g(t) = sign\n   * * h(t)}, where sign is a variable with initial value set to {@code +1}. Each\n   * time {@link #eventOccurred(double, double[], boolean) eventOccurred} is called,\n   * {@code sign} is reset to {@code -sign}. This allows the {@code g(t)}\n   * function to remain continuous (and even smooth) even across events, despite\n   * {@code h(t)} is not. Basically, the event is used to <em>fold</em> {@code h(t)}\n   * at bounce points, and {@code sign} is used to <em>unfold</em> it back, so the\n   * solvers sees a {@code g(t)} function which behaves smoothly even across events.</p>\n\n   * @param t current value of the independent <i>time</i> variable\n   * @param y array containing the current value of the state vector\n   * @return value of the g switching function\n   */",
  "methodSourceCode" : "double g(double t, double[] y);",
  "classJavadoc" : "/**\n * This interface represents a handler for discrete events triggered\n * during ODE integration.\n *\n * <p>Some events can be triggered at discrete times as an ODE problem\n * is solved. This occurs for example when the integration process\n * should be stopped as some state is reached (G-stop facility) when the\n * precise date is unknown a priori, or when the derivatives have\n * discontinuities, or simply when the user wants to monitor some\n * states boundaries crossings.\n * </p>\n *\n * <p>These events are defined as occurring when a <code>g</code>\n * switching function sign changes.</p>\n *\n * <p>Since events are only problem-dependent and are triggered by the\n * independent <i>time</i> variable and the state vector, they can\n * occur at virtually any time, unknown in advance. The integrators will\n * take care to avoid sign changes inside the steps, they will reduce\n * the step size when such an event is detected in order to put this\n * event exactly at the end of the current step. This guarantees that\n * step interpolation (which always has a one step scope) is relevant\n * even in presence of discontinuities. This is independent from the\n * stepsize control provided by integrators that monitor the local\n * error (this event handling feature is available for all integrators,\n * including fixed step ones).</p>\n *\n * @since 1.2\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.ode.events;\n\n\n/** This interface represents a handler for discrete events triggered\n * during ODE integration.\n *\n * <p>Some events can be triggered at discrete times as an ODE problem\n * is solved. This occurs for example when the integration process\n * should be stopped as some state is reached (G-stop facility) when the\n * precise date is unknown a priori, or when the derivatives have\n * discontinuities, or simply when the user wants to monitor some\n * states boundaries crossings.\n * </p>\n *\n * <p>These events are defined as occurring when a <code>g</code>\n * switching function sign changes.</p>\n *\n * <p>Since events are only problem-dependent and are triggered by the\n * independent <i>time</i> variable and the state vector, they can\n * occur at virtually any time, unknown in advance. The integrators will\n * take care to avoid sign changes inside the steps, they will reduce\n * the step size when such an event is detected in order to put this\n * event exactly at the end of the current step. This guarantees that\n * step interpolation (which always has a one step scope) is relevant\n * even in presence of discontinuities. This is independent from the\n * stepsize control provided by integrators that monitor the local\n * error (this event handling feature is available for all integrators,\n * including fixed step ones).</p>\n *\n * @since 1.2\n */\n\npublic interface EventHandler  {\n\n    /** Enumerate for actions to be performed when an event occurs. */\n    enum Action {\n\n        /** Stop indicator.\n         * <p>This value should be used as the return value of the {@link\n         * #eventOccurred eventOccurred} method when the integration should be\n         * stopped after the event ending the current step.</p>\n         */\n        STOP,\n\n        /** Reset state indicator.\n         * <p>This value should be used as the return value of the {@link\n         * #eventOccurred eventOccurred} method when the integration should\n         * go on after the event ending the current step, with a new state\n         * vector (which will be retrieved thanks to the {@link #resetState\n         * resetState} method).</p>\n         */\n        RESET_STATE,\n\n        /** Reset derivatives indicator.\n         * <p>This value should be used as the return value of the {@link\n         * #eventOccurred eventOccurred} method when the integration should\n         * go on after the event ending the current step, with a new derivatives\n         * vector (which will be retrieved thanks to the {@link\n         * org.apache.commons.math3.ode.FirstOrderDifferentialEquations#computeDerivatives}\n         * method).</p>\n         */\n        RESET_DERIVATIVES,\n\n        /** Continue indicator.\n         * <p>This value should be used as the return value of the {@link\n         * #eventOccurred eventOccurred} method when the integration should go\n         * on after the event ending the current step.</p>\n         */\n        CONTINUE;\n\n    }\n\n    /** Initialize event handler at the start of an ODE integration.\n     * <p>\n     * This method is called once at the start of the integration. It\n     * may be used by the event handler to initialize some internal data\n     * if needed.\n     * </p>\n     * @param t0 start value of the independent <i>time</i> variable\n     * @param y0 array containing the start value of the state vector\n     * @param t target time for the integration\n     */\n    void init(double t0, double[] y0, double t);\n\n  /** Compute the value of the switching function.\n\n   * <p>The discrete events are generated when the sign of this\n   * switching function changes. The integrator will take care to change\n   * the stepsize in such a way these events occur exactly at step boundaries.\n   * The switching function must be continuous in its roots neighborhood\n   * (but not necessarily smooth), as the integrator will need to find its\n   * roots to locate precisely the events.</p>\n   * <p>Also note that the integrator expect that once an event has occurred,\n   * the sign of the switching function at the start of the next step (i.e.\n   * just after the event) is the opposite of the sign just before the event.\n   * This consistency between the steps <string>must</strong> be preserved,\n   * otherwise {@link org.apache.commons.math3.exception.NoBracketingException\n   * exceptions} related to root not being bracketed will occur.</p>\n   * <p>This need for consistency is sometimes tricky to achieve. A typical\n   * example is using an event to model a ball bouncing on the floor. The first\n   * idea to represent this would be to have {@code g(t) = h(t)} where h is the\n   * height above the floor at time {@code t}. When {@code g(t)} reaches 0, the\n   * ball is on the floor, so it should bounce and the typical way to do this is\n   * to reverse its vertical velocity. However, this would mean that before the\n   * event {@code g(t)} was decreasing from positive values to 0, and after the\n   * event {@code g(t)} would be increasing from 0 to positive values again.\n   * Consistency is broken here! The solution here is to have {@code g(t) = sign\n   * * h(t)}, where sign is a variable with initial value set to {@code +1}. Each\n   * time {@link #eventOccurred(double, double[], boolean) eventOccurred} is called,\n   * {@code sign} is reset to {@code -sign}. This allows the {@code g(t)}\n   * function to remain continuous (and even smooth) even across events, despite\n   * {@code h(t)} is not. Basically, the event is used to <em>fold</em> {@code h(t)}\n   * at bounce points, and {@code sign} is used to <em>unfold</em> it back, so the\n   * solvers sees a {@code g(t)} function which behaves smoothly even across events.</p>\n\n   * @param t current value of the independent <i>time</i> variable\n   * @param y array containing the current value of the state vector\n   * @return value of the g switching function\n   */\n  double g(double t, double[] y);\n\n  /** Handle an event and choose what to do next.\n\n   * <p>This method is called when the integrator has accepted a step\n   * ending exactly on a sign change of the function, just <em>before</em>\n   * the step handler itself is called (see below for scheduling). It\n   * allows the user to update his internal data to acknowledge the fact\n   * the event has been handled (for example setting a flag in the {@link\n   * org.apache.commons.math3.ode.FirstOrderDifferentialEquations\n   * differential equations} to switch the derivatives computation in\n   * case of discontinuity), or to direct the integrator to either stop\n   * or continue integration, possibly with a reset state or derivatives.</p>\n\n   * <ul>\n   *   <li>if {@link Action#STOP} is returned, the step handler will be called\n   *   with the <code>isLast</code> flag of the {@link\n   *   org.apache.commons.math3.ode.sampling.StepHandler#handleStep handleStep}\n   *   method set to true and the integration will be stopped,</li>\n   *   <li>if {@link Action#RESET_STATE} is returned, the {@link #resetState\n   *   resetState} method will be called once the step handler has\n   *   finished its task, and the integrator will also recompute the\n   *   derivatives,</li>\n   *   <li>if {@link Action#RESET_DERIVATIVES} is returned, the integrator\n   *   will recompute the derivatives,\n   *   <li>if {@link Action#CONTINUE} is returned, no specific action will\n   *   be taken (apart from having called this method) and integration\n   *   will continue.</li>\n   * </ul>\n\n   * <p>The scheduling between this method and the {@link\n   * org.apache.commons.math3.ode.sampling.StepHandler StepHandler} method {@link\n   * org.apache.commons.math3.ode.sampling.StepHandler#handleStep(\n   * org.apache.commons.math3.ode.sampling.StepInterpolator, boolean)\n   * handleStep(interpolator, isLast)} is to call this method first and\n   * <code>handleStep</code> afterwards. This scheduling allows the integrator to\n   * pass <code>true</code> as the <code>isLast</code> parameter to the step\n   * handler to make it aware the step will be the last one if this method\n   * returns {@link Action#STOP}. As the interpolator may be used to navigate back\n   * throughout the last step (as {@link\n   * org.apache.commons.math3.ode.sampling.StepNormalizer StepNormalizer}\n   * does for example), user code called by this method and user\n   * code called by step handlers may experience apparently out of order values\n   * of the independent time variable. As an example, if the same user object\n   * implements both this {@link EventHandler EventHandler} interface and the\n   * {@link org.apache.commons.math3.ode.sampling.FixedStepHandler FixedStepHandler}\n   * interface, a <em>forward</em> integration may call its\n   * <code>eventOccurred</code> method with t = 10 first and call its\n   * <code>handleStep</code> method with t = 9 afterwards. Such out of order\n   * calls are limited to the size of the integration step for {@link\n   * org.apache.commons.math3.ode.sampling.StepHandler variable step handlers} and\n   * to the size of the fixed step for {@link\n   * org.apache.commons.math3.ode.sampling.FixedStepHandler fixed step handlers}.</p>\n\n   * @param t current value of the independent <i>time</i> variable\n   * @param y array containing the current value of the state vector\n   * @param increasing if true, the value of the switching function increases\n   * when times increases around event (note that increase is measured with respect\n   * to physical time, not with respect to integration which may go backward in time)\n   * @return indication of what the integrator should do next, this\n   * value must be one of {@link Action#STOP}, {@link Action#RESET_STATE},\n   * {@link Action#RESET_DERIVATIVES} or {@link Action#CONTINUE}\n   */\n  Action eventOccurred(double t, double[] y, boolean increasing);\n\n  /** Reset the state prior to continue the integration.\n\n   * <p>This method is called after the step handler has returned and\n   * before the next step is started, but only when {@link\n   * #eventOccurred} has itself returned the {@link Action#RESET_STATE}\n   * indicator. It allows the user to reset the state vector for the\n   * next step, without perturbing the step handler of the finishing\n   * step. If the {@link #eventOccurred} never returns the {@link\n   * Action#RESET_STATE} indicator, this function will never be called, and it is\n   * safe to leave its body empty.</p>\n\n   * @param t current value of the independent <i>time</i> variable\n   * @param y array containing the current value of the state vector\n   * the new state should be put in the same array\n   */\n  void resetState(double t, double[] y);\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ [ "3", "int" ], [ "0", "int" ], [ "0", "int" ], [ "0", "int" ], [ "1", "int" ] ],
  "tokensMethodArguments" : [ [ "t", "", "double" ], [ "y", "", "double[]" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "eventOccurred", "org.apache.commons.math3.ode.events", "EventHandler", "Action eventOccurred(double t, double[] y, boolean increasing)" ], [ "g", "org.apache.commons.math3.ode.events", "EventHandler", "double g(double t, double[] y)" ], [ "equals", "", "double[]", "public boolean equals(Object);" ], [ "toString", "", "double[]", "public String toString()" ], [ "hashCode", "", "double[]", "public native int hashCode()" ], [ "getClass", "", "double[]", "public final native Class getClass();" ], [ "clone", "", "double[]", "public T[] clone();" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "length", "", "double[]", "public final int length;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 20503,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.ode.events",
  "className" : "EventState",
  "javadocTag" : "@throws MaxCountExceededException if the interpolator throws one because\nthe number of functions evaluations is exceeded",
  "methodJavadoc" : "    /** Reinitialize the beginning of the step.\n     * @param interpolator valid for the current step\n     * @throws MaxCountExceededException if the interpolator throws one because\n     * the number of functions evaluations is exceeded\n     */",
  "methodSourceCode" : "public void reinitializeBegin(final StepInterpolator interpolator) throws MaxCountExceededException{\n    t0 = interpolator.getPreviousTime();\n    interpolator.setInterpolatedTime(t0);\n    g0 = handler.g(t0, getCompleteState(interpolator));\n    if (g0 == 0) {\n        // excerpt from MATH-421 issue:\n        // If an ODE solver is setup with an EventHandler that return STOP\n        // when the even is triggered, the integrator stops (which is exactly\n        // the expected behavior). If however the user wants to restart the\n        // solver from the final state reached at the event with the same\n        // configuration (expecting the event to be triggered again at a\n        // later time), then the integrator may fail to start. It can get stuck\n        // at the previous event. The use case for the bug MATH-421 is fairly\n        // general, so events occurring exactly at start in the first step should\n        // be ignored.\n        // extremely rare case: there is a zero EXACTLY at interval start\n        // we will use the sign slightly after step beginning to force ignoring this zero\n        final double epsilon = FastMath.max(solver.getAbsoluteAccuracy(), FastMath.abs(solver.getRelativeAccuracy() * t0));\n        final double tStart = t0 + 0.5 * epsilon;\n        interpolator.setInterpolatedTime(tStart);\n        g0 = handler.g(tStart, getCompleteState(interpolator));\n    }\n    g0Positive = g0 >= 0;\n}",
  "classJavadoc" : "/** This class handles the state for one {@link EventHandler\n * event handler} during integration steps.\n *\n * <p>Each time the integrator proposes a step, the event handler\n * switching function should be checked. This class handles the state\n * of one handler during one integration step, with references to the\n * state at the end of the preceding step. This information is used to\n * decide if the handler should trigger an event or not during the\n * proposed step.</p>\n *\n * @since 1.2\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.ode.events;\n\nimport org.apache.commons.math3.analysis.UnivariateFunction;\nimport org.apache.commons.math3.analysis.solvers.AllowedSolution;\nimport org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver;\nimport org.apache.commons.math3.analysis.solvers.PegasusSolver;\nimport org.apache.commons.math3.analysis.solvers.UnivariateSolver;\nimport org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils;\nimport org.apache.commons.math3.exception.MaxCountExceededException;\nimport org.apache.commons.math3.exception.NoBracketingException;\nimport org.apache.commons.math3.ode.EquationsMapper;\nimport org.apache.commons.math3.ode.ExpandableStatefulODE;\nimport org.apache.commons.math3.ode.sampling.StepInterpolator;\nimport org.apache.commons.math3.util.FastMath;\n\n/** This class handles the state for one {@link EventHandler\n * event handler} during integration steps.\n *\n * <p>Each time the integrator proposes a step, the event handler\n * switching function should be checked. This class handles the state\n * of one handler during one integration step, with references to the\n * state at the end of the preceding step. This information is used to\n * decide if the handler should trigger an event or not during the\n * proposed step.</p>\n *\n * @since 1.2\n */\npublic class EventState {\n\n    /** Event handler. */\n    private final EventHandler handler;\n\n    /** Maximal time interval between events handler checks. */\n    private final double maxCheckInterval;\n\n    /** Convergence threshold for event localization. */\n    private final double convergence;\n\n    /** Upper limit in the iteration count for event localization. */\n    private final int maxIterationCount;\n\n    /** Equation being integrated. */\n    private ExpandableStatefulODE expandable;\n\n    /** Time at the beginning of the step. */\n    private double t0;\n\n    /** Value of the events handler at the beginning of the step. */\n    private double g0;\n\n    /** Simulated sign of g0 (we cheat when crossing events). */\n    private boolean g0Positive;\n\n    /** Indicator of event expected during the step. */\n    private boolean pendingEvent;\n\n    /** Occurrence time of the pending event. */\n    private double pendingEventTime;\n\n    /** Occurrence time of the previous event. */\n    private double previousEventTime;\n\n    /** Integration direction. */\n    private boolean forward;\n\n    /** Variation direction around pending event.\n     *  (this is considered with respect to the integration direction)\n     */\n    private boolean increasing;\n\n    /** Next action indicator. */\n    private EventHandler.Action nextAction;\n\n    /** Root-finding algorithm to use to detect state events. */\n    private final UnivariateSolver solver;\n\n    /** Simple constructor.\n     * @param handler event handler\n     * @param maxCheckInterval maximal time interval between switching\n     * function checks (this interval prevents missing sign changes in\n     * case the integration steps becomes very large)\n     * @param convergence convergence threshold in the event time search\n     * @param maxIterationCount upper limit of the iteration count in\n     * the event time search\n     * @param solver Root-finding algorithm to use to detect state events\n     */\n    public EventState(final EventHandler handler, final double maxCheckInterval,\n                      final double convergence, final int maxIterationCount,\n                      final UnivariateSolver solver) {\n        this.handler           = handler;\n        this.maxCheckInterval  = maxCheckInterval;\n        this.convergence       = FastMath.abs(convergence);\n        this.maxIterationCount = maxIterationCount;\n        this.solver            = solver;\n\n        // some dummy values ...\n        expandable        = null;\n        t0                = Double.NaN;\n        g0                = Double.NaN;\n        g0Positive        = true;\n        pendingEvent      = false;\n        pendingEventTime  = Double.NaN;\n        previousEventTime = Double.NaN;\n        increasing        = true;\n        nextAction        = EventHandler.Action.CONTINUE;\n\n    }\n\n    /** Get the underlying event handler.\n     * @return underlying event handler\n     */\n    public EventHandler getEventHandler() {\n        return handler;\n    }\n\n    /** Set the equation.\n     * @param expandable equation being integrated\n     */\n    public void setExpandable(final ExpandableStatefulODE expandable) {\n        this.expandable = expandable;\n    }\n\n    /** Get the maximal time interval between events handler checks.\n     * @return maximal time interval between events handler checks\n     */\n    public double getMaxCheckInterval() {\n        return maxCheckInterval;\n    }\n\n    /** Get the convergence threshold for event localization.\n     * @return convergence threshold for event localization\n     */\n    public double getConvergence() {\n        return convergence;\n    }\n\n    /** Get the upper limit in the iteration count for event localization.\n     * @return upper limit in the iteration count for event localization\n     */\n    public int getMaxIterationCount() {\n        return maxIterationCount;\n    }\n\n    /** Reinitialize the beginning of the step.\n     * @param interpolator valid for the current step\n     * @exception MaxCountExceededException if the interpolator throws one because\n     * the number of functions evaluations is exceeded\n     */\n    public void reinitializeBegin(final StepInterpolator interpolator)\n        throws MaxCountExceededException {\n\n        t0 = interpolator.getPreviousTime();\n        interpolator.setInterpolatedTime(t0);\n        g0 = handler.g(t0, getCompleteState(interpolator));\n        if (g0 == 0) {\n            // excerpt from MATH-421 issue:\n            // If an ODE solver is setup with an EventHandler that return STOP\n            // when the even is triggered, the integrator stops (which is exactly\n            // the expected behavior). If however the user wants to restart the\n            // solver from the final state reached at the event with the same\n            // configuration (expecting the event to be triggered again at a\n            // later time), then the integrator may fail to start. It can get stuck\n            // at the previous event. The use case for the bug MATH-421 is fairly\n            // general, so events occurring exactly at start in the first step should\n            // be ignored.\n\n            // extremely rare case: there is a zero EXACTLY at interval start\n            // we will use the sign slightly after step beginning to force ignoring this zero\n            final double epsilon = FastMath.max(solver.getAbsoluteAccuracy(),\n                                                FastMath.abs(solver.getRelativeAccuracy() * t0));\n            final double tStart = t0 + 0.5 * epsilon;\n            interpolator.setInterpolatedTime(tStart);\n            g0 = handler.g(tStart, getCompleteState(interpolator));\n        }\n        g0Positive = g0 >= 0;\n\n    }\n\n    /** Get the complete state (primary and secondary).\n     * @param interpolator interpolator to use\n     * @return complete state\n     */\n    private double[] getCompleteState(final StepInterpolator interpolator) {\n\n        final double[] complete = new double[expandable.getTotalDimension()];\n\n        expandable.getPrimaryMapper().insertEquationData(interpolator.getInterpolatedState(),\n                                                         complete);\n        int index = 0;\n        for (EquationsMapper secondary : expandable.getSecondaryMappers()) {\n            secondary.insertEquationData(interpolator.getInterpolatedSecondaryState(index++),\n                                         complete);\n        }\n\n        return complete;\n\n    }\n\n    /** Evaluate the impact of the proposed step on the event handler.\n     * @param interpolator step interpolator for the proposed step\n     * @return true if the event handler triggers an event before\n     * the end of the proposed step\n     * @exception MaxCountExceededException if the interpolator throws one because\n     * the number of functions evaluations is exceeded\n     * @exception NoBracketingException if the event cannot be bracketed\n     */\n    public boolean evaluateStep(final StepInterpolator interpolator)\n        throws MaxCountExceededException, NoBracketingException {\n\n        try {\n            forward = interpolator.isForward();\n            final double t1 = interpolator.getCurrentTime();\n            final double dt = t1 - t0;\n            if (FastMath.abs(dt) < convergence) {\n                // we cannot do anything on such a small step, don't trigger any events\n                return false;\n            }\n            final int    n = FastMath.max(1, (int) FastMath.ceil(FastMath.abs(dt) / maxCheckInterval));\n            final double h = dt / n;\n\n            final UnivariateFunction f = new UnivariateFunction() {\n                /** {@inheritDoc} */\n                public double value(final double t) throws LocalMaxCountExceededException {\n                    try {\n                        interpolator.setInterpolatedTime(t);\n                        return handler.g(t, getCompleteState(interpolator));\n                    } catch (MaxCountExceededException mcee) {\n                        throw new LocalMaxCountExceededException(mcee);\n                    }\n                }\n            };\n\n            double ta = t0;\n            double ga = g0;\n            for (int i = 0; i < n; ++i) {\n\n                // evaluate handler value at the end of the substep\n                final double tb = (i == n - 1) ? t1 : t0 + (i + 1) * h;\n                interpolator.setInterpolatedTime(tb);\n                final double gb = handler.g(tb, getCompleteState(interpolator));\n\n                // check events occurrence\n                if (g0Positive ^ (gb >= 0)) {\n                    // there is a sign change: an event is expected during this step\n\n                    // variation direction, with respect to the integration direction\n                    increasing = gb >= ga;\n\n                    // find the event time making sure we select a solution just at or past the exact root\n                    final double root;\n                    if (solver instanceof BracketedUnivariateSolver<?>) {\n                        @SuppressWarnings(\"unchecked\")\n                        BracketedUnivariateSolver<UnivariateFunction> bracketing =\n                                (BracketedUnivariateSolver<UnivariateFunction>) solver;\n                        root = forward ?\n                               bracketing.solve(maxIterationCount, f, ta, tb, AllowedSolution.RIGHT_SIDE) :\n                               bracketing.solve(maxIterationCount, f, tb, ta, AllowedSolution.LEFT_SIDE);\n                    } else {\n                        final double baseRoot = forward ?\n                                                solver.solve(maxIterationCount, f, ta, tb) :\n                                                solver.solve(maxIterationCount, f, tb, ta);\n                        final int remainingEval = maxIterationCount - solver.getEvaluations();\n                        BracketedUnivariateSolver<UnivariateFunction> bracketing =\n                                new PegasusSolver(solver.getRelativeAccuracy(), solver.getAbsoluteAccuracy());\n                        root = forward ?\n                               UnivariateSolverUtils.forceSide(remainingEval, f, bracketing,\n                                                                   baseRoot, ta, tb, AllowedSolution.RIGHT_SIDE) :\n                               UnivariateSolverUtils.forceSide(remainingEval, f, bracketing,\n                                                                   baseRoot, tb, ta, AllowedSolution.LEFT_SIDE);\n                    }\n\n                    if ((!Double.isNaN(previousEventTime)) &&\n                        (FastMath.abs(root - ta) <= convergence) &&\n                        (FastMath.abs(root - previousEventTime) <= convergence)) {\n                        // we have either found nothing or found (again ?) a past event,\n                        // retry the substep excluding this value, and taking care to have the\n                        // required sign in case the g function is noisy around its zero and\n                        // crosses the axis several times\n                        do {\n                            ta = forward ? ta + convergence : ta - convergence;\n                            ga = f.value(ta);\n                        } while ((g0Positive ^ (ga >= 0)) && (forward ^ (ta >= tb)));\n\n                        if (forward ^ (ta >= tb)) {\n                            // we were able to skip this spurious root\n                            --i;\n                        } else {\n                            // we can't avoid this root before the end of the step,\n                            // we have to handle it despite it is close to the former one\n                            // maybe we have two very close roots\n                            pendingEventTime = root;\n                            pendingEvent = true;\n                            return true;\n                        }\n                    } else if (Double.isNaN(previousEventTime) ||\n                               (FastMath.abs(previousEventTime - root) > convergence)) {\n                        pendingEventTime = root;\n                        pendingEvent = true;\n                        return true;\n                    } else {\n                        // no sign change: there is no event for now\n                        ta = tb;\n                        ga = gb;\n                    }\n\n                } else {\n                    // no sign change: there is no event for now\n                    ta = tb;\n                    ga = gb;\n                }\n\n            }\n\n            // no event during the whole step\n            pendingEvent     = false;\n            pendingEventTime = Double.NaN;\n            return false;\n\n        } catch (LocalMaxCountExceededException lmcee) {\n            throw lmcee.getException();\n        }\n\n    }\n\n    /** Get the occurrence time of the event triggered in the current step.\n     * @return occurrence time of the event triggered in the current\n     * step or infinity if no events are triggered\n     */\n    public double getEventTime() {\n        return pendingEvent ?\n               pendingEventTime :\n               (forward ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY);\n    }\n\n    /** Acknowledge the fact the step has been accepted by the integrator.\n     * @param t value of the independent <i>time</i> variable at the\n     * end of the step\n     * @param y array containing the current value of the state vector\n     * at the end of the step\n     */\n    public void stepAccepted(final double t, final double[] y) {\n\n        t0 = t;\n        g0 = handler.g(t, y);\n\n        if (pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence)) {\n            // force the sign to its value \"just after the event\"\n            previousEventTime = t;\n            g0Positive        = increasing;\n            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));\n        } else {\n            g0Positive = g0 >= 0;\n            nextAction = EventHandler.Action.CONTINUE;\n        }\n    }\n\n    /** Check if the integration should be stopped at the end of the\n     * current step.\n     * @return true if the integration should be stopped\n     */\n    public boolean stop() {\n        return nextAction == EventHandler.Action.STOP;\n    }\n\n    /** Let the event handler reset the state if it wants.\n     * @param t value of the independent <i>time</i> variable at the\n     * beginning of the next step\n     * @param y array were to put the desired state vector at the beginning\n     * of the next step\n     * @return true if the integrator should reset the derivatives too\n     */\n    public boolean reset(final double t, final double[] y) {\n\n        if (!(pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence))) {\n            return false;\n        }\n\n        if (nextAction == EventHandler.Action.RESET_STATE) {\n            handler.resetState(t, y);\n        }\n        pendingEvent      = false;\n        pendingEventTime  = Double.NaN;\n\n        return (nextAction == EventHandler.Action.RESET_STATE) ||\n               (nextAction == EventHandler.Action.RESET_DERIVATIVES);\n\n    }\n\n    /** Local wrapper to propagate exceptions. */\n    private static class LocalMaxCountExceededException extends RuntimeException {\n\n        /** Serializable UID. */\n        private static final long serialVersionUID = 20120901L;\n\n        /** Wrapped exception. */\n        private final MaxCountExceededException wrapped;\n\n        /** Simple constructor.\n         * @param exception exception to wrap\n         */\n        LocalMaxCountExceededException(final MaxCountExceededException exception) {\n            wrapped = exception;\n        }\n\n        /** Get the wrapped exception.\n         * @return wrapped exception\n         */\n        public MaxCountExceededException getException() {\n            return wrapped;\n        }\n\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "interpolator", "org.apache.commons.math3.ode.sampling", "StepInterpolator" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getMaxIterationCount", "org.apache.commons.math3.ode.events", "EventState", "public int getMaxIterationCount()" ], [ "reset", "org.apache.commons.math3.ode.events", "EventState", "public boolean reset(final double t, final double[] y)" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getConvergence", "org.apache.commons.math3.ode.events", "EventState", "public double getConvergence()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "stop", "org.apache.commons.math3.ode.events", "EventState", "public boolean stop()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "getEventHandler", "org.apache.commons.math3.ode.events", "EventState", "public EventHandler getEventHandler()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "evaluateStep", "org.apache.commons.math3.ode.events", "EventState", "public boolean evaluateStep(final StepInterpolator interpolator) throws MaxCountExceededException, NoBracketingException" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getEventTime", "org.apache.commons.math3.ode.events", "EventState", "public double getEventTime()" ], [ "getMaxCheckInterval", "org.apache.commons.math3.ode.events", "EventState", "public double getMaxCheckInterval()" ], [ "getCurrentTime", "org.apache.commons.math3.ode.sampling", "StepInterpolator", "public abstract double getCurrentTime()" ], [ "getInterpolatedState", "org.apache.commons.math3.ode.sampling", "StepInterpolator", "public abstract double[] getInterpolatedState() throws MaxCountExceededException" ], [ "getInterpolatedDerivatives", "org.apache.commons.math3.ode.sampling", "StepInterpolator", "public abstract double[] getInterpolatedDerivatives() throws MaxCountExceededException" ], [ "getPreviousTime", "org.apache.commons.math3.ode.sampling", "StepInterpolator", "public abstract double getPreviousTime()" ], [ "getInterpolatedSecondaryState", "org.apache.commons.math3.ode.sampling", "StepInterpolator", "public abstract double[] getInterpolatedSecondaryState(int arg0) throws MaxCountExceededException" ], [ "getInterpolatedTime", "org.apache.commons.math3.ode.sampling", "StepInterpolator", "public abstract double getInterpolatedTime()" ], [ "isForward", "org.apache.commons.math3.ode.sampling", "StepInterpolator", "public abstract boolean isForward()" ], [ "getInterpolatedSecondaryDerivatives", "org.apache.commons.math3.ode.sampling", "StepInterpolator", "public abstract double[] getInterpolatedSecondaryDerivatives(int arg0) throws MaxCountExceededException" ], [ "copy", "org.apache.commons.math3.ode.sampling", "StepInterpolator", "public abstract StepInterpolator copy() throws MaxCountExceededException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 20508,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.ode.events",
  "className" : "EventState",
  "javadocTag" : "@throws MaxCountExceededException if the interpolator throws one because\nthe number of functions evaluations is exceeded",
  "methodJavadoc" : "    /** Evaluate the impact of the proposed step on the event handler.\n     * @param interpolator step interpolator for the proposed step\n     * @return true if the event handler triggers an event before\n     * the end of the proposed step\n     * @throws MaxCountExceededException if the interpolator throws one because\n     * the number of functions evaluations is exceeded\n     * @throws NoBracketingException if the event cannot be bracketed\n     */",
  "methodSourceCode" : "public boolean evaluateStep(final StepInterpolator interpolator) throws MaxCountExceededException, NoBracketingException{\n    try {\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final double dt = t1 - t0;\n        if (FastMath.abs(dt) < convergence) {\n            // we cannot do anything on such a small step, don't trigger any events\n            return false;\n        }\n        final int n = FastMath.max(1, (int) FastMath.ceil(FastMath.abs(dt) / maxCheckInterval));\n        final double h = dt / n;\n        final UnivariateFunction f = new UnivariateFunction() {\n\n            /**\n             * {@inheritDoc}\n             */\n            public double value(final double t) throws LocalMaxCountExceededException {\n                try {\n                    interpolator.setInterpolatedTime(t);\n                    return handler.g(t, getCompleteState(interpolator));\n                } catch (MaxCountExceededException mcee) {\n                    throw new LocalMaxCountExceededException(mcee);\n                }\n            }\n        };\n        double ta = t0;\n        double ga = g0;\n        for (int i = 0; i < n; ++i) {\n            // evaluate handler value at the end of the substep\n            final double tb = (i == n - 1) ? t1 : t0 + (i + 1) * h;\n            interpolator.setInterpolatedTime(tb);\n            final double gb = handler.g(tb, getCompleteState(interpolator));\n            // check events occurrence\n            if (g0Positive ^ (gb >= 0)) {\n                // there is a sign change: an event is expected during this step\n                // variation direction, with respect to the integration direction\n                increasing = gb >= ga;\n                // find the event time making sure we select a solution just at or past the exact root\n                final double root;\n                if (solver instanceof BracketedUnivariateSolver<?>) {\n                    @SuppressWarnings(\"unchecked\")\n                    BracketedUnivariateSolver<UnivariateFunction> bracketing = (BracketedUnivariateSolver<UnivariateFunction>) solver;\n                    root = forward ? bracketing.solve(maxIterationCount, f, ta, tb, AllowedSolution.RIGHT_SIDE) : bracketing.solve(maxIterationCount, f, tb, ta, AllowedSolution.LEFT_SIDE);\n                } else {\n                    final double baseRoot = forward ? solver.solve(maxIterationCount, f, ta, tb) : solver.solve(maxIterationCount, f, tb, ta);\n                    final int remainingEval = maxIterationCount - solver.getEvaluations();\n                    BracketedUnivariateSolver<UnivariateFunction> bracketing = new PegasusSolver(solver.getRelativeAccuracy(), solver.getAbsoluteAccuracy());\n                    root = forward ? UnivariateSolverUtils.forceSide(remainingEval, f, bracketing, baseRoot, ta, tb, AllowedSolution.RIGHT_SIDE) : UnivariateSolverUtils.forceSide(remainingEval, f, bracketing, baseRoot, tb, ta, AllowedSolution.LEFT_SIDE);\n                }\n                if ((!Double.isNaN(previousEventTime)) && (FastMath.abs(root - ta) <= convergence) && (FastMath.abs(root - previousEventTime) <= convergence)) {\n                    // we have either found nothing or found (again ?) a past event,\n                    // retry the substep excluding this value, and taking care to have the\n                    // required sign in case the g function is noisy around its zero and\n                    // crosses the axis several times\n                    do {\n                        ta = forward ? ta + convergence : ta - convergence;\n                        ga = f.value(ta);\n                    } while ((g0Positive ^ (ga >= 0)) && (forward ^ (ta >= tb)));\n                    if (forward ^ (ta >= tb)) {\n                        // we were able to skip this spurious root\n                        --i;\n                    } else {\n                        // we can't avoid this root before the end of the step,\n                        // we have to handle it despite it is close to the former one\n                        // maybe we have two very close roots\n                        pendingEventTime = root;\n                        pendingEvent = true;\n                        return true;\n                    }\n                } else if (Double.isNaN(previousEventTime) || (FastMath.abs(previousEventTime - root) > convergence)) {\n                    pendingEventTime = root;\n                    pendingEvent = true;\n                    return true;\n                } else {\n                    // no sign change: there is no event for now\n                    ta = tb;\n                    ga = gb;\n                }\n            } else {\n                // no sign change: there is no event for now\n                ta = tb;\n                ga = gb;\n            }\n        }\n        // no event during the whole step\n        pendingEvent = false;\n        pendingEventTime = Double.NaN;\n        return false;\n    } catch (LocalMaxCountExceededException lmcee) {\n        throw lmcee.getException();\n    }\n}",
  "classJavadoc" : "/** This class handles the state for one {@link EventHandler\n * event handler} during integration steps.\n *\n * <p>Each time the integrator proposes a step, the event handler\n * switching function should be checked. This class handles the state\n * of one handler during one integration step, with references to the\n * state at the end of the preceding step. This information is used to\n * decide if the handler should trigger an event or not during the\n * proposed step.</p>\n *\n * @since 1.2\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.ode.events;\n\nimport org.apache.commons.math3.analysis.UnivariateFunction;\nimport org.apache.commons.math3.analysis.solvers.AllowedSolution;\nimport org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver;\nimport org.apache.commons.math3.analysis.solvers.PegasusSolver;\nimport org.apache.commons.math3.analysis.solvers.UnivariateSolver;\nimport org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils;\nimport org.apache.commons.math3.exception.MaxCountExceededException;\nimport org.apache.commons.math3.exception.NoBracketingException;\nimport org.apache.commons.math3.ode.EquationsMapper;\nimport org.apache.commons.math3.ode.ExpandableStatefulODE;\nimport org.apache.commons.math3.ode.sampling.StepInterpolator;\nimport org.apache.commons.math3.util.FastMath;\n\n/** This class handles the state for one {@link EventHandler\n * event handler} during integration steps.\n *\n * <p>Each time the integrator proposes a step, the event handler\n * switching function should be checked. This class handles the state\n * of one handler during one integration step, with references to the\n * state at the end of the preceding step. This information is used to\n * decide if the handler should trigger an event or not during the\n * proposed step.</p>\n *\n * @since 1.2\n */\npublic class EventState {\n\n    /** Event handler. */\n    private final EventHandler handler;\n\n    /** Maximal time interval between events handler checks. */\n    private final double maxCheckInterval;\n\n    /** Convergence threshold for event localization. */\n    private final double convergence;\n\n    /** Upper limit in the iteration count for event localization. */\n    private final int maxIterationCount;\n\n    /** Equation being integrated. */\n    private ExpandableStatefulODE expandable;\n\n    /** Time at the beginning of the step. */\n    private double t0;\n\n    /** Value of the events handler at the beginning of the step. */\n    private double g0;\n\n    /** Simulated sign of g0 (we cheat when crossing events). */\n    private boolean g0Positive;\n\n    /** Indicator of event expected during the step. */\n    private boolean pendingEvent;\n\n    /** Occurrence time of the pending event. */\n    private double pendingEventTime;\n\n    /** Occurrence time of the previous event. */\n    private double previousEventTime;\n\n    /** Integration direction. */\n    private boolean forward;\n\n    /** Variation direction around pending event.\n     *  (this is considered with respect to the integration direction)\n     */\n    private boolean increasing;\n\n    /** Next action indicator. */\n    private EventHandler.Action nextAction;\n\n    /** Root-finding algorithm to use to detect state events. */\n    private final UnivariateSolver solver;\n\n    /** Simple constructor.\n     * @param handler event handler\n     * @param maxCheckInterval maximal time interval between switching\n     * function checks (this interval prevents missing sign changes in\n     * case the integration steps becomes very large)\n     * @param convergence convergence threshold in the event time search\n     * @param maxIterationCount upper limit of the iteration count in\n     * the event time search\n     * @param solver Root-finding algorithm to use to detect state events\n     */\n    public EventState(final EventHandler handler, final double maxCheckInterval,\n                      final double convergence, final int maxIterationCount,\n                      final UnivariateSolver solver) {\n        this.handler           = handler;\n        this.maxCheckInterval  = maxCheckInterval;\n        this.convergence       = FastMath.abs(convergence);\n        this.maxIterationCount = maxIterationCount;\n        this.solver            = solver;\n\n        // some dummy values ...\n        expandable        = null;\n        t0                = Double.NaN;\n        g0                = Double.NaN;\n        g0Positive        = true;\n        pendingEvent      = false;\n        pendingEventTime  = Double.NaN;\n        previousEventTime = Double.NaN;\n        increasing        = true;\n        nextAction        = EventHandler.Action.CONTINUE;\n\n    }\n\n    /** Get the underlying event handler.\n     * @return underlying event handler\n     */\n    public EventHandler getEventHandler() {\n        return handler;\n    }\n\n    /** Set the equation.\n     * @param expandable equation being integrated\n     */\n    public void setExpandable(final ExpandableStatefulODE expandable) {\n        this.expandable = expandable;\n    }\n\n    /** Get the maximal time interval between events handler checks.\n     * @return maximal time interval between events handler checks\n     */\n    public double getMaxCheckInterval() {\n        return maxCheckInterval;\n    }\n\n    /** Get the convergence threshold for event localization.\n     * @return convergence threshold for event localization\n     */\n    public double getConvergence() {\n        return convergence;\n    }\n\n    /** Get the upper limit in the iteration count for event localization.\n     * @return upper limit in the iteration count for event localization\n     */\n    public int getMaxIterationCount() {\n        return maxIterationCount;\n    }\n\n    /** Reinitialize the beginning of the step.\n     * @param interpolator valid for the current step\n     * @exception MaxCountExceededException if the interpolator throws one because\n     * the number of functions evaluations is exceeded\n     */\n    public void reinitializeBegin(final StepInterpolator interpolator)\n        throws MaxCountExceededException {\n\n        t0 = interpolator.getPreviousTime();\n        interpolator.setInterpolatedTime(t0);\n        g0 = handler.g(t0, getCompleteState(interpolator));\n        if (g0 == 0) {\n            // excerpt from MATH-421 issue:\n            // If an ODE solver is setup with an EventHandler that return STOP\n            // when the even is triggered, the integrator stops (which is exactly\n            // the expected behavior). If however the user wants to restart the\n            // solver from the final state reached at the event with the same\n            // configuration (expecting the event to be triggered again at a\n            // later time), then the integrator may fail to start. It can get stuck\n            // at the previous event. The use case for the bug MATH-421 is fairly\n            // general, so events occurring exactly at start in the first step should\n            // be ignored.\n\n            // extremely rare case: there is a zero EXACTLY at interval start\n            // we will use the sign slightly after step beginning to force ignoring this zero\n            final double epsilon = FastMath.max(solver.getAbsoluteAccuracy(),\n                                                FastMath.abs(solver.getRelativeAccuracy() * t0));\n            final double tStart = t0 + 0.5 * epsilon;\n            interpolator.setInterpolatedTime(tStart);\n            g0 = handler.g(tStart, getCompleteState(interpolator));\n        }\n        g0Positive = g0 >= 0;\n\n    }\n\n    /** Get the complete state (primary and secondary).\n     * @param interpolator interpolator to use\n     * @return complete state\n     */\n    private double[] getCompleteState(final StepInterpolator interpolator) {\n\n        final double[] complete = new double[expandable.getTotalDimension()];\n\n        expandable.getPrimaryMapper().insertEquationData(interpolator.getInterpolatedState(),\n                                                         complete);\n        int index = 0;\n        for (EquationsMapper secondary : expandable.getSecondaryMappers()) {\n            secondary.insertEquationData(interpolator.getInterpolatedSecondaryState(index++),\n                                         complete);\n        }\n\n        return complete;\n\n    }\n\n    /** Evaluate the impact of the proposed step on the event handler.\n     * @param interpolator step interpolator for the proposed step\n     * @return true if the event handler triggers an event before\n     * the end of the proposed step\n     * @exception MaxCountExceededException if the interpolator throws one because\n     * the number of functions evaluations is exceeded\n     * @exception NoBracketingException if the event cannot be bracketed\n     */\n    public boolean evaluateStep(final StepInterpolator interpolator)\n        throws MaxCountExceededException, NoBracketingException {\n\n        try {\n            forward = interpolator.isForward();\n            final double t1 = interpolator.getCurrentTime();\n            final double dt = t1 - t0;\n            if (FastMath.abs(dt) < convergence) {\n                // we cannot do anything on such a small step, don't trigger any events\n                return false;\n            }\n            final int    n = FastMath.max(1, (int) FastMath.ceil(FastMath.abs(dt) / maxCheckInterval));\n            final double h = dt / n;\n\n            final UnivariateFunction f = new UnivariateFunction() {\n                /** {@inheritDoc} */\n                public double value(final double t) throws LocalMaxCountExceededException {\n                    try {\n                        interpolator.setInterpolatedTime(t);\n                        return handler.g(t, getCompleteState(interpolator));\n                    } catch (MaxCountExceededException mcee) {\n                        throw new LocalMaxCountExceededException(mcee);\n                    }\n                }\n            };\n\n            double ta = t0;\n            double ga = g0;\n            for (int i = 0; i < n; ++i) {\n\n                // evaluate handler value at the end of the substep\n                final double tb = (i == n - 1) ? t1 : t0 + (i + 1) * h;\n                interpolator.setInterpolatedTime(tb);\n                final double gb = handler.g(tb, getCompleteState(interpolator));\n\n                // check events occurrence\n                if (g0Positive ^ (gb >= 0)) {\n                    // there is a sign change: an event is expected during this step\n\n                    // variation direction, with respect to the integration direction\n                    increasing = gb >= ga;\n\n                    // find the event time making sure we select a solution just at or past the exact root\n                    final double root;\n                    if (solver instanceof BracketedUnivariateSolver<?>) {\n                        @SuppressWarnings(\"unchecked\")\n                        BracketedUnivariateSolver<UnivariateFunction> bracketing =\n                                (BracketedUnivariateSolver<UnivariateFunction>) solver;\n                        root = forward ?\n                               bracketing.solve(maxIterationCount, f, ta, tb, AllowedSolution.RIGHT_SIDE) :\n                               bracketing.solve(maxIterationCount, f, tb, ta, AllowedSolution.LEFT_SIDE);\n                    } else {\n                        final double baseRoot = forward ?\n                                                solver.solve(maxIterationCount, f, ta, tb) :\n                                                solver.solve(maxIterationCount, f, tb, ta);\n                        final int remainingEval = maxIterationCount - solver.getEvaluations();\n                        BracketedUnivariateSolver<UnivariateFunction> bracketing =\n                                new PegasusSolver(solver.getRelativeAccuracy(), solver.getAbsoluteAccuracy());\n                        root = forward ?\n                               UnivariateSolverUtils.forceSide(remainingEval, f, bracketing,\n                                                                   baseRoot, ta, tb, AllowedSolution.RIGHT_SIDE) :\n                               UnivariateSolverUtils.forceSide(remainingEval, f, bracketing,\n                                                                   baseRoot, tb, ta, AllowedSolution.LEFT_SIDE);\n                    }\n\n                    if ((!Double.isNaN(previousEventTime)) &&\n                        (FastMath.abs(root - ta) <= convergence) &&\n                        (FastMath.abs(root - previousEventTime) <= convergence)) {\n                        // we have either found nothing or found (again ?) a past event,\n                        // retry the substep excluding this value, and taking care to have the\n                        // required sign in case the g function is noisy around its zero and\n                        // crosses the axis several times\n                        do {\n                            ta = forward ? ta + convergence : ta - convergence;\n                            ga = f.value(ta);\n                        } while ((g0Positive ^ (ga >= 0)) && (forward ^ (ta >= tb)));\n\n                        if (forward ^ (ta >= tb)) {\n                            // we were able to skip this spurious root\n                            --i;\n                        } else {\n                            // we can't avoid this root before the end of the step,\n                            // we have to handle it despite it is close to the former one\n                            // maybe we have two very close roots\n                            pendingEventTime = root;\n                            pendingEvent = true;\n                            return true;\n                        }\n                    } else if (Double.isNaN(previousEventTime) ||\n                               (FastMath.abs(previousEventTime - root) > convergence)) {\n                        pendingEventTime = root;\n                        pendingEvent = true;\n                        return true;\n                    } else {\n                        // no sign change: there is no event for now\n                        ta = tb;\n                        ga = gb;\n                    }\n\n                } else {\n                    // no sign change: there is no event for now\n                    ta = tb;\n                    ga = gb;\n                }\n\n            }\n\n            // no event during the whole step\n            pendingEvent     = false;\n            pendingEventTime = Double.NaN;\n            return false;\n\n        } catch (LocalMaxCountExceededException lmcee) {\n            throw lmcee.getException();\n        }\n\n    }\n\n    /** Get the occurrence time of the event triggered in the current step.\n     * @return occurrence time of the event triggered in the current\n     * step or infinity if no events are triggered\n     */\n    public double getEventTime() {\n        return pendingEvent ?\n               pendingEventTime :\n               (forward ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY);\n    }\n\n    /** Acknowledge the fact the step has been accepted by the integrator.\n     * @param t value of the independent <i>time</i> variable at the\n     * end of the step\n     * @param y array containing the current value of the state vector\n     * at the end of the step\n     */\n    public void stepAccepted(final double t, final double[] y) {\n\n        t0 = t;\n        g0 = handler.g(t, y);\n\n        if (pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence)) {\n            // force the sign to its value \"just after the event\"\n            previousEventTime = t;\n            g0Positive        = increasing;\n            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));\n        } else {\n            g0Positive = g0 >= 0;\n            nextAction = EventHandler.Action.CONTINUE;\n        }\n    }\n\n    /** Check if the integration should be stopped at the end of the\n     * current step.\n     * @return true if the integration should be stopped\n     */\n    public boolean stop() {\n        return nextAction == EventHandler.Action.STOP;\n    }\n\n    /** Let the event handler reset the state if it wants.\n     * @param t value of the independent <i>time</i> variable at the\n     * beginning of the next step\n     * @param y array were to put the desired state vector at the beginning\n     * of the next step\n     * @return true if the integrator should reset the derivatives too\n     */\n    public boolean reset(final double t, final double[] y) {\n\n        if (!(pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence))) {\n            return false;\n        }\n\n        if (nextAction == EventHandler.Action.RESET_STATE) {\n            handler.resetState(t, y);\n        }\n        pendingEvent      = false;\n        pendingEventTime  = Double.NaN;\n\n        return (nextAction == EventHandler.Action.RESET_STATE) ||\n               (nextAction == EventHandler.Action.RESET_DERIVATIVES);\n\n    }\n\n    /** Local wrapper to propagate exceptions. */\n    private static class LocalMaxCountExceededException extends RuntimeException {\n\n        /** Serializable UID. */\n        private static final long serialVersionUID = 20120901L;\n\n        /** Wrapped exception. */\n        private final MaxCountExceededException wrapped;\n\n        /** Simple constructor.\n         * @param exception exception to wrap\n         */\n        LocalMaxCountExceededException(final MaxCountExceededException exception) {\n            wrapped = exception;\n        }\n\n        /** Get the wrapped exception.\n         * @return wrapped exception\n         */\n        public MaxCountExceededException getException() {\n            return wrapped;\n        }\n\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "interpolator", "org.apache.commons.math3.ode.sampling", "StepInterpolator" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getEventHandler", "org.apache.commons.math3.ode.events", "EventState", "public EventHandler getEventHandler()" ], [ "getMaxCheckInterval", "org.apache.commons.math3.ode.events", "EventState", "public double getMaxCheckInterval()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "getEventTime", "org.apache.commons.math3.ode.events", "EventState", "public double getEventTime()" ], [ "evaluateStep", "org.apache.commons.math3.ode.events", "EventState", "public boolean evaluateStep(final StepInterpolator interpolator) throws MaxCountExceededException, NoBracketingException" ], [ "reset", "org.apache.commons.math3.ode.events", "EventState", "public boolean reset(final double t, final double[] y)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getConvergence", "org.apache.commons.math3.ode.events", "EventState", "public double getConvergence()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getMaxIterationCount", "org.apache.commons.math3.ode.events", "EventState", "public int getMaxIterationCount()" ], [ "stop", "org.apache.commons.math3.ode.events", "EventState", "public boolean stop()" ], [ "getPreviousTime", "org.apache.commons.math3.ode.sampling", "StepInterpolator", "public abstract double getPreviousTime()" ], [ "getInterpolatedDerivatives", "org.apache.commons.math3.ode.sampling", "StepInterpolator", "public abstract double[] getInterpolatedDerivatives() throws MaxCountExceededException" ], [ "getInterpolatedSecondaryDerivatives", "org.apache.commons.math3.ode.sampling", "StepInterpolator", "public abstract double[] getInterpolatedSecondaryDerivatives(int arg0) throws MaxCountExceededException" ], [ "isForward", "org.apache.commons.math3.ode.sampling", "StepInterpolator", "public abstract boolean isForward()" ], [ "getInterpolatedSecondaryState", "org.apache.commons.math3.ode.sampling", "StepInterpolator", "public abstract double[] getInterpolatedSecondaryState(int arg0) throws MaxCountExceededException" ], [ "getCurrentTime", "org.apache.commons.math3.ode.sampling", "StepInterpolator", "public abstract double getCurrentTime()" ], [ "copy", "org.apache.commons.math3.ode.sampling", "StepInterpolator", "public abstract StepInterpolator copy() throws MaxCountExceededException" ], [ "getInterpolatedTime", "org.apache.commons.math3.ode.sampling", "StepInterpolator", "public abstract double getInterpolatedTime()" ], [ "getInterpolatedState", "org.apache.commons.math3.ode.sampling", "StepInterpolator", "public abstract double[] getInterpolatedState() throws MaxCountExceededException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 20524,
  "oracle" : ";",
  "oracleType" : "NORMAL_POST",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.ode.events",
  "className" : "FilterType",
  "javadocTag" : "@return true if triggered events are increasing events",
  "methodJavadoc" : "    /** Get the increasing status of triggered events.\n     * @return true if triggered events are increasing events\n     */",
  "methodSourceCode" : "protected abstract boolean getTriggeredIncreasing();",
  "classJavadoc" : "/**\n * Enumerate for {@link EventFilter filtering events}.\n *\n * @since 3.2\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.ode.events;\n\nimport org.apache.commons.math3.exception.MathInternalError;\n\n/** Enumerate for {@link EventFilter filtering events}.\n *\n * @since 3.2\n */\n\npublic enum FilterType {\n\n    /** Constant for triggering only decreasing events.\n     * <p>When this filter is used, the wrapped {@link EventHandler\n     * event handler} {@link EventHandler#eventOccurred(double, double[],\n     * boolean) eventOccurred} method will be called <em>only</em> with\n     * its {@code increasing} argument set to false.</p>\n     */\n    TRIGGER_ONLY_DECREASING_EVENTS {\n\n        /**  {@inheritDoc} */\n        @Override\n        protected boolean getTriggeredIncreasing() {\n            return false;\n        }\n\n        /** {@inheritDoc}\n         * <p>\n         * states scheduling for computing h(t,y) as an altered version of g(t, y)\n         * <ul>\n         * <li>0 are triggered events for which a zero is produced (here decreasing events)</li>\n         * <li>X are ignored events for which zero is masked (here increasing events)</li>\n         * </ul>\n         * </p>\n         * <pre>\n         *  g(t)\n         *             ___                     ___                     ___\n         *            /   \\                   /   \\                   /   \\\n         *           /     \\                 /     \\                 /     \\\n         *          /  g>0  \\               /  g>0  \\               /  g>0  \\\n         *         /         \\             /         \\             /         \\\n         *  ----- X --------- 0 --------- X --------- 0 --------- X --------- 0 ---\n         *       /             \\         /             \\         /             \\\n         *      /               \\ g<0   /               \\  g<0  /               \\ g<0\n         *     /                 \\     /                 \\     /                 \\     /\n         * ___/                   \\___/                   \\___/                   \\___/\n         * </pre>\n         * <pre>\n         *  h(t,y)) as an alteration of g(t,y)\n         *             ___                                 ___         ___\n         *    \\       /   \\                               /   \\       /   \\\n         *     \\     /     \\ h=+g                        /     \\     /     \\\n         *      \\   /       \\      h=min(-s,-g,+g)      /       \\   /       \\\n         *       \\_/         \\                         /         \\_/         \\\n         *  ------ ---------- 0 ----------_---------- 0 --------------------- 0 ---\n         *                     \\         / \\         /                         \\\n         *   h=max(+s,-g,+g)    \\       /   \\       /       h=max(+s,-g,+g)     \\\n         *                       \\     /     \\     / h=-g                        \\     /\n         *                        \\___/       \\___/                               \\___/\n         * </pre>\n         * <p>\n         * As shown by the figure above, several expressions are used to compute h,\n         * depending on the current state:\n         * <ul>\n         *   <li>h = max(+s,-g,+g)</li>\n         *   <li>h = +g</li>\n         *   <li>h = min(-s,-g,+g)</li>\n         *   <li>h = -g</li>\n         * </ul>\n         * where s is a tiny positive value: {@link org.apache.commons.math3.util.Precision#SAFE_MIN}.\n         * </p>\n         */\n        @Override\n        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored increasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered decreasing event\n                            return Transformer.PLUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored increasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored increasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered decreasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered decreasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered decreasing event\n                            return Transformer.MINUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored increasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored increasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored increasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered decreasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered decreasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }\n\n    },\n\n    /** Constant for triggering only increasing events.\n     * <p>When this filter is used, the wrapped {@link EventHandler\n     * event handler} {@link EventHandler#eventOccurred(double, double[],\n     * boolean) eventOccurred} method will be called <em>only</em> with\n     * its {@code increasing} argument set to true.</p>\n     */\n    TRIGGER_ONLY_INCREASING_EVENTS {\n\n        /**  {@inheritDoc} */\n        @Override\n        protected boolean getTriggeredIncreasing() {\n            return true;\n        }\n\n        /** {@inheritDoc}\n         * <p>\n         * states scheduling for computing h(t,y) as an altered version of g(t, y)\n         * <ul>\n         * <li>0 are triggered events for which a zero is produced (here increasing events)</li>\n         * <li>X are ignored events for which zero is masked (here decreasing events)</li>\n         * </ul>\n         * </p>\n         * <pre>\n         *  g(t)\n         *             ___                     ___                     ___\n         *            /   \\                   /   \\                   /   \\\n         *           /     \\                 /     \\                 /     \\\n         *          /  g>0  \\               /  g>0  \\               /  g>0  \\\n         *         /         \\             /         \\             /         \\\n         *  ----- 0 --------- X --------- 0 --------- X --------- 0 --------- X ---\n         *       /             \\         /             \\         /             \\\n         *      /               \\ g<0   /               \\  g<0  /               \\ g<0\n         *     /                 \\     /                 \\     /                 \\     /\n         * ___/                   \\___/                   \\___/                   \\___/\n         * </pre>\n         * <pre>\n         *  h(t,y)) as an alteration of g(t,y)\n         *                                     ___         ___\n         *    \\                               /   \\       /   \\\n         *     \\ h=-g                        /     \\     /     \\ h=-g\n         *      \\      h=min(-s,-g,+g)      /       \\   /       \\      h=min(-s,-g,+g)\n         *       \\                         /         \\_/         \\\n         *  ------0 ----------_---------- 0 --------------------- 0 --------- _ ---\n         *         \\         / \\         /                         \\         / \\\n         *          \\       /   \\       /       h=max(+s,-g,+g)     \\       /   \\\n         *           \\     /     \\     / h=+g                        \\     /     \\     /\n         *            \\___/       \\___/                               \\___/       \\___/\n         * </pre>\n         * <p>\n         * As shown by the figure above, several expressions are used to compute h,\n         * depending on the current state:\n         * <ul>\n         *   <li>h = max(+s,-g,+g)</li>\n         *   <li>h = +g</li>\n         *   <li>h = min(-s,-g,+g)</li>\n         *   <li>h = -g</li>\n         * </ul>\n         * where s is a tiny positive value: {@link org.apache.commons.math3.util.Precision#SAFE_MIN}.\n         * </p>\n         */\n        @Override\n        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }\n\n    };\n\n    /** Get the increasing status of triggered events.\n     * @return true if triggered events are increasing events\n     */\n    protected abstract boolean getTriggeredIncreasing();\n\n    /** Get next function transformer in the specified direction.\n     * @param previous transformer active on the previous point with respect\n     * to integration direction (may be null if no previous point is known)\n     * @param g current value of the g function\n     * @param forward true if integration goes forward\n     * @return next transformer transformer\n     */\n    protected abstract Transformer selectTransformer(Transformer previous,\n                                                     double g, boolean forward);\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "describeConstable", "java.lang.constant", "Constable", "public abstract Optional<? extends ConstantDesc> describeConstable()" ], [ "toString", "java.lang", "Enum", "public String toString()" ], [ "getTriggeredIncreasing", "org.apache.commons.math3.ode.events", "FilterType", "protected abstract boolean getTriggeredIncreasing()" ], [ "selectTransformer", "org.apache.commons.math3.ode.events", "FilterType", "protected abstract Transformer selectTransformer(Transformer previous, double g, boolean forward)" ], [ "compareTo", "java.lang", "Enum", "public final int compareTo(E arg0)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "name", "java.lang", "Enum", "public final String name()" ], [ "ordinal", "java.lang", "Enum", "public final int ordinal()" ], [ "equals", "java.lang", "Enum", "public final boolean equals(Object arg0)" ], [ "describeConstable", "java.lang", "Enum", "public final Optional<Enum.EnumDesc<E>> describeConstable()" ], [ "clone", "java.lang", "Enum", "protected final Object clone() throws CloneNotSupportedException" ], [ "hashCode", "java.lang", "Enum", "public final int hashCode()" ], [ "getDeclaringClass", "java.lang", "Enum", "public final Class<E> getDeclaringClass()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 20528,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.ode",
  "className" : "ParameterizedODE",
  "javadocTag" : "@param name parameter name",
  "methodJavadoc" : "    /** Get parameter value from its name.\n     * @param name parameter name\n     * @return parameter value\n     * @throws UnknownParameterException if parameter is not supported\n     */",
  "methodSourceCode" : "double getParameter(String name) throws UnknownParameterException;",
  "classJavadoc" : "/**\n * Interface to compute by finite difference Jacobian matrix for some parameter\n *  when computing {@link JacobianMatrices partial derivatives equations}.\n *\n * @since 3.0\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.ode;\n\n\n/** Interface to compute by finite difference Jacobian matrix for some parameter\n *  when computing {@link JacobianMatrices partial derivatives equations}.\n *\n * @since 3.0\n */\n\npublic interface ParameterizedODE extends Parameterizable {\n\n    /** Get parameter value from its name.\n     * @param name parameter name\n     * @return parameter value\n     * @exception UnknownParameterException if parameter is not supported\n     */\n    double getParameter(String name) throws UnknownParameterException;\n\n    /** Set the value for a given parameter.\n     * @param name parameter name\n     * @param value parameter value\n     * @exception UnknownParameterException if parameter is not supported\n     */\n    void setParameter(String name, double value) throws UnknownParameterException;\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "name", "java.lang", "String" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getParameter", "org.apache.commons.math3.ode", "ParameterizedODE", "double getParameter(String name) throws UnknownParameterException" ], [ "getParametersNames", "org.apache.commons.math3.ode", "Parameterizable", "public abstract Collection<String> getParametersNames()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "isSupported", "org.apache.commons.math3.ode", "Parameterizable", "public abstract boolean isSupported(String arg0)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "isBlank", "java.lang", "String", "public boolean isBlank()" ], [ "coder", "java.lang", "String", "byte coder()" ], [ "stripLeading", "java.lang", "String", "public String stripLeading()" ], [ "toCharArray", "java.lang", "String", "public char[] toCharArray()" ], [ "equals", "java.lang", "String", "public boolean equals(Object arg0)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(CharSequence arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0)" ], [ "endsWith", "java.lang", "String", "public boolean endsWith(String arg0)" ], [ "concat", "java.lang", "String", "public String concat(String arg0)" ], [ "replaceAll", "java.lang", "String", "public String replaceAll(String arg0, String arg1)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0, int arg1)" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)" ], [ "repeat", "java.lang", "String", "public String repeat(int arg0)" ], [ "split", "java.lang", "String", "public String[] split(String arg0)" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase(Locale arg0)" ], [ "isLatin1", "java.lang", "String", "boolean isLatin1()" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes()" ], [ "codePointAt", "java.lang", "String", "public int codePointAt(int arg0)" ], [ "stripTrailing", "java.lang", "String", "public String stripTrailing()" ], [ "strip", "java.lang", "String", "public String strip()" ], [ "translateEscapes", "java.lang", "String", "public String translateEscapes()" ], [ "matches", "java.lang", "String", "public boolean matches(String arg0)" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)" ], [ "isEmpty", "java.lang", "String", "public boolean isEmpty()" ], [ "substring", "java.lang", "String", "public String substring(int arg0)" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0)" ], [ "replace", "java.lang", "String", "public String replace(CharSequence arg0, CharSequence arg1)" ], [ "value", "java.lang", "String", "byte[] value()" ], [ "equalsIgnoreCase", "java.lang", "String", "public boolean equalsIgnoreCase(String arg0)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(String arg0) throws UnsupportedEncodingException" ], [ "resolveConstantDesc", "java.lang", "String", "public String resolveConstantDesc(MethodHandles.Lookup arg0)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(StringBuffer arg0)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase(Locale arg0)" ], [ "trim", "java.lang", "String", "public String trim()" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0, int arg1)" ], [ "replace", "java.lang", "String", "public String replace(char arg0, char arg1)" ], [ "substring", "java.lang", "String", "public String substring(int arg0, int arg1)" ], [ "transform", "java.lang", "String", "public <R> R transform(Function<? super String, ? extends R> arg0)" ], [ "describeConstable", "java.lang", "String", "public Optional<String> describeConstable()" ], [ "hashCode", "java.lang", "String", "public int hashCode()" ], [ "compareTo", "java.lang", "String", "public int compareTo(String arg0)" ], [ "codePointBefore", "java.lang", "String", "public int codePointBefore(int arg0)" ], [ "toString", "java.lang", "String", "public String toString()" ], [ "length", "java.lang", "String", "public int length()" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0)" ], [ "offsetByCodePoints", "java.lang", "String", "public int offsetByCodePoints(int arg0, int arg1)" ], [ "split", "java.lang", "String", "public String[] split(String arg0, int arg1)" ], [ "indent", "java.lang", "String", "public String indent(int arg0)" ], [ "stripIndent", "java.lang", "String", "public String stripIndent()" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase()" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase()" ], [ "formatted", "java.lang", "String", "public String formatted(Object[] arg0)" ], [ "compareToIgnoreCase", "java.lang", "String", "public int compareToIgnoreCase(String arg0)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(Charset arg0)" ], [ "chars", "java.lang", "String", "public IntStream chars()" ], [ "lines", "java.lang", "String", "public Stream<String> lines()" ], [ "codePointCount", "java.lang", "String", "public int codePointCount(int arg0, int arg1)" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0, int arg1)" ], [ "codePoints", "java.lang", "String", "public IntStream codePoints()" ], [ "intern", "java.lang", "String", "public native String intern()" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0, int arg1)" ], [ "charAt", "java.lang", "String", "public char charAt(int arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0)" ], [ "replaceFirst", "java.lang", "String", "public String replaceFirst(String arg0, String arg1)" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0, int arg1)" ], [ "subSequence", "java.lang", "String", "public CharSequence subSequence(int arg0, int arg1)" ], [ "contains", "java.lang", "String", "public boolean contains(CharSequence arg0)" ], [ "compareTo", "java.lang", "Comparable", "public abstract int compareTo(T arg0)" ], [ "toString", "java.lang", "CharSequence", "public abstract String toString()" ], [ "chars", "java.lang", "CharSequence", "public default IntStream chars()" ], [ "charAt", "java.lang", "CharSequence", "public abstract char charAt(int arg0)" ], [ "subSequence", "java.lang", "CharSequence", "public abstract CharSequence subSequence(int arg0, int arg1)" ], [ "length", "java.lang", "CharSequence", "public abstract int length()" ], [ "codePoints", "java.lang", "CharSequence", "public default IntStream codePoints()" ], [ "isEmpty", "java.lang", "CharSequence", "public default boolean isEmpty()" ], [ "describeConstable", "java.lang.constant", "Constable", "public abstract Optional<? extends ConstantDesc> describeConstable()" ], [ "resolveConstantDesc", "java.lang.constant", "ConstantDesc", "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
} ]