[
    {
        "id": 2684,
        "oracle": ";",
        "oracleType": "NORMAL_POST",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.ui.swingViewer.util",
        "className": "DefaultCamera",
        "javadocTag": "@return The same instance as pos, or a new one if pos was null.",
        "methodJavadoc": "    /**\n     * Compute the position of a sprite if attached to an edge.\n     *\n     * @param sprite\n     *            The sprite.\n     * @param pos\n     *            Where to stored the computed position, if null, the position\n     *            is created.\n     * @param units\n     *            The units the computed position must be given into.\n     * @return The same instance as pos, or a new one if pos was null.\n     */",
        "methodSourceCode": "protected Point2D.Double getSpritePositionEdge(GraphicSprite sprite, Point2D.Double pos, Units units){\n    if (pos == null)\n        pos = new Point2D.Double();\n    GraphicEdge edge = sprite.getEdgeAttachment();\n    if (edge.isCurve()) {\n        double[] ctrl = edge.getControlPoints();\n        Point2 p0 = new Point2(edge.from.getX(), edge.from.getY());\n        Point2 p1 = new Point2(ctrl[0], ctrl[1]);\n        Point2 p2 = new Point2(ctrl[1], ctrl[2]);\n        Point2 p3 = new Point2(edge.to.getX(), edge.to.getY());\n        Vector2 perp = CubicCurve.perpendicular(p0, p1, p2, p3, sprite.getX());\n        double y = metrics.lengthToGu(sprite.getY(), sprite.getUnits());\n        perp.normalize();\n        perp.scalarMult(y);\n        pos.x = CubicCurve.eval(p0.x, p1.x, p2.x, p3.x, sprite.getX()) - perp.data[0];\n        pos.y = CubicCurve.eval(p0.y, p1.y, p2.y, p3.y, sprite.getX()) - perp.data[1];\n    } else {\n        double x = ((GraphicNode) edge.getSourceNode()).x;\n        double y = ((GraphicNode) edge.getSourceNode()).y;\n        double dx = ((GraphicNode) edge.getTargetNode()).x - x;\n        double dy = ((GraphicNode) edge.getTargetNode()).y - y;\n        // Percent on the edge.\n        double d = sprite.getX();\n        double o = metrics.lengthToGu(sprite.getY(), sprite.getUnits());\n        // Offset from the position given by percent, perpendicular to the\n        // edge.\n        d = d > 1 ? 1 : d;\n        d = d < 0 ? 0 : d;\n        x += dx * d;\n        y += dy * d;\n        d = (double) Math.sqrt(dx * dx + dy * dy);\n        dx /= d;\n        dy /= d;\n        x += -dy * o;\n        y += dx * o;\n        pos.x = x;\n        pos.y = y;\n        if (units == Units.PX) {\n            Tx.transform(pos, pos);\n        }\n    }\n    return pos;\n}",
        "classJavadoc": "/**\n * Define how the graph is viewed.\n *\n * <p>\n * The camera is in charge of projecting the graph spaces in graph units (GU)\n * into user spaces (often in pixels). It defines the transformation (an affine\n * matrix) to passe from the first to the second. It also contains the graph\n * metrics, a set of values that give the overall dimensions of the graph in\n * graph units, as well as the view port, the area on the screen (or any\n * rendering surface) that will receive the results in pixels (or rendering\n * units).\n * </p>\n *\n * <p>\n * The camera defines a centre at which it always points. It can zoom on the\n * graph, pan in any direction and rotate along two axes.\n * </p>\n *\n * <p>\n * Knowing the transformation also allows to provide services like \"what element\n * is not invisible ?\" (not in the camera view) or \"on what element is the mouse\n * cursor actually ?\".\n * </p>\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.swingViewer.util;\n\nimport org.graphstream.graph.Node;\nimport org.graphstream.ui.geom.Point2;\nimport org.graphstream.ui.geom.Point3;\nimport org.graphstream.ui.geom.Vector2;\nimport org.graphstream.ui.graphicGraph.GraphicEdge;\nimport org.graphstream.ui.graphicGraph.GraphicElement;\nimport org.graphstream.ui.graphicGraph.GraphicGraph;\nimport org.graphstream.ui.graphicGraph.GraphicNode;\nimport org.graphstream.ui.graphicGraph.GraphicSprite;\nimport org.graphstream.ui.graphicGraph.stylesheet.Style;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleConstants;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleConstants.Units;\nimport org.graphstream.ui.graphicGraph.stylesheet.Values;\nimport org.graphstream.ui.view.Camera;\nimport org.graphstream.ui.view.util.CubicCurve;\n\nimport java.awt.Graphics2D;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.NoninvertibleTransformException;\nimport java.awt.geom.Point2D;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n * Define how the graph is viewed.\n *\n * <p>\n * The camera is in charge of projecting the graph spaces in graph units (GU)\n * into user spaces (often in pixels). It defines the transformation (an affine\n * matrix) to passe from the first to the second. It also contains the graph\n * metrics, a set of values that give the overall dimensions of the graph in\n * graph units, as well as the view port, the area on the screen (or any\n * rendering surface) that will receive the results in pixels (or rendering\n * units).\n * </p>\n *\n * <p>\n * The camera defines a centre at which it always points. It can zoom on the\n * graph, pan in any direction and rotate along two axes.\n * </p>\n *\n * <p>\n * Knowing the transformation also allows to provide services like \"what element\n * is not invisible ?\" (not in the camera view) or \"on what element is the mouse\n * cursor actually ?\".\n * </p>\n */\npublic class DefaultCamera implements Camera\n{\n    /**\n     * class level logger\n     */\n    private static final Logger logger = Logger.getLogger(DefaultCamera.class.getSimpleName());\n\n    // Attribute\n\n    /**\n     * The graph.\n     */\n    protected GraphicGraph graph = null;\n\n    /**\n     * Information on the graph overall dimension and position.\n     */\n    protected GraphMetrics metrics = new GraphMetrics();\n\n    /**\n     * Automatic centring of the view.\n     */\n    protected boolean autoFit = true;\n\n    /**\n     * The camera centre of view.\n     */\n    protected Point3 center = new Point3();\n\n    /**\n     * The camera zoom.\n     */\n    protected double zoom;\n\n    /**\n     * The graph-space -> pixel-space transformation.\n     */\n    protected AffineTransform Tx = new AffineTransform();\n\n    /**\n     * The inverse transform of Tx.\n     */\n    protected AffineTransform xT;\n\n    /**\n     * The previous affine transform.\n     */\n    protected AffineTransform oldTx;\n\n    /**\n     * The rotation angle.\n     */\n    protected double rotation;\n\n    /**\n     * Padding around the graph.\n     */\n    protected Values padding = new Values(Style.Units.GU, 0, 0, 0);\n\n    /**\n     * Which node is visible. This allows to mark invisible nodes to fasten\n     * visibility tests for nodes, attached sprites and edges.\n     */\n    protected HashSet<String> nodeInvisible = new HashSet<String>();\n\n    /**\n     * The graph view port, if any. The graph view port is a view inside the\n     * graph space. It allows to compute the view according to a specified area\n     * of the graph space instead of the graph dimensions.\n     */\n    protected double gviewport[] = null;\n    protected double gviewportDiagonal = 0;\n\n    // Construction\n\n    /**\n     * New camera.\n     */\n    public DefaultCamera(GraphicGraph graph) {\n        this.graph = graph;\n    }\n\n    // Access\n\n    /*\n     * (non-Javadoc)\n     *\n     * @see org.graphstream.ui.swingViewer.util.Camera#getViewCenter()\n     */\n    public Point3 getViewCenter() {\n        return center;\n    }\n\n    /*\n     * (non-Javadoc)\n     *\n     * @see org.graphstream.ui.swingViewer.util.Camera#setViewCenter(double,\n     * double, double)\n     */\n    public void setViewCenter(double x, double y, double z) {\n        setAutoFitView(false);\n        center.set(x, y, z);\n        graph.graphChanged = true;\n    }\n\n    public void setViewCenter(double x, double y) {\n        setViewCenter(x, y, 0);\n    }\n\n    /*\n     * (non-Javadoc)\n     *\n     * @see org.graphstream.ui.swingViewer.util.Camera#getViewPercent()\n     */\n    public double getViewPercent() {\n        return zoom;\n    }\n\n    /*\n     * (non-Javadoc)\n     *\n     * @see org.graphstream.ui.swingViewer.util.Camera#setViewPercent(double)\n     */\n    public void setViewPercent(double percent) {\n        setAutoFitView(false);\n        setZoom(percent);\n        graph.graphChanged = true;\n    }\n\n    /*\n     * (non-Javadoc)\n     *\n     * @see org.graphstream.ui.swingViewer.util.Camera#getViewRotation()\n     */\n    public double getViewRotation() {\n        return rotation;\n    }\n\n    /*\n     * (non-Javadoc)\n     *\n     * @see org.graphstream.ui.swingViewer.util.Camera#getMetrics()\n     */\n    public GraphMetrics getMetrics() {\n        return metrics;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder builder = new StringBuilder(String.format(\"Camera :%n\"));\n\n        builder.append(String.format(\"    autoFit  = %b%n\", autoFit));\n        builder.append(String.format(\"    center   = %s%n\", center));\n        builder.append(String.format(\"    rotation = %f%n\", rotation));\n        builder.append(String.format(\"    zoom     = %f%n\", zoom));\n        builder.append(String.format(\"    padding  = %s%n\", padding));\n        builder.append(String.format(\"    metrics  = %s%n\", metrics));\n\n        return builder.toString();\n    }\n\n    /*\n     * (non-Javadoc)\n     *\n     * @see org.graphstream.ui.swingViewer.util.Camera#resetView()\n     */\n    public void resetView() {\n        setAutoFitView(true);\n        setViewRotation(0);\n    }\n\n    /*\n     * (non-Javadoc)\n     *\n     * @see org.graphstream.ui.swingViewer.util.Camera#setBounds(double, double,\n     * double, double, double, double)\n     */\n    public void setBounds(double minx, double miny, double minz, double maxx,\n                          double maxy, double maxz) {\n        metrics.setBounds(minx, miny, minz, maxx, maxy, maxz);\n    }\n\n    /*\n     * (non-Javadoc)\n     *\n     * @see org.graphstream.ui.swingViewer.util.Camera#getGraphDimension()\n     */\n    public double getGraphDimension() {\n        if (gviewport != null)\n            return gviewportDiagonal;\n\n        return metrics.diagonal;\n    }\n\n    /**\n     * True if the element should be visible on screen. The method used is to\n     * transform the center of the element (which is always in graph units)\n     * using the camera actual transformation to put it in pixel units. Then to\n     * look in the style sheet the size of the element and to test if its\n     * enclosing rectangle intersects the view port. For edges, its two nodes\n     * are used. As a speed-up by default if the camera is in automatic fitting\n     * mode, all element should be visible, and the test always returns true.\n     *\n     * @param element\n     *            The element to test.\n     * @return True if the element is visible and therefore must be rendered.\n     */\n    public boolean isVisible(GraphicElement element) {\n        if (autoFit) {\n            return ((!element.hidden) && (element.style.getVisibilityMode() != StyleConstants.VisibilityMode.HIDDEN));\n        } else {\n            switch (element.getSelectorType()) {\n                case NODE:\n                    return !nodeInvisible.contains(element.getId());\n                case EDGE:\n                    return isEdgeVisible((GraphicEdge) element);\n                case SPRITE:\n                    return isSpriteVisible((GraphicSprite) element);\n                default:\n                    return false;\n            }\n        }\n    }\n\n    /*\n     * (non-Javadoc)\n     *\n     * @see org.graphstream.ui.swingViewer.util.Camera#inverseTransform(double,\n     * double)\n     */\n    public Point3 transformPxToGu(double x, double y) {\n        Point2D.Double p = new Point2D.Double(x, y);\n        xT.transform(p, p);\n        return new Point3(p.x, p.y, 0);\n    }\n\n    /*\n     * (non-Javadoc)\n     *\n     * @see org.graphstream.ui.swingViewer.util.Camera#transform(double, double)\n     */\n    public Point3 transformGuToPx(double x, double y, double z) {\n        Point2D.Double p = new Point2D.Double(x, y);\n        Tx.transform(p, p);\n        return new Point3(p.x, p.y, 0);\n    }\n\n    /**\n     * Process each node to check if it is in the actual view port, and mark\n     * invisible nodes. This method allows for fast node, sprite and edge\n     * visibility checking when drawing. This must be called before each\n     * rendering (if the view port changed).\n     */\n    public void checkVisibility(GraphicGraph graph) {\n        double X = metrics.viewport[0];\n        double Y = metrics.viewport[1];\n        double W = metrics.viewport[2];\n        double H = metrics.viewport[3];\n\n        nodeInvisible.clear();\n\n        for (Node node : graph) {\n            boolean visible = isNodeIn((GraphicNode) node, X, Y, X + W, Y + H)\n                && (!((GraphicNode) node).hidden)\n                && ((GraphicNode) node).positionned;\n\n            if (!visible)\n                nodeInvisible.add(node.getId());\n        }\n    }\n\n    /**\n     * Search for the first node or sprite (in that order) that contains the\n     * point at coordinates (x, y).\n     *\n     * @param graph\n     *            The graph to search for.\n     * @param x\n     *            The point abscissa.\n     * @param y\n     *            The point ordinate.\n     * @return The first node or sprite at the given coordinates or null if\n     *         nothing found.\n     */\n    public GraphicElement findNodeOrSpriteAt(GraphicGraph graph, double x,\n                                             double y) {\n        for (Node n : graph) {\n            GraphicNode node = (GraphicNode) n;\n\n            if (nodeContains(node, x, y))\n                return node;\n        }\n\n        for (GraphicSprite sprite : graph.spriteSet()) {\n            if (spriteContains(sprite, x, y))\n                return sprite;\n        }\n\n        return null;\n    }\n\n    /**\n     * Search for all the nodes and sprites contained inside the rectangle\n     * (x1,y1)-(x2,y2).\n     *\n     * @param graph\n     *            The graph to search for.\n     * @param x1\n     *            The rectangle lowest point abscissa.\n     * @param y1\n     *            The rectangle lowest point ordinate.\n     * @param x2\n     *            The rectangle highest point abscissa.\n     * @param y2\n     *            The rectangle highest point ordinate.\n     * @return The set of sprites and nodes in the given rectangle.\n     */\n    public Collection<GraphicElement> allNodesOrSpritesIn(GraphicGraph graph,\n                                                          double x1, double y1, double x2, double y2) {\n        List<GraphicElement> elts = new ArrayList<GraphicElement>();\n\n        for (Node node : graph) {\n            if (isNodeIn((GraphicNode) node, x1, y1, x2, y2))\n                elts.add((GraphicNode) node);\n        }\n\n        for (GraphicSprite sprite : graph.spriteSet()) {\n            if (isSpriteIn(sprite, x1, y1, x2, y2))\n                elts.add(sprite);\n        }\n\n        return Collections.unmodifiableList(elts);\n    }\n\n    /**\n     * Compute the real position of a sprite according to its eventual\n     * attachment in graph units.\n     *\n     * @param sprite\n     *            The sprite.\n     * @param pos\n     *            Receiver for the sprite 2D position, can be null.\n     * @param units\n     *            The units in which the position must be computed (the sprite\n     *            already contains units).\n     * @return The same instance as the one given by parameter pos or a new one\n     *         if pos was null, containing the computed position in the given\n     *         units.\n     */\n    public Point2D.Double getSpritePosition(GraphicSprite sprite,\n                                            Point2D.Double pos, Units units) {\n        if (sprite.isAttachedToNode())\n            return getSpritePositionNode(sprite, pos, units);\n        else if (sprite.isAttachedToEdge())\n            return getSpritePositionEdge(sprite, pos, units);\n        else\n            return getSpritePositionFree(sprite, pos, units);\n    }\n\n    public double[] getGraphViewport() {\n        return gviewport;\n    }\n\n    // Command\n\n    public void setGraphViewport(double minx, double miny, double maxx,\n                                 double maxy) {\n        setAutoFitView(false);\n        setViewCenter(minx + (maxx - minx) / 2.0, miny + (maxy - miny) / 2.0);\n\n        gviewport = new double[4];\n        gviewport[0] = minx;\n        gviewport[1] = miny;\n        gviewport[2] = maxx;\n        gviewport[3] = maxy;\n\n        gviewportDiagonal = Math.sqrt((maxx - minx) * (maxx - minx)\n            + (maxy - miny) * (maxy - miny));\n\n        setZoom(1);\n    }\n\n    public void removeGraphViewport() {\n        logger.fine(\"Graph viewport removed for [\" + this + \"].\");\n        gviewport = null;\n        resetView();\n    }\n\n    /**\n     * Set the camera view in the given graphics and backup the previous\n     * transform of the graphics. Call {@link #popView(Graphics2D)} to restore\n     * the saved transform. You can only push one time the view.\n     *\n     * @param g2\n     *            The Swing graphics to change.\n     */\n    public void pushView(GraphicGraph graph, Graphics2D g2) {\n        if (oldTx == null) {\n            oldTx = g2.getTransform(); // Backup the Swing transform.\n\n            if (autoFit)\n                autoFitView(g2);\n            else\n                userView(g2);\n\n            // g2.setTransform(Tx); // Set the final transform, a composition of\n            // the old Swing transform and our new coordinate system.\n        } else {\n            throw new RuntimeException(\n                \"DefaultCamera.pushView() / popView() wrongly nested\");\n        }\n\n        checkVisibility(graph);\n    }\n\n    /**\n     * Restore the transform that was used before\n     * {@link #pushView(GraphicGraph, Graphics2D)} is used.\n     *\n     * @param g2\n     *            The Swing graphics to restore.\n     */\n    public void popView(Graphics2D g2) {\n        if (oldTx != null) {\n            g2.setTransform(oldTx); // Set back the old Swing Transform.\n            oldTx = null;\n        }\n    }\n\n    /**\n     * Compute a transformation matrix that pass from graph units (user space)\n     * to pixel units (device space) so that the whole graph is visible.\n     *\n     * @param g2\n     *            The Swing graphics.\n     */\n    protected void autoFitView(Graphics2D g2) {\n        double sx, sy;\n        double tx, ty;\n        double padXgu = getPaddingXgu() * 2;\n        double padYgu = getPaddingYgu() * 2;\n        double padXpx = getPaddingXpx() * 2;\n        double padYpx = getPaddingYpx() * 2;\n\n        sx = (metrics.viewport[2] - padXpx) / (metrics.size.data[0] + padXgu); // Ratio\n        // along\n        // X\n        sy = (metrics.viewport[3] - padYpx) / (metrics.size.data[1] + padYgu); // Ratio\n        // along\n        // Y\n        tx = metrics.lo.x + (metrics.size.data[0] / 2); // Centre of graph in X\n        ty = metrics.lo.y + (metrics.size.data[1] / 2); // Centre of graph in Y\n        \n        if (sx > sy) // The least ratio.\n            sx = sy;\n        else\n            sy = sx;\n\n        g2.translate(metrics.viewport[2] / 2, metrics.viewport[3] / 2);\n        if (rotation != 0)\n            g2.rotate(rotation / (180 / Math.PI));\n        g2.scale(sx, -sy);\n        g2.translate(-tx, -ty);\n\n        Tx = g2.getTransform();\n        xT = new AffineTransform(Tx);\n        try {\n            xT.invert();\n        } catch (NoninvertibleTransformException e) {\n            logger.warning(\"Cannot inverse gu2px matrix.\");\n        }\n\n        zoom = 1;\n\n        center.set(tx, ty, 0);\n        metrics.setRatioPx2Gu(sx);\n        metrics.loVisible.copy(metrics.lo);\n        metrics.hiVisible.copy(metrics.hi);\n    }\n\n    /**\n     * Compute a transformation that pass from graph units (user space) to a\n     * pixel units (device space) so that the view (zoom and centre) requested\n     * by the user is produced.\n     *\n     * @param g2\n     *            The Swing graphics.\n     */\n    protected void userView(Graphics2D g2) {\n        double sx, sy;\n        double tx, ty;\n        double padXgu = getPaddingXgu() * 2;\n        double padYgu = getPaddingYgu() * 2;\n        double padXpx = getPaddingXpx() * 2;\n        double padYpx = getPaddingYpx() * 2;\n        double gw = gviewport != null ? gviewport[2] - gviewport[0]\n            : metrics.size.data[0];\n        double gh = gviewport != null ? gviewport[3] - gviewport[1]\n            : metrics.size.data[1];\n\n        sx = (metrics.viewport[2] - padXpx) / ((gw + padXgu) * zoom);\n        sy = (metrics.viewport[3] - padYpx) / ((gh + padYgu) * zoom);\n        tx = center.x;\n        ty = center.y;\n\n        if (sx > sy) // The least ratio.\n            sx = sy;\n        else\n            sy = sx;\n\n        g2.translate((metrics.viewport[2] / 2), (metrics.viewport[3] / 2));\n        if (rotation != 0)\n            g2.rotate(rotation / (180 / Math.PI));\n        g2.scale(sx, -sy);\n        g2.translate(-tx, -ty);\n\n        Tx = g2.getTransform();\n        xT = new AffineTransform(Tx);\n        try {\n            xT.invert();\n        } catch (NoninvertibleTransformException e) {\n            logger.log(Level.WARNING, \"Cannot inverse gu2px matrix.\", e);\n        }\n\n        metrics.setRatioPx2Gu(sx);\n\n        double w2 = (metrics.viewport[2] / sx) / 2;\n        double h2 = (metrics.viewport[3] / sx) / 2;\n\n        metrics.loVisible.set(center.x - w2, center.y - h2);\n        metrics.hiVisible.set(center.x + w2, center.y + h2);\n    }\n\n    /**\n     * Enable or disable automatic adjustment of the view to see the entire\n     * graph.\n     *\n     * @param on\n     *            If true, automatic adjustment is enabled.\n     */\n    public void setAutoFitView(boolean on) {\n        if (autoFit && (!on)) {\n            // We go from autoFit to user view, ensure the current centre is at\n            // the\n            // middle of the graph, and the zoom is at one.\n\n            zoom = 1;\n            center.set(metrics.lo.x + (metrics.size.data[0] / 2), metrics.lo.y\n                + (metrics.size.data[1] / 2), 0);\n        }\n\n        autoFit = on;\n    }\n\n    /**\n     * Set the zoom (or percent of the graph visible), 1 means the graph is\n     * fully visible.\n     *\n     * @param z\n     *            The zoom.\n     */\n    public void setZoom(double z) {\n        zoom = z;\n        graph.graphChanged = true;\n    }\n\n    /**\n     * Set the rotation angle around the centre.\n     *\n     * @param theta\n     *            The rotation angle in degrees.\n     */\n    public void setViewRotation(double theta) {\n        rotation = theta;\n        graph.graphChanged = true;\n    }\n\n    /**\n     * Set the output view port size in pixels.\n     *\n     * @param viewportWidth\n     *            The width in pixels of the view port.\n     * @param viewportHeight\n     *            The width in pixels of the view port.\n     */\n    public void setViewport(double viewportX, double viewportY,\n                            double viewportWidth, double viewportHeight) {\n        metrics.setViewport(viewportX, viewportY, viewportWidth, viewportHeight);\n    }\n\n    /**\n     * Set the graph padding.\n     *\n     * @param graph\n     *            The graphic graph.\n     */\n    public void setPadding(GraphicGraph graph) {\n        padding.copy(graph.getStyle().getPadding());\n    }\n\n    // Utility\n\n    protected double getPaddingXgu() {\n        if (padding.units == Style.Units.GU && padding.size() > 0)\n            return padding.get(0);\n\n        return 0;\n    }\n\n    protected double getPaddingYgu() {\n        if (padding.units == Style.Units.GU && padding.size() > 1)\n            return padding.get(1);\n\n        return getPaddingXgu();\n    }\n\n    protected double getPaddingXpx() {\n        if (padding.units == Style.Units.PX && padding.size() > 0)\n            return padding.get(0);\n\n        return 0;\n    }\n\n    protected double getPaddingYpx() {\n        if (padding.units == Style.Units.PX && padding.size() > 1)\n            return padding.get(1);\n\n        return getPaddingXpx();\n    }\n\n    /**\n     * Check if a sprite is visible in the current view port.\n     *\n     * @param sprite\n     *            The sprite to check.\n     * @return True if visible.\n     */\n    protected boolean isSpriteVisible(GraphicSprite sprite) {\n        return isSpriteIn(sprite, metrics.viewport[0], metrics.viewport[1],\n            metrics.viewport[0] + metrics.viewport[2], metrics.viewport[1]\n                + metrics.viewport[3]);\n    }\n\n    /**\n     * Check if an edge is visible in the current view port.\n     *\n     * @param edge\n     *            The edge to check.\n     * @return True if visible.\n     */\n    protected boolean isEdgeVisible(GraphicEdge edge) {\n        GraphicNode node0 = edge.getNode0();\n        GraphicNode node1 = edge.getNode1();\n\n        if (edge.hidden)\n            return false;\n\n        if ((!node1.positionned) || (!node0.positionned))\n            return false;\n\n        boolean node0Invis = nodeInvisible.contains(node0.getId());\n        boolean node1Invis = nodeInvisible.contains(node1.getId());\n\n        return !(node0Invis && node1Invis);\n    }\n\n    /**\n     * Is the given node visible in the given area.\n     *\n     * @param node\n     *            The node to check.\n     * @param X1\n     *            The min abscissa of the area.\n     * @param Y1\n     *            The min ordinate of the area.\n     * @param X2\n     *            The max abscissa of the area.\n     * @param Y2\n     *            The max ordinate of the area.\n     * @return True if the node lies in the given area.\n     */\n    protected boolean isNodeIn(GraphicNode node, double X1, double Y1,\n                               double X2, double Y2) {\n        Values size = node.getStyle().getSize();\n        double w2 = metrics.lengthToPx(size, 0) / 2;\n        double h2 = size.size() > 1 ? metrics.lengthToPx(size, 1) / 2 : w2;\n        Point2D.Double src = new Point2D.Double(node.getX(), node.getY());\n        boolean vis = true;\n\n        Tx.transform(src, src);\n\n        double x1 = src.x - w2;\n        double x2 = src.x + w2;\n        double y1 = src.y - h2;\n        double y2 = src.y + h2;\n\n        if (x2 < X1)\n            vis = false;\n        else if (y2 < Y1)\n            vis = false;\n        else if (x1 > X2)\n            vis = false;\n        else if (y1 > Y2)\n            vis = false;\n\n        return vis;\n    }\n\n    /**\n     * Is the given sprite visible in the given area.\n     *\n     * @param sprite\n     *            The sprite to check.\n     * @param X1\n     *            The min abscissa of the area.\n     * @param Y1\n     *            The min ordinate of the area.\n     * @param X2\n     *            The max abscissa of the area.\n     * @param Y2\n     *            The max ordinate of the area.\n     * @return True if the node lies in the given area.\n     */\n    protected boolean isSpriteIn(GraphicSprite sprite, double X1, double Y1,\n                                 double X2, double Y2) {\n        if (sprite.isAttachedToNode()\n            && nodeInvisible.contains(sprite.getNodeAttachment().getId())) {\n            return false;\n        } else if (sprite.isAttachedToEdge()\n            && !isEdgeVisible(sprite.getEdgeAttachment())) {\n            return false;\n        } else {\n            Values size = sprite.getStyle().getSize();\n            double w2 = metrics.lengthToPx(size, 0) / 2;\n            double h2 = size.size() > 1 ? metrics.lengthToPx(size, 1) / 2 : w2;\n            Point2D.Double src = spritePositionPx(sprite);// new Point2D.Double(\n            // sprite.getX(),\n            // sprite.getY() );\n\n            // Tx.transform( src, src );\n\n            double x1 = src.x - w2;\n            double x2 = src.x + w2;\n            double y1 = src.y - h2;\n            double y2 = src.y + h2;\n\n            if (x2 < X1)\n                return false;\n            if (y2 < Y1)\n                return false;\n            if (x1 > X2)\n                return false;\n            if (y1 > Y2)\n                return false;\n\n            return true;\n        }\n    }\n\n    protected Point2D.Double spritePositionPx(GraphicSprite sprite) {\n        Point2D.Double pos = new Point2D.Double();\n\n        return getSpritePosition(sprite, pos, Units.PX);\n        // if( sprite.getUnits() == Units.PX )\n        // {\n        // return new Point2D.Double( sprite.getX(), sprite.getY() );\n        // }\n        // else if( sprite.getUnits() == Units.GU )\n        // {\n        // Point2D.Double pos = new Point2D.Double( sprite.getX(), sprite.getY()\n        // );\n        // return (Point2D.Double) Tx.transform( pos, pos );\n        // }\n        // else// if( sprite.getUnits() == Units.PERCENTS )\n        // {\n        // return new Point2D.Double(\n        // (sprite.getX()/100f)*metrics.viewport.data[0],\n        // (sprite.getY()/100f)*metrics.viewport.data[1] );\n        // }\n    }\n\n    /**\n     * Check if a node contains the given point (x,y).\n     *\n     * @param elt\n     *            The node.\n     * @param x\n     *            The point abscissa.\n     * @param y\n     *            The point ordinate.\n     * @return True if (x,y) is in the given element.\n     */\n    protected boolean nodeContains(GraphicElement elt, double x, double y) {\n        Values size = elt.getStyle().getSize();\n        double w2 = metrics.lengthToPx(size, 0) / 2;\n        double h2 = size.size() > 1 ? metrics.lengthToPx(size, 1) / 2 : w2;\n        Point2D.Double src = new Point2D.Double(elt.getX(), elt.getY());\n        Point2D.Double dst = new Point2D.Double();\n\n        Tx.transform(src, dst);\n\n        dst.x -= metrics.viewport[0];\n        dst.y -= metrics.viewport[1];\n\n        double x1 = dst.x - w2;\n        double x2 = dst.x + w2;\n        double y1 = dst.y - h2;\n        double y2 = dst.y + h2;\n\n        if (x < x1)\n            return false;\n        if (y < y1)\n            return false;\n        if (x > x2)\n            return false;\n        if (y > y2)\n            return false;\n\n        return true;\n    }\n\n    protected boolean edgeContains(GraphicElement elt, double x, double y) {\n        return false;\n    }\n\n    /**\n     * Check if a sprite contains the given point (x,y).\n     *\n     * @param elt\n     *            The sprite.\n     * @param x\n     *            The point abscissa.\n     * @param y\n     *            The point ordinate.\n     * @return True if (x,y) is in the given element.\n     */\n    protected boolean spriteContains(GraphicElement elt, double x, double y) {\n        Values size = elt.getStyle().getSize();\n        double w2 = metrics.lengthToPx(size, 0) / 2;\n        double h2 = size.size() > 1 ? metrics.lengthToPx(size, 1) / 2 : w2;\n        Point2D.Double dst = spritePositionPx((GraphicSprite) elt); // new\n        // Point2D.Double(\n        // elt.getX(),\n        // elt.getY()\n        // );\n        // Point2D.Double dst = new Point2D.Double();\n\n        // Tx.transform( src, dst );\n        dst.x -= metrics.viewport[0];\n        dst.y -= metrics.viewport[1];\n\n        double x1 = dst.x - w2;\n        double x2 = dst.x + w2;\n        double y1 = dst.y - h2;\n        double y2 = dst.y + h2;\n\n        if (x < x1)\n            return false;\n        if (y < y1)\n            return false;\n        if (x > x2)\n            return false;\n        if (y > y2)\n            return false;\n\n        return true;\n    }\n\n    /**\n     * Compute the position of a sprite if it is not attached.\n     *\n     * @param sprite\n     *            The sprite.\n     * @param pos\n     *            Where to stored the computed position, if null, the position\n     *            is created.\n     * @param units\n     *            The units the computed position must be given into.\n     * @return The same instance as pos, or a new one if pos was null.\n     */\n    protected Point2D.Double getSpritePositionFree(GraphicSprite sprite,\n                                                   Point2D.Double pos, Units units) {\n        if (pos == null)\n            pos = new Point2D.Double();\n\n        if (sprite.getUnits() == units) {\n            pos.x = sprite.getX();\n            pos.y = sprite.getY();\n        } else if (units == Units.GU && sprite.getUnits() == Units.PX) {\n            pos.x = sprite.getX();\n            pos.y = sprite.getY();\n\n            xT.transform(pos, pos);\n        } else if (units == Units.PX && sprite.getUnits() == Units.GU) {\n            pos.x = sprite.getX();\n            pos.y = sprite.getY();\n\n            Tx.transform(pos, pos);\n        } else if (units == Units.GU && sprite.getUnits() == Units.PERCENTS) {\n            pos.x = metrics.lo.x + (sprite.getX() / 100f)\n                * metrics.graphWidthGU();\n            pos.y = metrics.lo.y + (sprite.getY() / 100f)\n                * metrics.graphHeightGU();\n        } else if (units == Units.PX && sprite.getUnits() == Units.PERCENTS) {\n            pos.x = (sprite.getX() / 100f) * metrics.viewport[2];\n            pos.y = (sprite.getY() / 100f) * metrics.viewport[3];\n        } else {\n            throw new RuntimeException(\"Unhandled yet sprite positioning.\");\n        }\n\n        return pos;\n    }\n\n    /**\n     * Compute the position of a sprite if attached to a node.\n     *\n     * @param sprite\n     *            The sprite.\n     * @param pos\n     *            Where to stored the computed position, if null, the position\n     *            is created.\n     * @param units\n     *            The units the computed position must be given into.\n     * @return The same instance as pos, or a new one if pos was null.\n     */\n    protected Point2D.Double getSpritePositionNode(GraphicSprite sprite,\n                                                   Point2D.Double pos, Units units) {\n        if (pos == null)\n            pos = new Point2D.Double();\n\n        GraphicNode node = sprite.getNodeAttachment();\n        double radius = metrics.lengthToGu(sprite.getX(), sprite.getUnits());\n        double z = (double) (sprite.getZ() * (Math.PI / 180f));\n\n        pos.x = node.x + ((double) Math.cos(z) * radius);\n        pos.y = node.y + ((double) Math.sin(z) * radius);\n\n        if (units == Units.PX)\n            Tx.transform(pos, pos);\n\n        return pos;\n    }\n\n    /**\n     * Compute the position of a sprite if attached to an edge.\n     *\n     * @param sprite\n     *            The sprite.\n     * @param pos\n     *            Where to stored the computed position, if null, the position\n     *            is created.\n     * @param units\n     *            The units the computed position must be given into.\n     * @return The same instance as pos, or a new one if pos was null.\n     */\n    protected Point2D.Double getSpritePositionEdge(GraphicSprite sprite,\n                                                   Point2D.Double pos, Units units) {\n        if (pos == null)\n            pos = new Point2D.Double();\n\n        GraphicEdge edge = sprite.getEdgeAttachment();\n\n        if (edge.isCurve()) {\n            double ctrl[] = edge.getControlPoints();\n            Point2 p0 = new Point2(edge.from.getX(), edge.from.getY());\n            Point2 p1 = new Point2(ctrl[0], ctrl[1]);\n            Point2 p2 = new Point2(ctrl[1], ctrl[2]);\n            Point2 p3 = new Point2(edge.to.getX(), edge.to.getY());\n            Vector2 perp = CubicCurve.perpendicular(p0, p1, p2, p3,\n                sprite.getX());\n            double y = metrics.lengthToGu(sprite.getY(), sprite.getUnits());\n\n            perp.normalize();\n            perp.scalarMult(y);\n\n            pos.x = CubicCurve.eval(p0.x, p1.x, p2.x, p3.x, sprite.getX())\n                - perp.data[0];\n            pos.y = CubicCurve.eval(p0.y, p1.y, p2.y, p3.y, sprite.getX())\n                - perp.data[1];\n        } else {\n            double x = ((GraphicNode) edge.getSourceNode()).x;\n            double y = ((GraphicNode) edge.getSourceNode()).y;\n            double dx = ((GraphicNode) edge.getTargetNode()).x - x;\n            double dy = ((GraphicNode) edge.getTargetNode()).y - y;\n            double d = sprite.getX(); // Percent on the edge.\n            double o = metrics.lengthToGu(sprite.getY(), sprite.getUnits());\n            // Offset from the position given by percent, perpendicular to the\n            // edge.\n\n            d = d > 1 ? 1 : d;\n            d = d < 0 ? 0 : d;\n\n            x += dx * d;\n            y += dy * d;\n\n            d = (double) Math.sqrt(dx * dx + dy * dy);\n            dx /= d;\n            dy /= d;\n\n            x += -dy * o;\n            y += dx * o;\n\n            pos.x = x;\n            pos.y = y;\n\n            if (units == Units.PX) {\n                Tx.transform(pos, pos);\n            }\n        }\n\n        return pos;\n    }\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "sprite",
                "org.graphstream.ui.graphicGraph",
                "GraphicSprite"
            ],
            [
                "pos",
                "java.awt.geom",
                "Point2D.Double"
            ],
            [
                "units",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants.Units"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "transformPxToGu",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/*\n     * (non-Javadoc)\n     *\n     * @see org.graphstream.ui.swingViewer.util.Camera#inverseTransform(double,\n     * double)\n     */\npublic Point3 transformPxToGu(double x, double y) {\n    Point2D.Double p = new Point2D.Double(x, y);\n    xT.transform(p, p);\n    return new Point3(p.x, p.y, 0);\n}"
            ],
            [
                "getPaddingXgu",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "// Utility\nprotected double getPaddingXgu() {\n    if (padding.units == Style.Units.GU && padding.size() > 0)\n        return padding.get(0);\n    return 0;\n}"
            ],
            [
                "getViewPercent",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/*\n     * (non-Javadoc)\n     *\n     * @see org.graphstream.ui.swingViewer.util.Camera#getViewPercent()\n     */\npublic double getViewPercent() {\n    return zoom;\n}"
            ],
            [
                "transformGuToPx",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/*\n     * (non-Javadoc)\n     *\n     * @see org.graphstream.ui.swingViewer.util.Camera#transform(double, double)\n     */\npublic Point3 transformGuToPx(double x, double y, double z) {\n    Point2D.Double p = new Point2D.Double(x, y);\n    Tx.transform(p, p);\n    return new Point3(p.x, p.y, 0);\n}"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "isNodeIn",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/**\n * Is the given node visible in the given area.\n *\n * @param node\n *            The node to check.\n * @param X1\n *            The min abscissa of the area.\n * @param Y1\n *            The min ordinate of the area.\n * @param X2\n *            The max abscissa of the area.\n * @param Y2\n *            The max ordinate of the area.\n * @return True if the node lies in the given area.\n */\nprotected boolean isNodeIn(GraphicNode node, double X1, double Y1, double X2, double Y2) {\n    Values size = node.getStyle().getSize();\n    double w2 = metrics.lengthToPx(size, 0) / 2;\n    double h2 = size.size() > 1 ? metrics.lengthToPx(size, 1) / 2 : w2;\n    Point2D.Double src = new Point2D.Double(node.getX(), node.getY());\n    boolean vis = true;\n    Tx.transform(src, src);\n    double x1 = src.x - w2;\n    double x2 = src.x + w2;\n    double y1 = src.y - h2;\n    double y2 = src.y + h2;\n    if (x2 < X1)\n        vis = false;\n    else if (y2 < Y1)\n        vis = false;\n    else if (x1 > X2)\n        vis = false;\n    else if (y1 > Y2)\n        vis = false;\n    return vis;\n}"
            ],
            [
                "isSpriteIn",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/**\n * Is the given sprite visible in the given area.\n *\n * @param sprite\n *            The sprite to check.\n * @param X1\n *            The min abscissa of the area.\n * @param Y1\n *            The min ordinate of the area.\n * @param X2\n *            The max abscissa of the area.\n * @param Y2\n *            The max ordinate of the area.\n * @return True if the node lies in the given area.\n */\nprotected boolean isSpriteIn(GraphicSprite sprite, double X1, double Y1, double X2, double Y2) {\n    if (sprite.isAttachedToNode() && nodeInvisible.contains(sprite.getNodeAttachment().getId())) {\n        return false;\n    } else if (sprite.isAttachedToEdge() && !isEdgeVisible(sprite.getEdgeAttachment())) {\n        return false;\n    } else {\n        Values size = sprite.getStyle().getSize();\n        double w2 = metrics.lengthToPx(size, 0) / 2;\n        double h2 = size.size() > 1 ? metrics.lengthToPx(size, 1) / 2 : w2;\n        // new Point2D.Double(\n        Point2D.Double src = spritePositionPx(sprite);\n        // sprite.getX(),\n        // sprite.getY() );\n        // Tx.transform( src, src );\n        double x1 = src.x - w2;\n        double x2 = src.x + w2;\n        double y1 = src.y - h2;\n        double y2 = src.y + h2;\n        if (x2 < X1)\n            return false;\n        if (y2 < Y1)\n            return false;\n        if (x1 > X2)\n            return false;\n        if (y1 > Y2)\n            return false;\n        return true;\n    }\n}"
            ],
            [
                "getGraphDimension",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/*\n     * (non-Javadoc)\n     *\n     * @see org.graphstream.ui.swingViewer.util.Camera#getGraphDimension()\n     */\npublic double getGraphDimension() {\n    if (gviewport != null)\n        return gviewportDiagonal;\n    return metrics.diagonal;\n}"
            ],
            [
                "isVisible",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/**\n * True if the element should be visible on screen. The method used is to\n * transform the center of the element (which is always in graph units)\n * using the camera actual transformation to put it in pixel units. Then to\n * look in the style sheet the size of the element and to test if its\n * enclosing rectangle intersects the view port. For edges, its two nodes\n * are used. As a speed-up by default if the camera is in automatic fitting\n * mode, all element should be visible, and the test always returns true.\n *\n * @param element\n *            The element to test.\n * @return True if the element is visible and therefore must be rendered.\n */\npublic boolean isVisible(GraphicElement element) {\n    if (autoFit) {\n        return ((!element.hidden) && (element.style.getVisibilityMode() != StyleConstants.VisibilityMode.HIDDEN));\n    } else {\n        switch(element.getSelectorType()) {\n            case NODE:\n                return !nodeInvisible.contains(element.getId());\n            case EDGE:\n                return isEdgeVisible((GraphicEdge) element);\n            case SPRITE:\n                return isSpriteVisible((GraphicSprite) element);\n            default:\n                return false;\n        }\n    }\n}"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "allNodesOrSpritesIn",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/**\n * Search for all the nodes and sprites contained inside the rectangle\n * (x1,y1)-(x2,y2).\n *\n * @param graph\n *            The graph to search for.\n * @param x1\n *            The rectangle lowest point abscissa.\n * @param y1\n *            The rectangle lowest point ordinate.\n * @param x2\n *            The rectangle highest point abscissa.\n * @param y2\n *            The rectangle highest point ordinate.\n * @return The set of sprites and nodes in the given rectangle.\n */\npublic Collection<GraphicElement> allNodesOrSpritesIn(GraphicGraph graph, double x1, double y1, double x2, double y2) {\n    List<GraphicElement> elts = new ArrayList<GraphicElement>();\n    for (Node node : graph) {\n        if (isNodeIn((GraphicNode) node, x1, y1, x2, y2))\n            elts.add((GraphicNode) node);\n    }\n    for (GraphicSprite sprite : graph.spriteSet()) {\n        if (isSpriteIn(sprite, x1, y1, x2, y2))\n            elts.add(sprite);\n    }\n    return Collections.unmodifiableList(elts);\n}"
            ],
            [
                "getViewCenter",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "// Access\n/*\n     * (non-Javadoc)\n     *\n     * @see org.graphstream.ui.swingViewer.util.Camera#getViewCenter()\n     */\npublic Point3 getViewCenter() {\n    return center;\n}"
            ],
            [
                "getMetrics",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/*\n     * (non-Javadoc)\n     *\n     * @see org.graphstream.ui.swingViewer.util.Camera#getMetrics()\n     */\npublic GraphMetrics getMetrics() {\n    return metrics;\n}"
            ],
            [
                "spriteContains",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/**\n * Check if a sprite contains the given point (x,y).\n *\n * @param elt\n *            The sprite.\n * @param x\n *            The point abscissa.\n * @param y\n *            The point ordinate.\n * @return True if (x,y) is in the given element.\n */\nprotected boolean spriteContains(GraphicElement elt, double x, double y) {\n    Values size = elt.getStyle().getSize();\n    double w2 = metrics.lengthToPx(size, 0) / 2;\n    double h2 = size.size() > 1 ? metrics.lengthToPx(size, 1) / 2 : w2;\n    // new\n    Point2D.Double dst = spritePositionPx((GraphicSprite) elt);\n    // Point2D.Double(\n    // elt.getX(),\n    // elt.getY()\n    // );\n    // Point2D.Double dst = new Point2D.Double();\n    // Tx.transform( src, dst );\n    dst.x -= metrics.viewport[0];\n    dst.y -= metrics.viewport[1];\n    double x1 = dst.x - w2;\n    double x2 = dst.x + w2;\n    double y1 = dst.y - h2;\n    double y2 = dst.y + h2;\n    if (x < x1)\n        return false;\n    if (y < y1)\n        return false;\n    if (x > x2)\n        return false;\n    if (y > y2)\n        return false;\n    return true;\n}"
            ],
            [
                "getSpritePosition",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/**\n * Compute the real position of a sprite according to its eventual\n * attachment in graph units.\n *\n * @param sprite\n *            The sprite.\n * @param pos\n *            Receiver for the sprite 2D position, can be null.\n * @param units\n *            The units in which the position must be computed (the sprite\n *            already contains units).\n * @return The same instance as the one given by parameter pos or a new one\n *         if pos was null, containing the computed position in the given\n *         units.\n */\npublic Point2D.Double getSpritePosition(GraphicSprite sprite, Point2D.Double pos, Units units) {\n    if (sprite.isAttachedToNode())\n        return getSpritePositionNode(sprite, pos, units);\n    else if (sprite.isAttachedToEdge())\n        return getSpritePositionEdge(sprite, pos, units);\n    else\n        return getSpritePositionFree(sprite, pos, units);\n}"
            ],
            [
                "getPaddingXpx",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "protected double getPaddingXpx() {\n    if (padding.units == Style.Units.PX && padding.size() > 0)\n        return padding.get(0);\n    return 0;\n}"
            ],
            [
                "findNodeOrSpriteAt",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/**\n * Search for the first node or sprite (in that order) that contains the\n * point at coordinates (x, y).\n *\n * @param graph\n *            The graph to search for.\n * @param x\n *            The point abscissa.\n * @param y\n *            The point ordinate.\n * @return The first node or sprite at the given coordinates or null if\n *         nothing found.\n */\npublic GraphicElement findNodeOrSpriteAt(GraphicGraph graph, double x, double y) {\n    for (Node n : graph) {\n        GraphicNode node = (GraphicNode) n;\n        if (nodeContains(node, x, y))\n            return node;\n    }\n    for (GraphicSprite sprite : graph.spriteSet()) {\n        if (spriteContains(sprite, x, y))\n            return sprite;\n    }\n    return null;\n}"
            ],
            [
                "getSpritePositionEdge",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/**\n * Compute the position of a sprite if attached to an edge.\n *\n * @param sprite\n *            The sprite.\n * @param pos\n *            Where to stored the computed position, if null, the position\n *            is created.\n * @param units\n *            The units the computed position must be given into.\n * @return The same instance as pos, or a new one if pos was null.\n */\nprotected Point2D.Double getSpritePositionEdge(GraphicSprite sprite, Point2D.Double pos, Units units) {\n    if (pos == null)\n        pos = new Point2D.Double();\n    GraphicEdge edge = sprite.getEdgeAttachment();\n    if (edge.isCurve()) {\n        double[] ctrl = edge.getControlPoints();\n        Point2 p0 = new Point2(edge.from.getX(), edge.from.getY());\n        Point2 p1 = new Point2(ctrl[0], ctrl[1]);\n        Point2 p2 = new Point2(ctrl[1], ctrl[2]);\n        Point2 p3 = new Point2(edge.to.getX(), edge.to.getY());\n        Vector2 perp = CubicCurve.perpendicular(p0, p1, p2, p3, sprite.getX());\n        double y = metrics.lengthToGu(sprite.getY(), sprite.getUnits());\n        perp.normalize();\n        perp.scalarMult(y);\n        pos.x = CubicCurve.eval(p0.x, p1.x, p2.x, p3.x, sprite.getX()) - perp.data[0];\n        pos.y = CubicCurve.eval(p0.y, p1.y, p2.y, p3.y, sprite.getX()) - perp.data[1];\n    } else {\n        double x = ((GraphicNode) edge.getSourceNode()).x;\n        double y = ((GraphicNode) edge.getSourceNode()).y;\n        double dx = ((GraphicNode) edge.getTargetNode()).x - x;\n        double dy = ((GraphicNode) edge.getTargetNode()).y - y;\n        // Percent on the edge.\n        double d = sprite.getX();\n        double o = metrics.lengthToGu(sprite.getY(), sprite.getUnits());\n        // Offset from the position given by percent, perpendicular to the\n        // edge.\n        d = d > 1 ? 1 : d;\n        d = d < 0 ? 0 : d;\n        x += dx * d;\n        y += dy * d;\n        d = (double) Math.sqrt(dx * dx + dy * dy);\n        dx /= d;\n        dy /= d;\n        x += -dy * o;\n        y += dx * o;\n        pos.x = x;\n        pos.y = y;\n        if (units == Units.PX) {\n            Tx.transform(pos, pos);\n        }\n    }\n    return pos;\n}"
            ],
            [
                "toString",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "@Override\npublic String toString() {\n    StringBuilder builder = new StringBuilder(String.format(\"Camera :%n\"));\n    builder.append(String.format(\"    autoFit  = %b%n\", autoFit));\n    builder.append(String.format(\"    center   = %s%n\", center));\n    builder.append(String.format(\"    rotation = %f%n\", rotation));\n    builder.append(String.format(\"    zoom     = %f%n\", zoom));\n    builder.append(String.format(\"    padding  = %s%n\", padding));\n    builder.append(String.format(\"    metrics  = %s%n\", metrics));\n    return builder.toString();\n}"
            ],
            [
                "getGraphViewport",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "public double[] getGraphViewport() {\n    return gviewport;\n}"
            ],
            [
                "spritePositionPx",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "protected Point2D.Double spritePositionPx(GraphicSprite sprite) {\n    Point2D.Double pos = new Point2D.Double();\n    return getSpritePosition(sprite, pos, Units.PX);\n    // if( sprite.getUnits() == Units.PX )\n    // {\n    // return new Point2D.Double( sprite.getX(), sprite.getY() );\n    // }\n    // else if( sprite.getUnits() == Units.GU )\n    // {\n    // Point2D.Double pos = new Point2D.Double( sprite.getX(), sprite.getY()\n    // );\n    // return (Point2D.Double) Tx.transform( pos, pos );\n    // }\n    // else// if( sprite.getUnits() == Units.PERCENTS )\n    // {\n    // return new Point2D.Double(\n    // (sprite.getX()/100f)*metrics.viewport.data[0],\n    // (sprite.getY()/100f)*metrics.viewport.data[1] );\n    // }\n}"
            ],
            [
                "edgeContains",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "protected boolean edgeContains(GraphicElement elt, double x, double y) {\n    return false;\n}"
            ],
            [
                "getPaddingYpx",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "protected double getPaddingYpx() {\n    if (padding.units == Style.Units.PX && padding.size() > 1)\n        return padding.get(1);\n    return getPaddingXpx();\n}"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getSpritePositionNode",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/**\n * Compute the position of a sprite if attached to a node.\n *\n * @param sprite\n *            The sprite.\n * @param pos\n *            Where to stored the computed position, if null, the position\n *            is created.\n * @param units\n *            The units the computed position must be given into.\n * @return The same instance as pos, or a new one if pos was null.\n */\nprotected Point2D.Double getSpritePositionNode(GraphicSprite sprite, Point2D.Double pos, Units units) {\n    if (pos == null)\n        pos = new Point2D.Double();\n    GraphicNode node = sprite.getNodeAttachment();\n    double radius = metrics.lengthToGu(sprite.getX(), sprite.getUnits());\n    double z = (double) (sprite.getZ() * (Math.PI / 180f));\n    pos.x = node.x + ((double) Math.cos(z) * radius);\n    pos.y = node.y + ((double) Math.sin(z) * radius);\n    if (units == Units.PX)\n        Tx.transform(pos, pos);\n    return pos;\n}"
            ],
            [
                "isSpriteVisible",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/**\n * Check if a sprite is visible in the current view port.\n *\n * @param sprite\n *            The sprite to check.\n * @return True if visible.\n */\nprotected boolean isSpriteVisible(GraphicSprite sprite) {\n    return isSpriteIn(sprite, metrics.viewport[0], metrics.viewport[1], metrics.viewport[0] + metrics.viewport[2], metrics.viewport[1] + metrics.viewport[3]);\n}"
            ],
            [
                "getSpritePositionFree",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/**\n * Compute the position of a sprite if it is not attached.\n *\n * @param sprite\n *            The sprite.\n * @param pos\n *            Where to stored the computed position, if null, the position\n *            is created.\n * @param units\n *            The units the computed position must be given into.\n * @return The same instance as pos, or a new one if pos was null.\n */\nprotected Point2D.Double getSpritePositionFree(GraphicSprite sprite, Point2D.Double pos, Units units) {\n    if (pos == null)\n        pos = new Point2D.Double();\n    if (sprite.getUnits() == units) {\n        pos.x = sprite.getX();\n        pos.y = sprite.getY();\n    } else if (units == Units.GU && sprite.getUnits() == Units.PX) {\n        pos.x = sprite.getX();\n        pos.y = sprite.getY();\n        xT.transform(pos, pos);\n    } else if (units == Units.PX && sprite.getUnits() == Units.GU) {\n        pos.x = sprite.getX();\n        pos.y = sprite.getY();\n        Tx.transform(pos, pos);\n    } else if (units == Units.GU && sprite.getUnits() == Units.PERCENTS) {\n        pos.x = metrics.lo.x + (sprite.getX() / 100f) * metrics.graphWidthGU();\n        pos.y = metrics.lo.y + (sprite.getY() / 100f) * metrics.graphHeightGU();\n    } else if (units == Units.PX && sprite.getUnits() == Units.PERCENTS) {\n        pos.x = (sprite.getX() / 100f) * metrics.viewport[2];\n        pos.y = (sprite.getY() / 100f) * metrics.viewport[3];\n    } else {\n        throw new RuntimeException(\"Unhandled yet sprite positioning.\");\n    }\n    return pos;\n}"
            ],
            [
                "getPaddingYgu",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "protected double getPaddingYgu() {\n    if (padding.units == Style.Units.GU && padding.size() > 1)\n        return padding.get(1);\n    return getPaddingXgu();\n}"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "isEdgeVisible",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/**\n * Check if an edge is visible in the current view port.\n *\n * @param edge\n *            The edge to check.\n * @return True if visible.\n */\nprotected boolean isEdgeVisible(GraphicEdge edge) {\n    GraphicNode node0 = edge.getNode0();\n    GraphicNode node1 = edge.getNode1();\n    if (edge.hidden)\n        return false;\n    if ((!node1.positionned) || (!node0.positionned))\n        return false;\n    boolean node0Invis = nodeInvisible.contains(node0.getId());\n    boolean node1Invis = nodeInvisible.contains(node1.getId());\n    return !(node0Invis && node1Invis);\n}"
            ],
            [
                "nodeContains",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/**\n * Check if a node contains the given point (x,y).\n *\n * @param elt\n *            The node.\n * @param x\n *            The point abscissa.\n * @param y\n *            The point ordinate.\n * @return True if (x,y) is in the given element.\n */\nprotected boolean nodeContains(GraphicElement elt, double x, double y) {\n    Values size = elt.getStyle().getSize();\n    double w2 = metrics.lengthToPx(size, 0) / 2;\n    double h2 = size.size() > 1 ? metrics.lengthToPx(size, 1) / 2 : w2;\n    Point2D.Double src = new Point2D.Double(elt.getX(), elt.getY());\n    Point2D.Double dst = new Point2D.Double();\n    Tx.transform(src, dst);\n    dst.x -= metrics.viewport[0];\n    dst.y -= metrics.viewport[1];\n    double x1 = dst.x - w2;\n    double x2 = dst.x + w2;\n    double y1 = dst.y - h2;\n    double y2 = dst.y + h2;\n    if (x < x1)\n        return false;\n    if (y < y1)\n        return false;\n    if (x > x2)\n        return false;\n    if (y > y2)\n        return false;\n    return true;\n}"
            ],
            [
                "getViewRotation",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/*\n     * (non-Javadoc)\n     *\n     * @see org.graphstream.ui.swingViewer.util.Camera#getViewRotation()\n     */\npublic double getViewRotation() {\n    return rotation;\n}"
            ],
            [
                "isAttached",
                "org.graphstream.ui.graphicGraph",
                "GraphicSprite",
                "public boolean isAttached()"
            ],
            [
                "isAttachedToNode",
                "org.graphstream.ui.graphicGraph",
                "GraphicSprite",
                "public boolean isAttachedToNode()"
            ],
            [
                "getX",
                "org.graphstream.ui.graphicGraph",
                "GraphicSprite",
                "public double getX()"
            ],
            [
                "getNodeAttachment",
                "org.graphstream.ui.graphicGraph",
                "GraphicSprite",
                "public GraphicNode getNodeAttachment()"
            ],
            [
                "getSelectorType",
                "org.graphstream.ui.graphicGraph",
                "GraphicSprite",
                "public Selector.Type getSelectorType()"
            ],
            [
                "getY",
                "org.graphstream.ui.graphicGraph",
                "GraphicSprite",
                "public double getY()"
            ],
            [
                "getAttachment",
                "org.graphstream.ui.graphicGraph",
                "GraphicSprite",
                "public GraphicElement getAttachment()"
            ],
            [
                "getZ",
                "org.graphstream.ui.graphicGraph",
                "GraphicSprite",
                "public double getZ()"
            ],
            [
                "getUnits",
                "org.graphstream.ui.graphicGraph",
                "GraphicSprite",
                "public StyleConstants.Units getUnits()"
            ],
            [
                "isAttachedToEdge",
                "org.graphstream.ui.graphicGraph",
                "GraphicSprite",
                "public boolean isAttachedToEdge()"
            ],
            [
                "getEdgeAttachment",
                "org.graphstream.ui.graphicGraph",
                "GraphicSprite",
                "public GraphicEdge getEdgeAttachment()"
            ],
            [
                "checkAngle",
                "org.graphstream.ui.graphicGraph",
                "GraphicSprite",
                "protected double checkAngle(double arg0)"
            ],
            [
                "myGraph",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public GraphicGraph myGraph()"
            ],
            [
                "getSelectorType",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract Selector.Type getSelectorType()"
            ],
            [
                "getLabel",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public String getLabel()"
            ],
            [
                "getY",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract double getY()"
            ],
            [
                "getStyle",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public StyleGroup getStyle()"
            ],
            [
                "getZ",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract double getZ()"
            ],
            [
                "getComponent",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public Object getComponent()"
            ],
            [
                "nullAttributesAreErrors",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected boolean nullAttributesAreErrors()"
            ],
            [
                "getX",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract double getX()"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "getArray",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Object[] getArray(String arg0)"
            ],
            [
                "getLabel",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public String getLabel(String arg0)"
            ],
            [
                "hasArray",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasArray(String arg0)"
            ],
            [
                "hasNumber",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasNumber(String arg0)"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Iterable<String> getEachAttributeKey()"
            ],
            [
                "getNumber",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public double getNumber(String arg0)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasAttribute(String arg0)"
            ],
            [
                "hasLabel",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasLabel(String arg0)"
            ],
            [
                "getId",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public String getId()"
            ],
            [
                "nullAttributesAreErrors",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected abstract boolean nullAttributesAreErrors()"
            ],
            [
                "getIndex",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public int getIndex()"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Collection<String> getAttributeKeySet()"
            ],
            [
                "toString",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public String toString()"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "getHash",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public int getAttributeCount()"
            ],
            [
                "getVector",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "hasHash",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasHash(String arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public <T> T getAttribute(String arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "hasVector",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasVector(String arg0)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "public abstract int getAttributeCount()"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasVector(String arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "public abstract HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasArray(String arg0)"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "public abstract Collection<String> getAttributeKeySet()"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "public abstract Object[] getArray(String arg0)"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "public abstract String getId()"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterable<String> getEachAttributeKey()"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract CharSequence getLabel(String arg0)"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract double getNumber(String arg0)"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "public abstract int getIndex()"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0)"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasHash(String arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0)"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasNumber(String arg0)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasLabel(String arg0)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "public abstract ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "getY",
                "java.awt.geom",
                "Point2D.Double",
                "public double getY()"
            ],
            [
                "getX",
                "java.awt.geom",
                "Point2D.Double",
                "public double getX()"
            ],
            [
                "toString",
                "java.awt.geom",
                "Point2D.Double",
                "public String toString()"
            ],
            [
                "distanceSq",
                "java.awt.geom",
                "Point2D",
                "public double distanceSq(Point2D arg0)"
            ],
            [
                "getY",
                "java.awt.geom",
                "Point2D",
                "public abstract double getY()"
            ],
            [
                "getX",
                "java.awt.geom",
                "Point2D",
                "public abstract double getX()"
            ],
            [
                "hashCode",
                "java.awt.geom",
                "Point2D",
                "public int hashCode()"
            ],
            [
                "distance",
                "java.awt.geom",
                "Point2D",
                "public double distance(double arg0, double arg1)"
            ],
            [
                "distance",
                "java.awt.geom",
                "Point2D",
                "public double distance(Point2D arg0)"
            ],
            [
                "distanceSq",
                "java.awt.geom",
                "Point2D",
                "public double distanceSq(double arg0, double arg1)"
            ],
            [
                "equals",
                "java.awt.geom",
                "Point2D",
                "public boolean equals(Object arg0)"
            ],
            [
                "clone",
                "java.awt.geom",
                "Point2D",
                "public Object clone()"
            ],
            [
                "clone",
                "java.lang",
                "Enum",
                "protected final Object clone() throws CloneNotSupportedException"
            ],
            [
                "equals",
                "java.lang",
                "Enum",
                "public final boolean equals(Object arg0)"
            ],
            [
                "describeConstable",
                "java.lang",
                "Enum",
                "public final Optional<Enum.EnumDesc<E>> describeConstable()"
            ],
            [
                "toString",
                "java.lang",
                "Enum",
                "public String toString()"
            ],
            [
                "hashCode",
                "java.lang",
                "Enum",
                "public final int hashCode()"
            ],
            [
                "compareTo",
                "java.lang",
                "Enum",
                "public final int compareTo(E arg0)"
            ],
            [
                "name",
                "java.lang",
                "Enum",
                "public final String name()"
            ],
            [
                "getDeclaringClass",
                "java.lang",
                "Enum",
                "public final Class<E> getDeclaringClass()"
            ],
            [
                "ordinal",
                "java.lang",
                "Enum",
                "public final int ordinal()"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "graph",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "// Attribute\n/**\n * The graph.\n */\nprotected GraphicGraph graph = null;"
            ],
            [
                "metrics",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/**\n * Information on the graph overall dimension and position.\n */\nprotected GraphMetrics metrics = new GraphMetrics();"
            ],
            [
                "autoFit",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/**\n * Automatic centring of the view.\n */\nprotected boolean autoFit = true;"
            ],
            [
                "center",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/**\n * The camera centre of view.\n */\nprotected Point3 center = new Point3();"
            ],
            [
                "zoom",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/**\n * The camera zoom.\n */\nprotected double zoom;"
            ],
            [
                "Tx",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/**\n * The graph-space -> pixel-space transformation.\n */\nprotected AffineTransform Tx = new AffineTransform();"
            ],
            [
                "xT",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/**\n * The inverse transform of Tx.\n */\nprotected AffineTransform xT;"
            ],
            [
                "oldTx",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/**\n * The previous affine transform.\n */\nprotected AffineTransform oldTx;"
            ],
            [
                "rotation",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/**\n * The rotation angle.\n */\nprotected double rotation;"
            ],
            [
                "padding",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/**\n * Padding around the graph.\n */\nprotected Values padding = new Values(Style.Units.GU, 0, 0, 0);"
            ],
            [
                "nodeInvisible",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/**\n * Which node is visible. This allows to mark invisible nodes to fasten\n * visibility tests for nodes, attached sprites and edges.\n */\nprotected HashSet<String> nodeInvisible = new HashSet<String>();"
            ],
            [
                "gviewport",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "/**\n * The graph view port, if any. The graph view port is a view inside the\n * graph space. It allows to compute the view according to a specified area\n * of the graph space instead of the graph dimensions.\n */\nprotected double[] gviewport = null;"
            ],
            [
                "gviewportDiagonal",
                "org.graphstream.ui.swingViewer.util",
                "DefaultCamera",
                "protected double gviewportDiagonal = 0;"
            ],
            [
                "node",
                "org.graphstream.ui.graphicGraph",
                "GraphicSprite",
                "protected GraphicNode node;"
            ],
            [
                "edge",
                "org.graphstream.ui.graphicGraph",
                "GraphicSprite",
                "protected GraphicEdge edge;"
            ],
            [
                "position",
                "org.graphstream.ui.graphicGraph",
                "GraphicSprite",
                "public Values position;"
            ],
            [
                "mygraph",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected GraphicGraph mygraph;"
            ],
            [
                "label",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public String label;"
            ],
            [
                "style",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public StyleGroup style;"
            ],
            [
                "component",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public Object component;"
            ],
            [
                "hidden",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public boolean hidden;"
            ],
            [
                "id",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected String id;"
            ],
            [
                "attributes",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected HashMap<String, Object> attributes;"
            ],
            [
                "attributesBeingRemoved",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected ArrayList<String> attributesBeingRemoved;"
            ],
            [
                "x",
                "java.awt.geom",
                "Point2D.Double",
                "public double x;"
            ],
            [
                "y",
                "java.awt.geom",
                "Point2D.Double",
                "public double y;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 2692,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.ui.swingViewer.util",
        "className": "GradientFactory",
        "javadocTag": "@param y0 The start point ordinate.",
        "methodJavadoc": "    /**\n\t * Generate a linear gradient between two given points corresponding to the\n\t * given style.\n\t * \n\t * @param x0\n\t *            The start point abscissa.\n\t * @param y0\n\t *            The start point ordinate.\n\t * @param x1\n\t *            The end point abscissa.\n\t * @param y1\n\t *            The end point ordinate.\n\t * @param style\n\t *            The style.\n\t * @return A paint for the gradient or null if the style specifies no\n\t *         gradient (the fill mode is not a linear gradient or there is only\n\t *         one fill colour).\n\t */",
        "methodSourceCode": "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style){\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}",
        "classJavadoc": "/**\n     * Generate a gradient in the given pixel area following the given style.\n     * This produces a gradient only if the style fill-mode is compatible.\n     *\n     * @param x0\n     *            The left corner of the area.\n     * @param y0\n     *            The bottom corner of the area.\n     * @param width\n     *            The area width.\n     * @param height\n     *            The area height.\n     * @param style\n     *            The style.\n     * @return A gradient paint or null if the style does not specify a\n     *         gradient.\n     */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.swingViewer.util;\n\nimport org.graphstream.ui.graphicGraph.stylesheet.Style;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleConstants.FillMode;\n\nimport java.awt.Color;\nimport java.awt.GradientPaint;\nimport java.awt.LinearGradientPaint;\nimport java.awt.MultipleGradientPaint;\nimport java.awt.Paint;\nimport java.awt.RadialGradientPaint;\n\npublic class GradientFactory {\n\t/**\n\t * Generate a gradient in the given pixel area following the given style.\n\t * This produces a gradient only if the style fill-mode is compatible.\n\t * \n\t * @param x0\n\t *            The left corner of the area.\n\t * @param y0\n\t *            The bottom corner of the area.\n\t * @param width\n\t *            The area width.\n\t * @param height\n\t *            The area height.\n\t * @param style\n\t *            The style.\n\t * @return A gradient paint or null if the style does not specify a\n\t *         gradient.\n\t */\n\tpublic static Paint gradientInArea(int x0, int y0, int width, int height,\n\t\t\tStyle style) {\n\t\tswitch (style.getFillMode()) {\n\t\tcase GRADIENT_VERTICAL:\n\t\t\treturn linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n\t\tcase GRADIENT_HORIZONTAL:\n\t\t\treturn linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n\t\tcase GRADIENT_DIAGONAL1:\n\t\t\treturn linearGradientFromStyle(x0, y0, x0 + width, y0 + height,\n\t\t\t\t\tstyle);\n\t\tcase GRADIENT_DIAGONAL2:\n\t\t\treturn linearGradientFromStyle(x0 + width, y0, x0, y0 + height,\n\t\t\t\t\tstyle);\n\t\tcase GRADIENT_RADIAL:\n\t\t\treturn radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2),\n\t\t\t\t\twidth > height ? width / 2 : height / 2, style);\n\t\tdefault:\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Generate a linear gradient between two given points corresponding to the\n\t * given style.\n\t * \n\t * @param x0\n\t *            The start point abscissa.\n\t * @param y0\n\t *            The start point ordinate.\n\t * @param x1\n\t *            The end point abscissa.\n\t * @param y1\n\t *            The end point ordinate.\n\t * @param style\n\t *            The style.\n\t * @return A paint for the gradient or null if the style specifies no\n\t *         gradient (the fill mode is not a linear gradient or there is only\n\t *         one fill colour).\n\t */\n\tpublic static Paint linearGradientFromStyle(float x0, float y0, float x1,\n\t\t\tfloat y1, Style style) {\n\t\tPaint paint = null;\n\n\t\tif (style.getFillColorCount() > 1) {\n\t\t\tswitch (style.getFillMode()) {\n\t\t\tcase GRADIENT_DIAGONAL1:\n\t\t\tcase GRADIENT_DIAGONAL2:\n\t\t\tcase GRADIENT_HORIZONTAL:\n\t\t\tcase GRADIENT_VERTICAL:\n\t\t\t\tif (version16)\n\t\t\t\t\tpaint = new LinearGradientPaint(x0, y0, x1, y1,\n\t\t\t\t\t\t\tcreateFractions(style), createColors(style));\n\t\t\t\telse\n\t\t\t\t\tpaint = new GradientPaint(x0, y0, style.getFillColor(0),\n\t\t\t\t\t\t\tx1, y1, style.getFillColor(1));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn paint;\n\t}\n\n\tpublic static Paint radialGradientFromStyle(float cx, float cy,\n\t\t\tfloat radius, Style style) {\n\t\treturn radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n\t}\n\n\t/**\n\t * Generate a radial gradient between whose center is at (cx,cy) with the\n\t * given radius. The focus (fx,fy) is the start position of the gradient in\n\t * the circle.\n\t * \n\t * @param cx\n\t *            The center point abscissa.\n\t * @param cy\n\t *            The center point ordinate.\n\t * @param fx\n\t *            The start point abscissa.\n\t * @param fy\n\t *            The start point ordinate.\n\t * @param radius\n\t *            The gradient radius.\n\t * @param style\n\t *            The style.\n\t * @return A paint for the gradient or null if the style specifies no\n\t *         gradient (the fill mode is not a radial gradient or there is only\n\t *         one fill colour).\n\t */\n\tpublic static Paint radialGradientFromStyle(float cx, float cy,\n\t\t\tfloat radius, float fx, float fy, Style style) {\n\t\tPaint paint = null;\n\n\t\tif (version16) {\n\t\t\tif (style.getFillColorCount() > 1\n\t\t\t\t\t&& style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n\t\t\t\tfloat fractions[] = createFractions(style);\n\t\t\t\tColor colors[] = createColors(style);\n\t\t\t\tpaint = new RadialGradientPaint(cx, cy, radius, fx, fy,\n\t\t\t\t\t\tfractions, colors,\n\t\t\t\t\t\tMultipleGradientPaint.CycleMethod.REFLECT);\n\t\t\t}\n\t\t}\n\n\t\treturn paint;\n\t}\n\n\tprotected static float[] createFractions(Style style) {\n\t\tint n = style.getFillColorCount();\n\n\t\tif (n < predefFractions.length)\n\t\t\treturn predefFractions[n];\n\n\t\tfloat fractions[] = new float[n];\n\t\tfloat div = 1f / (n - 1);\n\n\t\tfor (int i = 1; i < (n - 1); i++)\n\t\t\tfractions[i] = div * i;\n\n\t\tfractions[0] = 0f;\n\t\tfractions[n - 1] = 1f;\n\n\t\treturn fractions;\n\t}\n\n\tprotected static Color[] createColors(Style style) {\n\t\tint n = style.getFillColorCount();\n\t\tColor colors[] = new Color[n];\n\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tcolors[i] = style.getFillColor(i);\n\n\t\treturn colors;\n\t}\n\n\tpublic static boolean version16 = false;\n\tpublic static float[][] predefFractions = new float[11][];\n\tpublic static float[] predefFractions2 = { 0f, 1f };\n\tpublic static float[] predefFractions3 = { 0f, 0.5f, 1f };\n\tpublic static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };\n\tpublic static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };\n\tpublic static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };\n\tpublic static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f,\n\t\t\t0.6666f, 0.8333f, 1f };\n\tpublic static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f,\n\t\t\t0.5712f, 0.7140f, 0.8568f, 1f };\n\tpublic static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f,\n\t\t\t0.625f, .75f, 0.875f, 1f };\n\tpublic static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f,\n\t\t\t0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };\n\n\tstatic {\n\t\tString version = System.getProperty(\"java.version\");\n\n\t\tif (version.startsWith(\"1.\") && version.length() >= 3) {\n\t\t\tString v = version.substring(2, 3);\n\t\t\tint n = Integer.parseInt(v);\n\n\t\t\tif (n >= 6)\n\t\t\t\tversion16 = true;\n\t\t}\n\n\t\tpredefFractions[0] = null;\n\t\tpredefFractions[1] = null;\n\t\tpredefFractions[2] = predefFractions2;\n\t\tpredefFractions[3] = predefFractions3;\n\t\tpredefFractions[4] = predefFractions4;\n\t\tpredefFractions[5] = predefFractions5;\n\t\tpredefFractions[6] = predefFractions6;\n\t\tpredefFractions[7] = predefFractions7;\n\t\tpredefFractions[8] = predefFractions8;\n\t\tpredefFractions[9] = predefFractions9;\n\t\tpredefFractions[10] = predefFractions10;\n\t}\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "0",
                "int"
            ],
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "1",
                "int"
            ]
        ],
        "tokensMethodArguments": [
            [
                "x0",
                "",
                "float"
            ],
            [
                "y0",
                "",
                "float"
            ],
            [
                "x1",
                "",
                "float"
            ],
            [
                "y1",
                "",
                "float"
            ],
            [
                "style",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getTextColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Color getTextColor(int arg0)"
            ],
            [
                "getCanvasColorCount",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public int getCanvasColorCount()"
            ],
            [
                "getTextPadding",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getTextPadding()"
            ],
            [
                "getArrowImage",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public String getArrowImage()"
            ],
            [
                "getZIndex",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Integer getZIndex()"
            ],
            [
                "getFillMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.FillMode getFillMode()"
            ],
            [
                "getTextBackgroundColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Color getTextBackgroundColor(int arg0)"
            ],
            [
                "toString",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public String toString(int arg0)"
            ],
            [
                "getTextSize",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Value getTextSize()"
            ],
            [
                "getShadowColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Color getShadowColor(int arg0)"
            ],
            [
                "getParent",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Rule getParent()"
            ],
            [
                "getIconMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.IconMode getIconMode()"
            ],
            [
                "getFillColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Color getFillColor(int arg0)"
            ],
            [
                "getFillColors",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Colors getFillColors()"
            ],
            [
                "getShadowColorCount",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public int getShadowColorCount()"
            ],
            [
                "getArrowSize",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getArrowSize()"
            ],
            [
                "getTextMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.TextMode getTextMode()"
            ],
            [
                "getTextVisibility",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getTextVisibility()"
            ],
            [
                "getSize",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getSize()"
            ],
            [
                "getStrokeColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Color getStrokeColor(int arg0)"
            ],
            [
                "getPadding",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getPadding()"
            ],
            [
                "getIcon",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public String getIcon()"
            ],
            [
                "getTextColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Colors getTextColor()"
            ],
            [
                "getStrokeWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Value getStrokeWidth()"
            ],
            [
                "getFillImage",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public String getFillImage()"
            ],
            [
                "getVisibilityMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.VisibilityMode getVisibilityMode()"
            ],
            [
                "getTextAlignment",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.TextAlignment getTextAlignment()"
            ],
            [
                "getTextBackgroundColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Colors getTextBackgroundColor()"
            ],
            [
                "getTextColorCount",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public int getTextColorCount()"
            ],
            [
                "getTextVisibilityMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.TextVisibilityMode getTextVisibilityMode()"
            ],
            [
                "getCanvasColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Color getCanvasColor(int arg0)"
            ],
            [
                "getTextFont",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public String getTextFont()"
            ],
            [
                "getSpriteOrientation",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.SpriteOrientation getSpriteOrientation()"
            ],
            [
                "getFillColorCount",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public int getFillColorCount()"
            ],
            [
                "getShadowMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.ShadowMode getShadowMode()"
            ],
            [
                "getSizeMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.SizeMode getSizeMode()"
            ],
            [
                "getValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public transient Object getValue(String arg0, String[] arg1)"
            ],
            [
                "hasValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public transient boolean hasValue(String arg0, String[] arg1)"
            ],
            [
                "getTextOffset",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getTextOffset()"
            ],
            [
                "getValueForEvent",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "protected Object getValueForEvent(String arg0, String arg1)"
            ],
            [
                "getStrokeColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Colors getStrokeColor()"
            ],
            [
                "getVisibility",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getVisibility()"
            ],
            [
                "getShadowOffset",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getShadowOffset()"
            ],
            [
                "getShapePoints",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getShapePoints()"
            ],
            [
                "getShadowWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Value getShadowWidth()"
            ],
            [
                "getArrowShape",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.ArrowShape getArrowShape()"
            ],
            [
                "getCanvasColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Colors getCanvasColor()"
            ],
            [
                "getTextStyle",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.TextStyle getTextStyle()"
            ],
            [
                "getStrokeColorCount",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public int getStrokeColorCount()"
            ],
            [
                "getStrokeMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.StrokeMode getStrokeMode()"
            ],
            [
                "getShadowColors",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Colors getShadowColors()"
            ],
            [
                "getShape",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.Shape getShape()"
            ],
            [
                "getTextBackgroundMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.TextBackgroundMode getTextBackgroundMode()"
            ],
            [
                "toString",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public String toString()"
            ],
            [
                "getJComponent",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.JComponents getJComponent()"
            ],
            [
                "createContext",
                "java.awt",
                "Paint",
                "public abstract PaintContext createContext(ColorModel arg0, Rectangle arg1, Rectangle2D arg2, AffineTransform arg3, RenderingHints arg4)"
            ],
            [
                "getTransparency",
                "java.awt",
                "Transparency",
                "public abstract int getTransparency()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "parent",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "protected Rule parent;"
            ],
            [
                "values",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "protected HashMap<String, Object> values;"
            ],
            [
                "alternates",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "protected HashMap<String, Rule> alternates;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 2748,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.ui.swingViewer.basicRenderer",
        "className": "ElementRenderer",
        "javadocTag": "@param g The Swing graphics.",
        "methodJavadoc": "    /**\n\t * Called before the rendering of elements on dynamic styles. This must only\n\t * change the style properties that can change dynamically.\n\t * \n\t * @param g\n\t *            The Swing graphics.\n\t * @param camera\n\t *            The camera.\n\t * @param element\n\t *            The graphic element concerned by the dynamic style change.\n\t */",
        "methodSourceCode": "protected abstract void pushDynStyle(StyleGroup group, Graphics2D g, Camera camera, GraphicElement element);",
        "classJavadoc": "/**\n     * Allow to know if an event began or ended.\n     */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.swingViewer.basicRenderer;\n\nimport org.graphstream.graph.Element;\nimport org.graphstream.ui.geom.Point3;\nimport org.graphstream.ui.graphicGraph.GraphicElement;\nimport org.graphstream.ui.graphicGraph.GraphicSprite;\nimport org.graphstream.ui.graphicGraph.StyleGroup;\nimport org.graphstream.ui.graphicGraph.StyleGroup.ElementEvents;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleConstants;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleConstants.Units;\nimport org.graphstream.ui.swingViewer.util.DefaultCamera;\nimport org.graphstream.ui.swingViewer.util.FontCache;\nimport org.graphstream.ui.view.Camera;\n\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.Graphics2D;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Point2D;\n\npublic abstract class ElementRenderer {\n\t// Attribute\n\n\t/**\n\t * Allow to know if an event began or ended.\n\t */\n\tprotected boolean hadEvents = false;\n\n\tprotected Font textFont;\n\n\tprotected Color textColor;\n\n\tprotected int textSize;\n\n\t// Constructor\n\n\t/**\n\t * New swing element renderer for the given style group.\n\t */\n\tpublic ElementRenderer() {\n\t}\n\n\t// Command\n\n\t/**\n\t * Render all the (visible) elements of the group.\n\t */\n\tpublic void render(StyleGroup group, Graphics2D g, Camera camera) {\n\t\tsetupRenderingPass(group, g, camera);\n\t\tpushStyle(group, g, camera);\n\n\t\tfor (Element e : group.bulkElements()) {\n\t\t\tGraphicElement ge = (GraphicElement) e;\n\n\t\t\tif (camera.isVisible(ge))\n\t\t\t\trenderElement(group, g, camera, ge);\n\t\t\telse\n\t\t\t\telementInvisible(group, g, camera, ge);\n\t\t}\n\n\t\tif (group.hasDynamicElements()) {\n\t\t\tfor (Element e : group.dynamicElements()) {\n\t\t\t\tGraphicElement ge = (GraphicElement) e;\n\n\t\t\t\tif (camera.isVisible(ge)) {\n\t\t\t\t\tif (!group.elementHasEvents(ge)) {\n\t\t\t\t\t\tpushDynStyle(group, g, camera, ge);\n\t\t\t\t\t\trenderElement(group, g, camera, ge);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\telementInvisible(group, g, camera, ge);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (group.hasEventElements()) {\n\t\t\tfor (ElementEvents event : group.elementsEvents()) {\n\t\t\t\tGraphicElement ge = (GraphicElement) event.getElement();\n\n\t\t\t\tif (camera.isVisible(ge)) {\n\t\t\t\t\tevent.activate();\n\t\t\t\t\tpushStyle(group, g, camera);\n\t\t\t\t\trenderElement(group, g, camera, ge);\n\t\t\t\t\tevent.deactivate();\n\t\t\t\t} else {\n\t\t\t\t\telementInvisible(group, g, camera, ge);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thadEvents = true;\n\t\t} else {\n\t\t\thadEvents = false;\n\t\t}\n\t}\n\n\t/**\n\t * Called before the whole rendering pass for all elements.\n\t * \n\t * @param g\n\t *            The Swing graphics.\n\t * @param camera\n\t *            The camera.\n\t */\n\tprotected abstract void setupRenderingPass(StyleGroup group, Graphics2D g,\n\t\t\tCamera camera);\n\n\t/**\n\t * Called before the rendering of bulk and event elements.\n\t * \n\t * @param g\n\t *            The Swing graphics.\n\t * @param camera\n\t *            The camera.\n\t */\n\tprotected abstract void pushStyle(StyleGroup group, Graphics2D g,\n\t\t\tCamera camera);\n\n\t/**\n\t * Called before the rendering of elements on dynamic styles. This must only\n\t * change the style properties that can change dynamically.\n\t * \n\t * @param g\n\t *            The Swing graphics.\n\t * @param camera\n\t *            The camera.\n\t * @param element\n\t *            The graphic element concerned by the dynamic style change.\n\t */\n\tprotected abstract void pushDynStyle(StyleGroup group, Graphics2D g,\n\t\t\tCamera camera, GraphicElement element);\n\n\t/**\n\t * Render a single element knowing the style is already prepared. Elements\n\t * that are not visible are not drawn.\n\t * \n\t * @param g\n\t *            The Swing graphics.\n\t * @param camera\n\t *            The camera.\n\t * @param element\n\t *            The element to render.\n\t */\n\tprotected abstract void renderElement(StyleGroup group, Graphics2D g,\n\t\t\tCamera camera, GraphicElement element);\n\n\t/**\n\t * Called during rendering in place of\n\t * {@link #renderElement(StyleGroup, Graphics2D, Camera, GraphicElement)}\n\t * to signal that the given element is not inside the view. The\n\t * renderElement() method will be called as soon as the element becomes\n\t * visible anew.\n\t * \n\t * @param g\n\t *            The Swing graphics.\n\t * @param camera\n\t *            The camera.\n\t * @param element\n\t *            The element to render.\n\t */\n\tprotected abstract void elementInvisible(StyleGroup group, Graphics2D g,\n\t\t\tCamera camera, GraphicElement element);\n\n\t// Utility\n\n\tprotected void configureText(StyleGroup group, Camera camera) {\n\t\tString fontName = group.getTextFont();\n\t\tStyleConstants.TextStyle textStyle = group.getTextStyle();\n\n\t\ttextSize = (int) group.getTextSize().value;\n\t\ttextColor = group.getTextColor(0);\n\t\ttextFont = FontCache.defaultFontCache().getFont(fontName, textStyle,\n\t\t\t\ttextSize);\n\t}\n\n\tprotected void renderText(StyleGroup group, Graphics2D g, Camera camera,\n\t\t\tGraphicElement element) {\n\t\tString label = element.getLabel();\n\t\t\n\t\tif (label != null && group.getTextMode() != StyleConstants.TextMode.HIDDEN\n\t\t\t\t&& group.getTextVisibilityMode() != StyleConstants.TextVisibilityMode.HIDDEN) {\n\n\t\t\tPoint3 p = null;\n\t\t\tGraphicSprite s = null;\n\t\t\tPoint2D.Double pos = null;\n\n\t\t\tif (element instanceof GraphicSprite) {\n\t\t\t\ts   = (GraphicSprite) element;\n\t\t\t\tpos = ((DefaultCamera) camera).getSpritePosition(s,\n\t\t\t\t\tnew Point2D.Double(), StyleConstants.Units.GU);\n\t\t\t}\n\n\t\t\tif (pos != null && s.getUnits() == Units.PX) {\n\t\t\t\tdouble w = camera.getMetrics().lengthToPx(group.getSize(),\n\t\t\t\t\t\t0);\n\t\t\t\tp = camera.transformGuToPx(pos.x, pos.y, 0);\n\t\t\t\tp.x += w/2;\n\t\t\t} else if (s != null && s.getUnits() == Units.PERCENTS) {\n\t\t\t\tdouble w = camera.getMetrics().lengthToPx(group.getSize(),\n\t\t\t\t\t\t0);\n\t\t\t\tp = camera.transformGuToPx(camera.getMetrics().viewport[2] * pos.x,\n\t\t\t\t\tcamera.getMetrics().viewport[3] *  pos.y, 0);\n\t\t\t\tp.x += (w/2);\n\t\t\t} else {\n\t\t\t\tdouble w = camera.getMetrics().lengthToGu(group.getSize(),\n\t\t\t\t\t\t0);\n\t\t\t\tp = camera.transformGuToPx(element.getX() + (w / 2), element\n\t\t\t\t\t\t.getY(), 0);\n\t\t\t}\n\n\t\t\tAffineTransform Tx = g.getTransform();\n\t\t\tColor c = g.getColor();\n\n\t\t\tg.setColor(textColor);\n\t\t\tg.setFont(textFont);\n\t\t\tg.setTransform(new AffineTransform());\n\t\t\tg.drawString(label, (float) p.x, (float) (p.y + textSize / 3)); // approximation\n\t\t\t// to gain time.\n\t\t\tg.setTransform(Tx);\n\t\t\tg.setColor(c);\n\t\t}\n\t}\n\n\tprotected Color interpolateColor(StyleGroup group, GraphicElement element) {\n\t\tColor color = group.getFillColor(0);\n\n\t\tint n = group.getFillColorCount();\n\n\t\tif (n > 1) {\n\t\t\tif (element.hasNumber(\"ui.color\") && n > 1) {\n\t\t\t\tdouble value = element.getNumber(\"ui.color\");\n\n\t\t\t\tif (value < 0)\n\t\t\t\t\tvalue = 0;\n\t\t\t\telse if (value > 1)\n\t\t\t\t\tvalue = 1;\n\n\t\t\t\tif (value == 1) {\n\t\t\t\t\tcolor = group.getFillColor(n - 1); // Simplification,\n\t\t\t\t\t// faster.\n\t\t\t\t} else if (value != 0) // If value == 0, color is already set\n\t\t\t\t// above.\n\t\t\t\t{\n\t\t\t\t\tdouble div = 1f / (n - 1);\n\t\t\t\t\tint col = (int) (value / div);\n\n\t\t\t\t\tdiv = (value - (div * col)) / div;\n\t\t\t\t\t// div = value / div - col;\n\n\t\t\t\t\tColor color0 = group.getFillColor(col);\n\t\t\t\t\tColor color1 = group.getFillColor(col + 1);\n\t\t\t\t\tdouble red = ((color0.getRed() * (1 - div)) + (color1\n\t\t\t\t\t\t\t.getRed() * div)) / 255f;\n\t\t\t\t\tdouble green = ((color0.getGreen() * (1 - div)) + (color1\n\t\t\t\t\t\t\t.getGreen() * div)) / 255f;\n\t\t\t\t\tdouble blue = ((color0.getBlue() * (1 - div)) + (color1\n\t\t\t\t\t\t\t.getBlue() * div)) / 255f;\n\t\t\t\t\tdouble alpha = ((color0.getAlpha() * (1 - div)) + (color1\n\t\t\t\t\t\t\t.getAlpha() * div)) / 255f;\n\n\t\t\t\t\tcolor = new Color((float) red, (float) green, (float) blue,\n\t\t\t\t\t\t\t(float) alpha);\n\t\t\t\t}\n\t\t\t} else if (element.hasAttribute(\"ui.color\", Color.class)) {\n\t\t\t\tcolor = element.getAttribute(\"ui.color\");\n\t\t\t}\n\t\t} else if (element.hasAttribute(\"ui.color\", Color.class)) {\n\t\t\tcolor = element.getAttribute(\"ui.color\");\n\t\t}\n\n\t\treturn color;\n\t}\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "group",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup"
            ],
            [
                "g",
                "java.awt",
                "Graphics2D"
            ],
            [
                "camera",
                "org.graphstream.ui.view",
                "Camera"
            ],
            [
                "element",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "interpolateColor",
                "org.graphstream.ui.swingViewer.basicRenderer",
                "ElementRenderer",
                "protected Color interpolateColor(StyleGroup group, GraphicElement element) {\n    Color color = group.getFillColor(0);\n    int n = group.getFillColorCount();\n    if (n > 1) {\n        if (element.hasNumber(\"ui.color\") && n > 1) {\n            double value = element.getNumber(\"ui.color\");\n            if (value < 0)\n                value = 0;\n            else if (value > 1)\n                value = 1;\n            if (value == 1) {\n                // Simplification,\n                color = group.getFillColor(n - 1);\n                // faster.\n            } else if (// If value == 0, color is already set\n            value != 0) // above.\n            {\n                double div = 1f / (n - 1);\n                int col = (int) (value / div);\n                div = (value - (div * col)) / div;\n                // div = value / div - col;\n                Color color0 = group.getFillColor(col);\n                Color color1 = group.getFillColor(col + 1);\n                double red = ((color0.getRed() * (1 - div)) + (color1.getRed() * div)) / 255f;\n                double green = ((color0.getGreen() * (1 - div)) + (color1.getGreen() * div)) / 255f;\n                double blue = ((color0.getBlue() * (1 - div)) + (color1.getBlue() * div)) / 255f;\n                double alpha = ((color0.getAlpha() * (1 - div)) + (color1.getAlpha() * div)) / 255f;\n                color = new Color((float) red, (float) green, (float) blue, (float) alpha);\n            }\n        } else if (element.hasAttribute(\"ui.color\", Color.class)) {\n            color = element.getAttribute(\"ui.color\");\n        }\n    } else if (element.hasAttribute(\"ui.color\", Color.class)) {\n        color = element.getAttribute(\"ui.color\");\n    }\n    return color;\n}"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "elementIsDynamic",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public boolean elementIsDynamic(Element arg0)"
            ],
            [
                "getId",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public String getId()"
            ],
            [
                "getType",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public Selector.Type getType()"
            ],
            [
                "toString",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public String toString()"
            ],
            [
                "contains",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public boolean contains(String arg0)"
            ],
            [
                "dynamicElements",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public Iterable<Element> dynamicElements()"
            ],
            [
                "toString",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public String toString(int arg0)"
            ],
            [
                "elementHasEvents",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public boolean elementHasEvents(Element arg0)"
            ],
            [
                "iterator",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public Iterator<Element> iterator()"
            ],
            [
                "getRenderer",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public GraphicElement.SwingElementRenderer getRenderer(String arg0)"
            ],
            [
                "removeElement",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public Element removeElement(Element arg0)"
            ],
            [
                "isEmpty",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public boolean isEmpty()"
            ],
            [
                "elements",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public Iterable<? extends Element> elements()"
            ],
            [
                "isElementDynamic",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public boolean isElementDynamic(Element arg0)"
            ],
            [
                "hasEventElements",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public boolean hasEventElements()"
            ],
            [
                "contains",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public boolean contains(Element arg0)"
            ],
            [
                "removeRenderer",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public GraphicElement.SwingElementRenderer removeRenderer(String arg0)"
            ],
            [
                "getValue",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public transient Object getValue(String arg0, String[] arg1)"
            ],
            [
                "getElementIterator",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public Iterator<? extends Element> getElementIterator()"
            ],
            [
                "elementsEvents",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public Iterable<StyleGroup.ElementEvents> elementsEvents()"
            ],
            [
                "hasDynamicElements",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public boolean hasDynamicElements()"
            ],
            [
                "getElementCount",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public int getElementCount()"
            ],
            [
                "getElement",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public Element getElement(String arg0)"
            ],
            [
                "bulkElements",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public Iterable<? extends Element> bulkElements()"
            ],
            [
                "getEventsFor",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public StyleGroup.ElementEvents getEventsFor(Element arg0)"
            ],
            [
                "getFillColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Color getFillColor(int arg0)"
            ],
            [
                "toString",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public String toString()"
            ],
            [
                "hasValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public transient boolean hasValue(String arg0, String[] arg1)"
            ],
            [
                "getShadowColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Color getShadowColor(int arg0)"
            ],
            [
                "getTextColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Color getTextColor(int arg0)"
            ],
            [
                "getTextVisibilityMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.TextVisibilityMode getTextVisibilityMode()"
            ],
            [
                "getStrokeColorCount",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public int getStrokeColorCount()"
            ],
            [
                "getArrowSize",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getArrowSize()"
            ],
            [
                "getVisibilityMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.VisibilityMode getVisibilityMode()"
            ],
            [
                "getTextBackgroundMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.TextBackgroundMode getTextBackgroundMode()"
            ],
            [
                "getStrokeMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.StrokeMode getStrokeMode()"
            ],
            [
                "getTextMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.TextMode getTextMode()"
            ],
            [
                "getZIndex",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Integer getZIndex()"
            ],
            [
                "getFillColors",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Colors getFillColors()"
            ],
            [
                "getIcon",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public String getIcon()"
            ],
            [
                "getParent",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Rule getParent()"
            ],
            [
                "getTextFont",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public String getTextFont()"
            ],
            [
                "getTextAlignment",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.TextAlignment getTextAlignment()"
            ],
            [
                "getFillColorCount",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public int getFillColorCount()"
            ],
            [
                "getPadding",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getPadding()"
            ],
            [
                "getCanvasColorCount",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public int getCanvasColorCount()"
            ],
            [
                "getShadowColorCount",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public int getShadowColorCount()"
            ],
            [
                "getTextStyle",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.TextStyle getTextStyle()"
            ],
            [
                "getIconMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.IconMode getIconMode()"
            ],
            [
                "getTextPadding",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getTextPadding()"
            ],
            [
                "getCanvasColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Colors getCanvasColor()"
            ],
            [
                "getShadowMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.ShadowMode getShadowMode()"
            ],
            [
                "getTextColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Colors getTextColor()"
            ],
            [
                "getShape",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.Shape getShape()"
            ],
            [
                "getShadowOffset",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getShadowOffset()"
            ],
            [
                "getSpriteOrientation",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.SpriteOrientation getSpriteOrientation()"
            ],
            [
                "getVisibility",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getVisibility()"
            ],
            [
                "getTextVisibility",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getTextVisibility()"
            ],
            [
                "getArrowImage",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public String getArrowImage()"
            ],
            [
                "getValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public transient Object getValue(String arg0, String[] arg1)"
            ],
            [
                "getStrokeWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Value getStrokeWidth()"
            ],
            [
                "getFillMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.FillMode getFillMode()"
            ],
            [
                "getTextColorCount",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public int getTextColorCount()"
            ],
            [
                "getShadowColors",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Colors getShadowColors()"
            ],
            [
                "getCanvasColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Color getCanvasColor(int arg0)"
            ],
            [
                "getTextBackgroundColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Colors getTextBackgroundColor()"
            ],
            [
                "getArrowShape",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.ArrowShape getArrowShape()"
            ],
            [
                "getTextSize",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Value getTextSize()"
            ],
            [
                "getTextBackgroundColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Color getTextBackgroundColor(int arg0)"
            ],
            [
                "getTextOffset",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getTextOffset()"
            ],
            [
                "toString",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public String toString(int arg0)"
            ],
            [
                "getStrokeColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Color getStrokeColor(int arg0)"
            ],
            [
                "getJComponent",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.JComponents getJComponent()"
            ],
            [
                "getSize",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getSize()"
            ],
            [
                "getShadowWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Value getShadowWidth()"
            ],
            [
                "getStrokeColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Colors getStrokeColor()"
            ],
            [
                "getSizeMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.SizeMode getSizeMode()"
            ],
            [
                "getShapePoints",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getShapePoints()"
            ],
            [
                "getValueForEvent",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "protected Object getValueForEvent(String arg0, String arg1)"
            ],
            [
                "getFillImage",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public String getFillImage()"
            ],
            [
                "spliterator",
                "java.lang",
                "Iterable",
                "public default Spliterator<T> spliterator()"
            ],
            [
                "iterator",
                "java.lang",
                "Iterable",
                "public abstract Iterator<T> iterator()"
            ],
            [
                "getRenderingHints",
                "java.awt",
                "Graphics2D",
                "public abstract RenderingHints getRenderingHints()"
            ],
            [
                "getDeviceConfiguration",
                "java.awt",
                "Graphics2D",
                "public abstract GraphicsConfiguration getDeviceConfiguration()"
            ],
            [
                "getTransform",
                "java.awt",
                "Graphics2D",
                "public abstract AffineTransform getTransform()"
            ],
            [
                "getPaint",
                "java.awt",
                "Graphics2D",
                "public abstract Paint getPaint()"
            ],
            [
                "drawImage",
                "java.awt",
                "Graphics2D",
                "public abstract boolean drawImage(Image arg0, AffineTransform arg1, ImageObserver arg2)"
            ],
            [
                "getStroke",
                "java.awt",
                "Graphics2D",
                "public abstract Stroke getStroke()"
            ],
            [
                "getFontRenderContext",
                "java.awt",
                "Graphics2D",
                "public abstract FontRenderContext getFontRenderContext()"
            ],
            [
                "hit",
                "java.awt",
                "Graphics2D",
                "public abstract boolean hit(Rectangle arg0, Shape arg1, boolean arg2)"
            ],
            [
                "getRenderingHint",
                "java.awt",
                "Graphics2D",
                "public abstract Object getRenderingHint(RenderingHints.Key arg0)"
            ],
            [
                "getBackground",
                "java.awt",
                "Graphics2D",
                "public abstract Color getBackground()"
            ],
            [
                "getComposite",
                "java.awt",
                "Graphics2D",
                "public abstract Composite getComposite()"
            ],
            [
                "drawImage",
                "java.awt",
                "Graphics",
                "public abstract boolean drawImage(Image arg0, int arg1, int arg2, int arg3, int arg4, ImageObserver arg5)"
            ],
            [
                "create",
                "java.awt",
                "Graphics",
                "public Graphics create(int arg0, int arg1, int arg2, int arg3)"
            ],
            [
                "drawImage",
                "java.awt",
                "Graphics",
                "public abstract boolean drawImage(Image arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, Color arg9, ImageObserver arg10)"
            ],
            [
                "getClip",
                "java.awt",
                "Graphics",
                "public abstract Shape getClip()"
            ],
            [
                "toString",
                "java.awt",
                "Graphics",
                "public String toString()"
            ],
            [
                "getClipBounds",
                "java.awt",
                "Graphics",
                "public Rectangle getClipBounds(Rectangle arg0)"
            ],
            [
                "getFontMetrics",
                "java.awt",
                "Graphics",
                "public abstract FontMetrics getFontMetrics(Font arg0)"
            ],
            [
                "getClipRect",
                "java.awt",
                "Graphics",
                "public Rectangle getClipRect()"
            ],
            [
                "drawImage",
                "java.awt",
                "Graphics",
                "public abstract boolean drawImage(Image arg0, int arg1, int arg2, int arg3, int arg4, Color arg5, ImageObserver arg6)"
            ],
            [
                "getFont",
                "java.awt",
                "Graphics",
                "public abstract Font getFont()"
            ],
            [
                "drawImage",
                "java.awt",
                "Graphics",
                "public abstract boolean drawImage(Image arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, ImageObserver arg9)"
            ],
            [
                "getClipBounds",
                "java.awt",
                "Graphics",
                "public abstract Rectangle getClipBounds()"
            ],
            [
                "getFontMetrics",
                "java.awt",
                "Graphics",
                "public FontMetrics getFontMetrics()"
            ],
            [
                "drawImage",
                "java.awt",
                "Graphics",
                "public abstract boolean drawImage(Image arg0, int arg1, int arg2, ImageObserver arg3)"
            ],
            [
                "getColor",
                "java.awt",
                "Graphics",
                "public abstract Color getColor()"
            ],
            [
                "drawImage",
                "java.awt",
                "Graphics",
                "public abstract boolean drawImage(Image arg0, int arg1, int arg2, Color arg3, ImageObserver arg4)"
            ],
            [
                "create",
                "java.awt",
                "Graphics",
                "public abstract Graphics create()"
            ],
            [
                "hitClip",
                "java.awt",
                "Graphics",
                "public boolean hitClip(int arg0, int arg1, int arg2, int arg3)"
            ],
            [
                "isVisible",
                "org.graphstream.ui.view",
                "Camera",
                "public abstract boolean isVisible(GraphicElement arg0)"
            ],
            [
                "getViewPercent",
                "org.graphstream.ui.view",
                "Camera",
                "public abstract double getViewPercent()"
            ],
            [
                "transformPxToGu",
                "org.graphstream.ui.view",
                "Camera",
                "public abstract Point3 transformPxToGu(double arg0, double arg1)"
            ],
            [
                "getViewRotation",
                "org.graphstream.ui.view",
                "Camera",
                "public abstract double getViewRotation()"
            ],
            [
                "getGraphDimension",
                "org.graphstream.ui.view",
                "Camera",
                "public abstract double getGraphDimension()"
            ],
            [
                "transformGuToPx",
                "org.graphstream.ui.view",
                "Camera",
                "public abstract Point3 transformGuToPx(double arg0, double arg1, double arg2)"
            ],
            [
                "getViewCenter",
                "org.graphstream.ui.view",
                "Camera",
                "public abstract Point3 getViewCenter()"
            ],
            [
                "getMetrics",
                "org.graphstream.ui.view",
                "Camera",
                "public abstract GraphMetrics getMetrics()"
            ],
            [
                "nullAttributesAreErrors",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected boolean nullAttributesAreErrors()"
            ],
            [
                "myGraph",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public GraphicGraph myGraph()"
            ],
            [
                "getZ",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract double getZ()"
            ],
            [
                "getStyle",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public StyleGroup getStyle()"
            ],
            [
                "getComponent",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public Object getComponent()"
            ],
            [
                "getLabel",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public String getLabel()"
            ],
            [
                "getY",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract double getY()"
            ],
            [
                "getSelectorType",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract Selector.Type getSelectorType()"
            ],
            [
                "getX",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract double getX()"
            ],
            [
                "hasLabel",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasLabel(String arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasAttribute(String arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public <T> T getAttribute(String arg0)"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public int getAttributeCount()"
            ],
            [
                "hasVector",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasVector(String arg0)"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "getLabel",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public String getLabel(String arg0)"
            ],
            [
                "getIndex",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public int getIndex()"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "getArray",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Object[] getArray(String arg0)"
            ],
            [
                "getVector",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "toString",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public String toString()"
            ],
            [
                "getId",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public String getId()"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "getHash",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "nullAttributesAreErrors",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected abstract boolean nullAttributesAreErrors()"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Collection<String> getAttributeKeySet()"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Iterable<String> getEachAttributeKey()"
            ],
            [
                "hasArray",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasArray(String arg0)"
            ],
            [
                "getNumber",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public double getNumber(String arg0)"
            ],
            [
                "hasNumber",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasNumber(String arg0)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "hasHash",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasHash(String arg0)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "public abstract Object[] getArray(String arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0)"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "public abstract int getAttributeCount()"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasLabel(String arg0)"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterable<String> getEachAttributeKey()"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0)"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasHash(String arg0)"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "public abstract int getIndex()"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "public abstract String getId()"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasVector(String arg0)"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "public abstract Collection<String> getAttributeKeySet()"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasNumber(String arg0)"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "public abstract HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract double getNumber(String arg0)"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "public abstract ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasArray(String arg0)"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract CharSequence getLabel(String arg0)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0, Class<?> arg1)"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "hadEvents",
                "org.graphstream.ui.swingViewer.basicRenderer",
                "ElementRenderer",
                "// Attribute\n/**\n * Allow to know if an event began or ended.\n */\nprotected boolean hadEvents = false;"
            ],
            [
                "textFont",
                "org.graphstream.ui.swingViewer.basicRenderer",
                "ElementRenderer",
                "protected Font textFont;"
            ],
            [
                "textColor",
                "org.graphstream.ui.swingViewer.basicRenderer",
                "ElementRenderer",
                "protected Color textColor;"
            ],
            [
                "textSize",
                "org.graphstream.ui.swingViewer.basicRenderer",
                "ElementRenderer",
                "protected int textSize;"
            ],
            [
                "id",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "protected String id;"
            ],
            [
                "rules",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "protected ArrayList<Rule> rules;"
            ],
            [
                "elements",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "protected HashMap<String, Element> elements;"
            ],
            [
                "eventSet",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "protected StyleGroupSet.EventSet eventSet;"
            ],
            [
                "eventsFor",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "protected HashMap<Element, StyleGroup.ElementEvents> eventsFor;"
            ],
            [
                "dynamicOnes",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "protected HashSet<Element> dynamicOnes;"
            ],
            [
                "curEvents",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "protected String[] curEvents;"
            ],
            [
                "bulkElements",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "protected StyleGroup.BulkElements bulkElements;"
            ],
            [
                "renderers",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public HashMap<String, GraphicElement.SwingElementRenderer> renderers;"
            ],
            [
                "parent",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "protected Rule parent;"
            ],
            [
                "values",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "protected HashMap<String, Object> values;"
            ],
            [
                "alternates",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "protected HashMap<String, Rule> alternates;"
            ],
            [
                "mygraph",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected GraphicGraph mygraph;"
            ],
            [
                "label",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public String label;"
            ],
            [
                "style",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public StyleGroup style;"
            ],
            [
                "component",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public Object component;"
            ],
            [
                "hidden",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public boolean hidden;"
            ],
            [
                "id",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected String id;"
            ],
            [
                "attributes",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected HashMap<String, Object> attributes;"
            ],
            [
                "attributesBeingRemoved",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected ArrayList<String> attributesBeingRemoved;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 2756,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.ui.swingViewer.basicRenderer",
        "className": "ElementRenderer",
        "javadocTag": "@param element The element to render.",
        "methodJavadoc": "    /**\n\t * Called during rendering in place of\n\t * {@link #renderElement(StyleGroup, Graphics2D, Camera, GraphicElement)}\n\t * to signal that the given element is not inside the view. The\n\t * renderElement() method will be called as soon as the element becomes\n\t * visible anew.\n\t * \n\t * @param g\n\t *            The Swing graphics.\n\t * @param camera\n\t *            The camera.\n\t * @param element\n\t *            The element to render.\n\t */",
        "methodSourceCode": "protected abstract void elementInvisible(StyleGroup group, Graphics2D g, Camera camera, GraphicElement element);",
        "classJavadoc": "/**\n     * Allow to know if an event began or ended.\n     */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.swingViewer.basicRenderer;\n\nimport org.graphstream.graph.Element;\nimport org.graphstream.ui.geom.Point3;\nimport org.graphstream.ui.graphicGraph.GraphicElement;\nimport org.graphstream.ui.graphicGraph.GraphicSprite;\nimport org.graphstream.ui.graphicGraph.StyleGroup;\nimport org.graphstream.ui.graphicGraph.StyleGroup.ElementEvents;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleConstants;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleConstants.Units;\nimport org.graphstream.ui.swingViewer.util.DefaultCamera;\nimport org.graphstream.ui.swingViewer.util.FontCache;\nimport org.graphstream.ui.view.Camera;\n\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.Graphics2D;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Point2D;\n\npublic abstract class ElementRenderer {\n\t// Attribute\n\n\t/**\n\t * Allow to know if an event began or ended.\n\t */\n\tprotected boolean hadEvents = false;\n\n\tprotected Font textFont;\n\n\tprotected Color textColor;\n\n\tprotected int textSize;\n\n\t// Constructor\n\n\t/**\n\t * New swing element renderer for the given style group.\n\t */\n\tpublic ElementRenderer() {\n\t}\n\n\t// Command\n\n\t/**\n\t * Render all the (visible) elements of the group.\n\t */\n\tpublic void render(StyleGroup group, Graphics2D g, Camera camera) {\n\t\tsetupRenderingPass(group, g, camera);\n\t\tpushStyle(group, g, camera);\n\n\t\tfor (Element e : group.bulkElements()) {\n\t\t\tGraphicElement ge = (GraphicElement) e;\n\n\t\t\tif (camera.isVisible(ge))\n\t\t\t\trenderElement(group, g, camera, ge);\n\t\t\telse\n\t\t\t\telementInvisible(group, g, camera, ge);\n\t\t}\n\n\t\tif (group.hasDynamicElements()) {\n\t\t\tfor (Element e : group.dynamicElements()) {\n\t\t\t\tGraphicElement ge = (GraphicElement) e;\n\n\t\t\t\tif (camera.isVisible(ge)) {\n\t\t\t\t\tif (!group.elementHasEvents(ge)) {\n\t\t\t\t\t\tpushDynStyle(group, g, camera, ge);\n\t\t\t\t\t\trenderElement(group, g, camera, ge);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\telementInvisible(group, g, camera, ge);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (group.hasEventElements()) {\n\t\t\tfor (ElementEvents event : group.elementsEvents()) {\n\t\t\t\tGraphicElement ge = (GraphicElement) event.getElement();\n\n\t\t\t\tif (camera.isVisible(ge)) {\n\t\t\t\t\tevent.activate();\n\t\t\t\t\tpushStyle(group, g, camera);\n\t\t\t\t\trenderElement(group, g, camera, ge);\n\t\t\t\t\tevent.deactivate();\n\t\t\t\t} else {\n\t\t\t\t\telementInvisible(group, g, camera, ge);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thadEvents = true;\n\t\t} else {\n\t\t\thadEvents = false;\n\t\t}\n\t}\n\n\t/**\n\t * Called before the whole rendering pass for all elements.\n\t * \n\t * @param g\n\t *            The Swing graphics.\n\t * @param camera\n\t *            The camera.\n\t */\n\tprotected abstract void setupRenderingPass(StyleGroup group, Graphics2D g,\n\t\t\tCamera camera);\n\n\t/**\n\t * Called before the rendering of bulk and event elements.\n\t * \n\t * @param g\n\t *            The Swing graphics.\n\t * @param camera\n\t *            The camera.\n\t */\n\tprotected abstract void pushStyle(StyleGroup group, Graphics2D g,\n\t\t\tCamera camera);\n\n\t/**\n\t * Called before the rendering of elements on dynamic styles. This must only\n\t * change the style properties that can change dynamically.\n\t * \n\t * @param g\n\t *            The Swing graphics.\n\t * @param camera\n\t *            The camera.\n\t * @param element\n\t *            The graphic element concerned by the dynamic style change.\n\t */\n\tprotected abstract void pushDynStyle(StyleGroup group, Graphics2D g,\n\t\t\tCamera camera, GraphicElement element);\n\n\t/**\n\t * Render a single element knowing the style is already prepared. Elements\n\t * that are not visible are not drawn.\n\t * \n\t * @param g\n\t *            The Swing graphics.\n\t * @param camera\n\t *            The camera.\n\t * @param element\n\t *            The element to render.\n\t */\n\tprotected abstract void renderElement(StyleGroup group, Graphics2D g,\n\t\t\tCamera camera, GraphicElement element);\n\n\t/**\n\t * Called during rendering in place of\n\t * {@link #renderElement(StyleGroup, Graphics2D, Camera, GraphicElement)}\n\t * to signal that the given element is not inside the view. The\n\t * renderElement() method will be called as soon as the element becomes\n\t * visible anew.\n\t * \n\t * @param g\n\t *            The Swing graphics.\n\t * @param camera\n\t *            The camera.\n\t * @param element\n\t *            The element to render.\n\t */\n\tprotected abstract void elementInvisible(StyleGroup group, Graphics2D g,\n\t\t\tCamera camera, GraphicElement element);\n\n\t// Utility\n\n\tprotected void configureText(StyleGroup group, Camera camera) {\n\t\tString fontName = group.getTextFont();\n\t\tStyleConstants.TextStyle textStyle = group.getTextStyle();\n\n\t\ttextSize = (int) group.getTextSize().value;\n\t\ttextColor = group.getTextColor(0);\n\t\ttextFont = FontCache.defaultFontCache().getFont(fontName, textStyle,\n\t\t\t\ttextSize);\n\t}\n\n\tprotected void renderText(StyleGroup group, Graphics2D g, Camera camera,\n\t\t\tGraphicElement element) {\n\t\tString label = element.getLabel();\n\t\t\n\t\tif (label != null && group.getTextMode() != StyleConstants.TextMode.HIDDEN\n\t\t\t\t&& group.getTextVisibilityMode() != StyleConstants.TextVisibilityMode.HIDDEN) {\n\n\t\t\tPoint3 p = null;\n\t\t\tGraphicSprite s = null;\n\t\t\tPoint2D.Double pos = null;\n\n\t\t\tif (element instanceof GraphicSprite) {\n\t\t\t\ts   = (GraphicSprite) element;\n\t\t\t\tpos = ((DefaultCamera) camera).getSpritePosition(s,\n\t\t\t\t\tnew Point2D.Double(), StyleConstants.Units.GU);\n\t\t\t}\n\n\t\t\tif (pos != null && s.getUnits() == Units.PX) {\n\t\t\t\tdouble w = camera.getMetrics().lengthToPx(group.getSize(),\n\t\t\t\t\t\t0);\n\t\t\t\tp = camera.transformGuToPx(pos.x, pos.y, 0);\n\t\t\t\tp.x += w/2;\n\t\t\t} else if (s != null && s.getUnits() == Units.PERCENTS) {\n\t\t\t\tdouble w = camera.getMetrics().lengthToPx(group.getSize(),\n\t\t\t\t\t\t0);\n\t\t\t\tp = camera.transformGuToPx(camera.getMetrics().viewport[2] * pos.x,\n\t\t\t\t\tcamera.getMetrics().viewport[3] *  pos.y, 0);\n\t\t\t\tp.x += (w/2);\n\t\t\t} else {\n\t\t\t\tdouble w = camera.getMetrics().lengthToGu(group.getSize(),\n\t\t\t\t\t\t0);\n\t\t\t\tp = camera.transformGuToPx(element.getX() + (w / 2), element\n\t\t\t\t\t\t.getY(), 0);\n\t\t\t}\n\n\t\t\tAffineTransform Tx = g.getTransform();\n\t\t\tColor c = g.getColor();\n\n\t\t\tg.setColor(textColor);\n\t\t\tg.setFont(textFont);\n\t\t\tg.setTransform(new AffineTransform());\n\t\t\tg.drawString(label, (float) p.x, (float) (p.y + textSize / 3)); // approximation\n\t\t\t// to gain time.\n\t\t\tg.setTransform(Tx);\n\t\t\tg.setColor(c);\n\t\t}\n\t}\n\n\tprotected Color interpolateColor(StyleGroup group, GraphicElement element) {\n\t\tColor color = group.getFillColor(0);\n\n\t\tint n = group.getFillColorCount();\n\n\t\tif (n > 1) {\n\t\t\tif (element.hasNumber(\"ui.color\") && n > 1) {\n\t\t\t\tdouble value = element.getNumber(\"ui.color\");\n\n\t\t\t\tif (value < 0)\n\t\t\t\t\tvalue = 0;\n\t\t\t\telse if (value > 1)\n\t\t\t\t\tvalue = 1;\n\n\t\t\t\tif (value == 1) {\n\t\t\t\t\tcolor = group.getFillColor(n - 1); // Simplification,\n\t\t\t\t\t// faster.\n\t\t\t\t} else if (value != 0) // If value == 0, color is already set\n\t\t\t\t// above.\n\t\t\t\t{\n\t\t\t\t\tdouble div = 1f / (n - 1);\n\t\t\t\t\tint col = (int) (value / div);\n\n\t\t\t\t\tdiv = (value - (div * col)) / div;\n\t\t\t\t\t// div = value / div - col;\n\n\t\t\t\t\tColor color0 = group.getFillColor(col);\n\t\t\t\t\tColor color1 = group.getFillColor(col + 1);\n\t\t\t\t\tdouble red = ((color0.getRed() * (1 - div)) + (color1\n\t\t\t\t\t\t\t.getRed() * div)) / 255f;\n\t\t\t\t\tdouble green = ((color0.getGreen() * (1 - div)) + (color1\n\t\t\t\t\t\t\t.getGreen() * div)) / 255f;\n\t\t\t\t\tdouble blue = ((color0.getBlue() * (1 - div)) + (color1\n\t\t\t\t\t\t\t.getBlue() * div)) / 255f;\n\t\t\t\t\tdouble alpha = ((color0.getAlpha() * (1 - div)) + (color1\n\t\t\t\t\t\t\t.getAlpha() * div)) / 255f;\n\n\t\t\t\t\tcolor = new Color((float) red, (float) green, (float) blue,\n\t\t\t\t\t\t\t(float) alpha);\n\t\t\t\t}\n\t\t\t} else if (element.hasAttribute(\"ui.color\", Color.class)) {\n\t\t\t\tcolor = element.getAttribute(\"ui.color\");\n\t\t\t}\n\t\t} else if (element.hasAttribute(\"ui.color\", Color.class)) {\n\t\t\tcolor = element.getAttribute(\"ui.color\");\n\t\t}\n\n\t\treturn color;\n\t}\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "2",
                "int"
            ]
        ],
        "tokensMethodArguments": [
            [
                "group",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup"
            ],
            [
                "g",
                "java.awt",
                "Graphics2D"
            ],
            [
                "camera",
                "org.graphstream.ui.view",
                "Camera"
            ],
            [
                "element",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "interpolateColor",
                "org.graphstream.ui.swingViewer.basicRenderer",
                "ElementRenderer",
                "protected Color interpolateColor(StyleGroup group, GraphicElement element) {\n    Color color = group.getFillColor(0);\n    int n = group.getFillColorCount();\n    if (n > 1) {\n        if (element.hasNumber(\"ui.color\") && n > 1) {\n            double value = element.getNumber(\"ui.color\");\n            if (value < 0)\n                value = 0;\n            else if (value > 1)\n                value = 1;\n            if (value == 1) {\n                // Simplification,\n                color = group.getFillColor(n - 1);\n                // faster.\n            } else if (// If value == 0, color is already set\n            value != 0) // above.\n            {\n                double div = 1f / (n - 1);\n                int col = (int) (value / div);\n                div = (value - (div * col)) / div;\n                // div = value / div - col;\n                Color color0 = group.getFillColor(col);\n                Color color1 = group.getFillColor(col + 1);\n                double red = ((color0.getRed() * (1 - div)) + (color1.getRed() * div)) / 255f;\n                double green = ((color0.getGreen() * (1 - div)) + (color1.getGreen() * div)) / 255f;\n                double blue = ((color0.getBlue() * (1 - div)) + (color1.getBlue() * div)) / 255f;\n                double alpha = ((color0.getAlpha() * (1 - div)) + (color1.getAlpha() * div)) / 255f;\n                color = new Color((float) red, (float) green, (float) blue, (float) alpha);\n            }\n        } else if (element.hasAttribute(\"ui.color\", Color.class)) {\n            color = element.getAttribute(\"ui.color\");\n        }\n    } else if (element.hasAttribute(\"ui.color\", Color.class)) {\n        color = element.getAttribute(\"ui.color\");\n    }\n    return color;\n}"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "getId",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public String getId()"
            ],
            [
                "hasEventElements",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public boolean hasEventElements()"
            ],
            [
                "elementsEvents",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public Iterable<StyleGroup.ElementEvents> elementsEvents()"
            ],
            [
                "elementIsDynamic",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public boolean elementIsDynamic(Element arg0)"
            ],
            [
                "removeElement",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public Element removeElement(Element arg0)"
            ],
            [
                "getEventsFor",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public StyleGroup.ElementEvents getEventsFor(Element arg0)"
            ],
            [
                "bulkElements",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public Iterable<? extends Element> bulkElements()"
            ],
            [
                "getRenderer",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public GraphicElement.SwingElementRenderer getRenderer(String arg0)"
            ],
            [
                "iterator",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public Iterator<Element> iterator()"
            ],
            [
                "toString",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public String toString()"
            ],
            [
                "elementHasEvents",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public boolean elementHasEvents(Element arg0)"
            ],
            [
                "contains",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public boolean contains(String arg0)"
            ],
            [
                "dynamicElements",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public Iterable<Element> dynamicElements()"
            ],
            [
                "getValue",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public transient Object getValue(String arg0, String[] arg1)"
            ],
            [
                "getElementCount",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public int getElementCount()"
            ],
            [
                "isEmpty",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public boolean isEmpty()"
            ],
            [
                "isElementDynamic",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public boolean isElementDynamic(Element arg0)"
            ],
            [
                "getElement",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public Element getElement(String arg0)"
            ],
            [
                "getElementIterator",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public Iterator<? extends Element> getElementIterator()"
            ],
            [
                "contains",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public boolean contains(Element arg0)"
            ],
            [
                "hasDynamicElements",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public boolean hasDynamicElements()"
            ],
            [
                "toString",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public String toString(int arg0)"
            ],
            [
                "getType",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public Selector.Type getType()"
            ],
            [
                "removeRenderer",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public GraphicElement.SwingElementRenderer removeRenderer(String arg0)"
            ],
            [
                "elements",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public Iterable<? extends Element> elements()"
            ],
            [
                "getShadowMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.ShadowMode getShadowMode()"
            ],
            [
                "getSpriteOrientation",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.SpriteOrientation getSpriteOrientation()"
            ],
            [
                "getTextVisibilityMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.TextVisibilityMode getTextVisibilityMode()"
            ],
            [
                "getStrokeColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Colors getStrokeColor()"
            ],
            [
                "getTextVisibility",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getTextVisibility()"
            ],
            [
                "getValueForEvent",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "protected Object getValueForEvent(String arg0, String arg1)"
            ],
            [
                "getTextColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Colors getTextColor()"
            ],
            [
                "getFillColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Color getFillColor(int arg0)"
            ],
            [
                "getIcon",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public String getIcon()"
            ],
            [
                "getJComponent",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.JComponents getJComponent()"
            ],
            [
                "getTextBackgroundMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.TextBackgroundMode getTextBackgroundMode()"
            ],
            [
                "getTextOffset",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getTextOffset()"
            ],
            [
                "getArrowShape",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.ArrowShape getArrowShape()"
            ],
            [
                "getValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public transient Object getValue(String arg0, String[] arg1)"
            ],
            [
                "getStrokeColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Color getStrokeColor(int arg0)"
            ],
            [
                "getTextSize",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Value getTextSize()"
            ],
            [
                "getIconMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.IconMode getIconMode()"
            ],
            [
                "getShadowColorCount",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public int getShadowColorCount()"
            ],
            [
                "getFillMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.FillMode getFillMode()"
            ],
            [
                "getTextColorCount",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public int getTextColorCount()"
            ],
            [
                "getStrokeWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Value getStrokeWidth()"
            ],
            [
                "getTextBackgroundColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Colors getTextBackgroundColor()"
            ],
            [
                "getArrowSize",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getArrowSize()"
            ],
            [
                "getCanvasColorCount",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public int getCanvasColorCount()"
            ],
            [
                "getFillImage",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public String getFillImage()"
            ],
            [
                "getFillColors",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Colors getFillColors()"
            ],
            [
                "getFillColorCount",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public int getFillColorCount()"
            ],
            [
                "getCanvasColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Colors getCanvasColor()"
            ],
            [
                "getTextAlignment",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.TextAlignment getTextAlignment()"
            ],
            [
                "getStrokeMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.StrokeMode getStrokeMode()"
            ],
            [
                "getShadowWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Value getShadowWidth()"
            ],
            [
                "hasValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public transient boolean hasValue(String arg0, String[] arg1)"
            ],
            [
                "getShapePoints",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getShapePoints()"
            ],
            [
                "getTextFont",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public String getTextFont()"
            ],
            [
                "getShadowColors",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Colors getShadowColors()"
            ],
            [
                "toString",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public String toString()"
            ],
            [
                "getCanvasColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Color getCanvasColor(int arg0)"
            ],
            [
                "toString",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public String toString(int arg0)"
            ],
            [
                "getParent",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Rule getParent()"
            ],
            [
                "getShadowOffset",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getShadowOffset()"
            ],
            [
                "getPadding",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getPadding()"
            ],
            [
                "getSizeMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.SizeMode getSizeMode()"
            ],
            [
                "getVisibility",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getVisibility()"
            ],
            [
                "getVisibilityMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.VisibilityMode getVisibilityMode()"
            ],
            [
                "getTextStyle",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.TextStyle getTextStyle()"
            ],
            [
                "getSize",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getSize()"
            ],
            [
                "getShape",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.Shape getShape()"
            ],
            [
                "getTextPadding",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getTextPadding()"
            ],
            [
                "getArrowImage",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public String getArrowImage()"
            ],
            [
                "getTextBackgroundColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Color getTextBackgroundColor(int arg0)"
            ],
            [
                "getStrokeColorCount",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public int getStrokeColorCount()"
            ],
            [
                "getZIndex",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Integer getZIndex()"
            ],
            [
                "getTextColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Color getTextColor(int arg0)"
            ],
            [
                "getShadowColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Color getShadowColor(int arg0)"
            ],
            [
                "getTextMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StyleConstants.TextMode getTextMode()"
            ],
            [
                "iterator",
                "java.lang",
                "Iterable",
                "public abstract Iterator<T> iterator()"
            ],
            [
                "spliterator",
                "java.lang",
                "Iterable",
                "public default Spliterator<T> spliterator()"
            ],
            [
                "getTransform",
                "java.awt",
                "Graphics2D",
                "public abstract AffineTransform getTransform()"
            ],
            [
                "hit",
                "java.awt",
                "Graphics2D",
                "public abstract boolean hit(Rectangle arg0, Shape arg1, boolean arg2)"
            ],
            [
                "getPaint",
                "java.awt",
                "Graphics2D",
                "public abstract Paint getPaint()"
            ],
            [
                "getRenderingHint",
                "java.awt",
                "Graphics2D",
                "public abstract Object getRenderingHint(RenderingHints.Key arg0)"
            ],
            [
                "getComposite",
                "java.awt",
                "Graphics2D",
                "public abstract Composite getComposite()"
            ],
            [
                "getStroke",
                "java.awt",
                "Graphics2D",
                "public abstract Stroke getStroke()"
            ],
            [
                "drawImage",
                "java.awt",
                "Graphics2D",
                "public abstract boolean drawImage(Image arg0, AffineTransform arg1, ImageObserver arg2)"
            ],
            [
                "getFontRenderContext",
                "java.awt",
                "Graphics2D",
                "public abstract FontRenderContext getFontRenderContext()"
            ],
            [
                "getBackground",
                "java.awt",
                "Graphics2D",
                "public abstract Color getBackground()"
            ],
            [
                "getDeviceConfiguration",
                "java.awt",
                "Graphics2D",
                "public abstract GraphicsConfiguration getDeviceConfiguration()"
            ],
            [
                "getRenderingHints",
                "java.awt",
                "Graphics2D",
                "public abstract RenderingHints getRenderingHints()"
            ],
            [
                "getColor",
                "java.awt",
                "Graphics",
                "public abstract Color getColor()"
            ],
            [
                "drawImage",
                "java.awt",
                "Graphics",
                "public abstract boolean drawImage(Image arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, Color arg9, ImageObserver arg10)"
            ],
            [
                "create",
                "java.awt",
                "Graphics",
                "public Graphics create(int arg0, int arg1, int arg2, int arg3)"
            ],
            [
                "drawImage",
                "java.awt",
                "Graphics",
                "public abstract boolean drawImage(Image arg0, int arg1, int arg2, Color arg3, ImageObserver arg4)"
            ],
            [
                "drawImage",
                "java.awt",
                "Graphics",
                "public abstract boolean drawImage(Image arg0, int arg1, int arg2, int arg3, int arg4, Color arg5, ImageObserver arg6)"
            ],
            [
                "getClipBounds",
                "java.awt",
                "Graphics",
                "public Rectangle getClipBounds(Rectangle arg0)"
            ],
            [
                "hitClip",
                "java.awt",
                "Graphics",
                "public boolean hitClip(int arg0, int arg1, int arg2, int arg3)"
            ],
            [
                "getFontMetrics",
                "java.awt",
                "Graphics",
                "public abstract FontMetrics getFontMetrics(Font arg0)"
            ],
            [
                "toString",
                "java.awt",
                "Graphics",
                "public String toString()"
            ],
            [
                "getFont",
                "java.awt",
                "Graphics",
                "public abstract Font getFont()"
            ],
            [
                "create",
                "java.awt",
                "Graphics",
                "public abstract Graphics create()"
            ],
            [
                "drawImage",
                "java.awt",
                "Graphics",
                "public abstract boolean drawImage(Image arg0, int arg1, int arg2, int arg3, int arg4, ImageObserver arg5)"
            ],
            [
                "drawImage",
                "java.awt",
                "Graphics",
                "public abstract boolean drawImage(Image arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, ImageObserver arg9)"
            ],
            [
                "getClip",
                "java.awt",
                "Graphics",
                "public abstract Shape getClip()"
            ],
            [
                "getClipRect",
                "java.awt",
                "Graphics",
                "public Rectangle getClipRect()"
            ],
            [
                "drawImage",
                "java.awt",
                "Graphics",
                "public abstract boolean drawImage(Image arg0, int arg1, int arg2, ImageObserver arg3)"
            ],
            [
                "getFontMetrics",
                "java.awt",
                "Graphics",
                "public FontMetrics getFontMetrics()"
            ],
            [
                "getClipBounds",
                "java.awt",
                "Graphics",
                "public abstract Rectangle getClipBounds()"
            ],
            [
                "getViewRotation",
                "org.graphstream.ui.view",
                "Camera",
                "public abstract double getViewRotation()"
            ],
            [
                "getViewCenter",
                "org.graphstream.ui.view",
                "Camera",
                "public abstract Point3 getViewCenter()"
            ],
            [
                "getViewPercent",
                "org.graphstream.ui.view",
                "Camera",
                "public abstract double getViewPercent()"
            ],
            [
                "isVisible",
                "org.graphstream.ui.view",
                "Camera",
                "public abstract boolean isVisible(GraphicElement arg0)"
            ],
            [
                "transformPxToGu",
                "org.graphstream.ui.view",
                "Camera",
                "public abstract Point3 transformPxToGu(double arg0, double arg1)"
            ],
            [
                "getMetrics",
                "org.graphstream.ui.view",
                "Camera",
                "public abstract GraphMetrics getMetrics()"
            ],
            [
                "getGraphDimension",
                "org.graphstream.ui.view",
                "Camera",
                "public abstract double getGraphDimension()"
            ],
            [
                "transformGuToPx",
                "org.graphstream.ui.view",
                "Camera",
                "public abstract Point3 transformGuToPx(double arg0, double arg1, double arg2)"
            ],
            [
                "getComponent",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public Object getComponent()"
            ],
            [
                "myGraph",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public GraphicGraph myGraph()"
            ],
            [
                "nullAttributesAreErrors",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected boolean nullAttributesAreErrors()"
            ],
            [
                "getSelectorType",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract Selector.Type getSelectorType()"
            ],
            [
                "getLabel",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public String getLabel()"
            ],
            [
                "getX",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract double getX()"
            ],
            [
                "getY",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract double getY()"
            ],
            [
                "getStyle",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public StyleGroup getStyle()"
            ],
            [
                "getZ",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract double getZ()"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasAttribute(String arg0)"
            ],
            [
                "hasHash",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasHash(String arg0)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public <T> T getAttribute(String arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "toString",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public String toString()"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Iterable<String> getEachAttributeKey()"
            ],
            [
                "hasLabel",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasLabel(String arg0)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "getVector",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public int getAttributeCount()"
            ],
            [
                "hasVector",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasVector(String arg0)"
            ],
            [
                "getNumber",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public double getNumber(String arg0)"
            ],
            [
                "hasArray",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasArray(String arg0)"
            ],
            [
                "hasNumber",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasNumber(String arg0)"
            ],
            [
                "nullAttributesAreErrors",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected abstract boolean nullAttributesAreErrors()"
            ],
            [
                "getId",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public String getId()"
            ],
            [
                "getArray",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Object[] getArray(String arg0)"
            ],
            [
                "getLabel",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public String getLabel(String arg0)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "getHash",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Collection<String> getAttributeKeySet()"
            ],
            [
                "getIndex",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public int getIndex()"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "public abstract int getIndex()"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract double getNumber(String arg0)"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasLabel(String arg0)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0)"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "public abstract HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasHash(String arg0)"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "public abstract Object[] getArray(String arg0)"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "public abstract ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasArray(String arg0)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "public abstract int getAttributeCount()"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "public abstract String getId()"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract CharSequence getLabel(String arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "public abstract Collection<String> getAttributeKeySet()"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterable<String> getEachAttributeKey()"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasVector(String arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasNumber(String arg0)"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "hadEvents",
                "org.graphstream.ui.swingViewer.basicRenderer",
                "ElementRenderer",
                "// Attribute\n/**\n * Allow to know if an event began or ended.\n */\nprotected boolean hadEvents = false;"
            ],
            [
                "textFont",
                "org.graphstream.ui.swingViewer.basicRenderer",
                "ElementRenderer",
                "protected Font textFont;"
            ],
            [
                "textColor",
                "org.graphstream.ui.swingViewer.basicRenderer",
                "ElementRenderer",
                "protected Color textColor;"
            ],
            [
                "textSize",
                "org.graphstream.ui.swingViewer.basicRenderer",
                "ElementRenderer",
                "protected int textSize;"
            ],
            [
                "id",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "protected String id;"
            ],
            [
                "rules",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "protected ArrayList<Rule> rules;"
            ],
            [
                "elements",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "protected HashMap<String, Element> elements;"
            ],
            [
                "eventSet",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "protected StyleGroupSet.EventSet eventSet;"
            ],
            [
                "eventsFor",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "protected HashMap<Element, StyleGroup.ElementEvents> eventsFor;"
            ],
            [
                "dynamicOnes",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "protected HashSet<Element> dynamicOnes;"
            ],
            [
                "curEvents",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "protected String[] curEvents;"
            ],
            [
                "bulkElements",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "protected StyleGroup.BulkElements bulkElements;"
            ],
            [
                "renderers",
                "org.graphstream.ui.graphicGraph",
                "StyleGroup",
                "public HashMap<String, GraphicElement.SwingElementRenderer> renderers;"
            ],
            [
                "parent",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "protected Rule parent;"
            ],
            [
                "values",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "protected HashMap<String, Object> values;"
            ],
            [
                "alternates",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "protected HashMap<String, Rule> alternates;"
            ],
            [
                "mygraph",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected GraphicGraph mygraph;"
            ],
            [
                "label",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public String label;"
            ],
            [
                "style",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public StyleGroup style;"
            ],
            [
                "component",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public Object component;"
            ],
            [
                "hidden",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public boolean hidden;"
            ],
            [
                "id",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected String id;"
            ],
            [
                "attributes",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected HashMap<String, Object> attributes;"
            ],
            [
                "attributesBeingRemoved",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected ArrayList<String> attributesBeingRemoved;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 2761,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.ui.swingViewer.basicRenderer.shapes",
        "className": "Arrow",
        "javadocTag": "@param edge The edge.",
        "methodJavadoc": "    /**\n\t * Evaluate the position of the arrow to avoid putting it above or under the\n\t * target node.\n\t * \n\t * @param edge\n\t *            The edge.\n\t * @param metrics\n\t *            The metrics.\n\t * @return The length from the node centre along the edge to position the\n\t *         arrow.\n\t */",
        "methodSourceCode": "protected double evalTargetRadius(GraphicEdge edge, GraphMetrics metrics){\n    GraphicNode target = edge.to;\n    StyleGroup group = target.getStyle();\n    double w = metrics.lengthToGu(group.getSize(), 0);\n    double h = group.getSize().size() > 1 ? metrics.lengthToGu(group.getSize(), 1) : w;\n    if (w == h) {\n        double b = group.getStrokeMode() != StrokeMode.NONE ? metrics.lengthToGu(group.getStrokeWidth()) : 0;\n        return ((w / 2) + b);\n    } else {\n        return evalEllipseRadius(edge, w, h);\n    }\n}",
        "classJavadoc": "/**\n     * Compute the shape of the arrow.\n     *\n     * @param x\n     *            Point at which the edge crosses the node shape.\n     * @param y\n     *            Point at which the edge crosses the node shape.\n     * @param dx\n     *            The arrow vector (and length).\n     * @param dy\n     *            The arrow vector (and length).\n     */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.swingViewer.basicRenderer.shapes;\n\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.awt.geom.Path2D;\n\nimport org.graphstream.ui.graphicGraph.GraphicEdge;\nimport org.graphstream.ui.graphicGraph.GraphicNode;\nimport org.graphstream.ui.graphicGraph.StyleGroup;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleConstants.StrokeMode;\nimport org.graphstream.ui.swingViewer.util.GraphMetrics;\n\npublic class Arrow extends Shape {\n\tprotected Color fillColor = Color.BLACK;\n\n\tprotected Color strokeColor = Color.BLACK;\n\n\tprotected int lengthGu = 0;\n\n\tprotected int widthGu = 0;\n\n\tprotected double x, y;\n\n\tprotected Path2D.Float path = new Path2D.Float();\n\n\tpublic void setArrowLengthGu(int lengthGu) {\n\t\tthis.lengthGu = lengthGu;\n\t}\n\n\tpublic void setArrowWidthGu(int widthGu) {\n\t\tthis.widthGu = widthGu;\n\t}\n\n\tpublic void setFillColor(Color color) {\n\t\tfillColor = color;\n\t}\n\n\tpublic void setStrokeColor(Color color) {\n\t\tstrokeColor = color;\n\t}\n\n\t@Override\n\tpublic void renderFill(Graphics2D g, GraphMetrics metrics) {\n\t\tg.setColor(fillColor);\n\t\tg.fill(path);\n\t}\n\n\t@Override\n\tpublic void renderStroke(Graphics2D g, GraphMetrics metrics) {\n\t\tg.setColor(strokeColor);\n\t\tg.draw(path);\n\t}\n\n\t// Utility\n\n\tprotected void setPositionAndShape(GraphicEdge edge, GraphMetrics metrics) {\n\t\t// Compute the direction vector and some lengths.\n\n\t\tx = edge.to.x;\n\t\ty = edge.to.y;\n\t\tdouble vx = x - edge.from.x;\n\t\tdouble vy = y - edge.from.y;\n\t\tdouble off = evalTargetRadius(edge, metrics);\n\n\t\t// Normalise the vectors.\n\n\t\tdouble d = (double) Math.sqrt(vx * vx + vy * vy);\n\n\t\tvx /= d;\n\t\tvy /= d;\n\n\t\t// Choose an arrow \"length\".\n\n\t\tx -= vx * off;\n\t\ty -= vy * off;\n\n\t\tsetShapeAt(x, y, vx, vy);\n\t}\n\n\t/**\n\t * Compute the shape of the arrow.\n\t * \n\t * @param x\n\t *            Point at which the edge crosses the node shape.\n\t * @param y\n\t *            Point at which the edge crosses the node shape.\n\t * @param dx\n\t *            The arrow vector (and length).\n\t * @param dy\n\t *            The arrow vector (and length).\n\t */\n\tprotected void setShapeAt(double x, double y, double dx, double dy) {\n\t\t// Compute the edge vector (1) and the perpendicular vector (2).\n\n\t\tdouble dx2 = dy;\n\t\tdouble dy2 = -dx;\n\n\t\t// Normalise the vectors.\n\n\t\tdouble d2 = (double) Math.sqrt(dx2 * dx2 + dy2 * dy2);\n\n\t\tdx2 /= d2;\n\t\tdy2 /= d2;\n\n\t\t// Choose an arrow \"width\".\n\n\t\tdx2 *= widthGu;\n\t\tdy2 *= widthGu;\n\n\t\t// Create a polygon.\n\n\t\tpath.reset();\n\t\tpath.moveTo(x, y);\n\t\tpath.lineTo(x - dx + dx2, y - dy + dy2);\n\t\tpath.lineTo(x - dx - dx2, y - dy - dy2);\n\t\tpath.closePath();\n\t}\n\n\t/**\n\t * Evaluate the position of the arrow to avoid putting it above or under the\n\t * target node.\n\t * \n\t * @param edge\n\t *            The edge.\n\t * @param metrics\n\t *            The metrics.\n\t * @return The length from the node centre along the edge to position the\n\t *         arrow.\n\t */\n\tprotected double evalTargetRadius(GraphicEdge edge, GraphMetrics metrics) {\n\t\tGraphicNode target = edge.to;\n\t\tStyleGroup group = target.getStyle();\n\t\tdouble w = metrics.lengthToGu(group.getSize(), 0);\n\t\tdouble h = group.getSize().size() > 1 ? metrics.lengthToGu(\n\t\t\t\tgroup.getSize(), 1) : w;\n\n\t\tif (w == h) {\n\t\t\tdouble b = group.getStrokeMode() != StrokeMode.NONE ? metrics\n\t\t\t\t\t.lengthToGu(group.getStrokeWidth()) : 0;\n\t\t\treturn ((w / 2) + b);\n\t\t} else {\n\t\t\treturn evalEllipseRadius(edge, w, h);\n\t\t}\n\t}\n\n\t/**\n\t * Compute the length of a vector along the edge from the ellipse centre to\n\t * the intersection between the edge and the ellipse.\n\t * \n\t * @param edge\n\t *            The edge representing the vector.\n\t * @param w\n\t *            The ellipse first radius (width/2).\n\t * @param h\n\t *            The ellipse second radius (height/2).\n\t * @return The length of the radius along the edge vector.\n\t */\n\tprotected double evalEllipseRadius(GraphicEdge edge, double w, double h) {\n\t\t// Vector of the entering edge.\n\n\t\tdouble dx;\n\t\tdouble dy;\n\n\t\tdx = edge.to.x - edge.from.x;\n\t\tdy = edge.to.y - edge.from.y;\n\n\t\t// The entering edge must be deformed by the ellipse ratio to find the\n\t\t// correct angle.\n\n\t\tdy *= (w / h); // I searched a lot to find this line was missing ! Tsu !\n\t\t\t\t\t\t// This comment is in memory of this long search.\n\n\t\t// Find the angle of the entering vector with (1,0).\n\n\t\tdouble d = (double) Math.sqrt(dx * dx + dy * dy);\n\t\tdouble a = dx / d;\n\n\t\t// Compute the coordinates at which the entering vector and the ellipse\n\t\t// cross.\n\n\t\ta = (double) Math.acos(a);\n\t\tdx = (double) Math.cos(a) * w;\n\t\tdy = (double) Math.sin(a) * h;\n\n\t\t// The distance from the ellipse centre to the crossing point of the\n\t\t// ellipse and\n\t\t// vector. Yo !\n\n\t\treturn Math.sqrt(dx * dx + dy * dy);\n\t}\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "edge",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge"
            ],
            [
                "metrics",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "evalTargetRadius",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes",
                "Arrow",
                "/**\n * Evaluate the position of the arrow to avoid putting it above or under the\n * target node.\n *\n * @param edge\n *            The edge.\n * @param metrics\n *            The metrics.\n * @return The length from the node centre along the edge to position the\n *         arrow.\n */\nprotected double evalTargetRadius(GraphicEdge edge, GraphMetrics metrics) {\n    GraphicNode target = edge.to;\n    StyleGroup group = target.getStyle();\n    double w = metrics.lengthToGu(group.getSize(), 0);\n    double h = group.getSize().size() > 1 ? metrics.lengthToGu(group.getSize(), 1) : w;\n    if (w == h) {\n        double b = group.getStrokeMode() != StrokeMode.NONE ? metrics.lengthToGu(group.getStrokeWidth()) : 0;\n        return ((w / 2) + b);\n    } else {\n        return evalEllipseRadius(edge, w, h);\n    }\n}"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "evalEllipseRadius",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes",
                "Arrow",
                "/**\n * Compute the length of a vector along the edge from the ellipse centre to\n * the intersection between the edge and the ellipse.\n *\n * @param edge\n *            The edge representing the vector.\n * @param w\n *            The ellipse first radius (width/2).\n * @param h\n *            The ellipse second radius (height/2).\n * @return The length of the radius along the edge vector.\n */\nprotected double evalEllipseRadius(GraphicEdge edge, double w, double h) {\n    // Vector of the entering edge.\n    double dx;\n    double dy;\n    dx = edge.to.x - edge.from.x;\n    dy = edge.to.y - edge.from.y;\n    // The entering edge must be deformed by the ellipse ratio to find the\n    // correct angle.\n    // I searched a lot to find this line was missing ! Tsu !\n    dy *= (w / h);\n    // This comment is in memory of this long search.\n    // Find the angle of the entering vector with (1,0).\n    double d = (double) Math.sqrt(dx * dx + dy * dy);\n    double a = dx / d;\n    // Compute the coordinates at which the entering vector and the ellipse\n    // cross.\n    a = (double) Math.acos(a);\n    dx = (double) Math.cos(a) * w;\n    dy = (double) Math.sin(a) * h;\n    // The distance from the ellipse centre to the crossing point of the\n    // ellipse and\n    // vector. Yo !\n    return Math.sqrt(dx * dx + dy * dy);\n}"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "isLoop",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public boolean isLoop()"
            ],
            [
                "getSelectorType",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public Selector.Type getSelectorType()"
            ],
            [
                "getZ",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public double getZ()"
            ],
            [
                "otherNode",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public GraphicNode otherNode(GraphicNode arg0)"
            ],
            [
                "getX",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public double getX()"
            ],
            [
                "getGroup",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public GraphicEdge.EdgeGroup getGroup()"
            ],
            [
                "getOpposite",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public <T> T getOpposite(Node arg0)"
            ],
            [
                "getControlPoints",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public double[] getControlPoints()"
            ],
            [
                "isCurve",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public boolean isCurve()"
            ],
            [
                "getSourceNode",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public <T> T getSourceNode()"
            ],
            [
                "getTargetNode",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public <T> T getTargetNode()"
            ],
            [
                "getNode1",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public <T> T getNode1()"
            ],
            [
                "getY",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public double getY()"
            ],
            [
                "getNode0",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public <T> T getNode0()"
            ],
            [
                "getMultiIndex",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public int getMultiIndex()"
            ],
            [
                "isDirected",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public boolean isDirected()"
            ],
            [
                "getY",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract double getY()"
            ],
            [
                "getZ",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract double getZ()"
            ],
            [
                "getStyle",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public StyleGroup getStyle()"
            ],
            [
                "getSelectorType",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract Selector.Type getSelectorType()"
            ],
            [
                "getComponent",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public Object getComponent()"
            ],
            [
                "nullAttributesAreErrors",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected boolean nullAttributesAreErrors()"
            ],
            [
                "myGraph",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public GraphicGraph myGraph()"
            ],
            [
                "getLabel",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public String getLabel()"
            ],
            [
                "getX",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract double getX()"
            ],
            [
                "toString",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public String toString()"
            ],
            [
                "hasArray",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasArray(String arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public <T> T getAttribute(String arg0)"
            ],
            [
                "getLabel",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public String getLabel(String arg0)"
            ],
            [
                "getVector",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "getNumber",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public double getNumber(String arg0)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasAttribute(String arg0)"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Iterable<String> getEachAttributeKey()"
            ],
            [
                "nullAttributesAreErrors",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected abstract boolean nullAttributesAreErrors()"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Collection<String> getAttributeKeySet()"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "hasNumber",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasNumber(String arg0)"
            ],
            [
                "getArray",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Object[] getArray(String arg0)"
            ],
            [
                "hasVector",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasVector(String arg0)"
            ],
            [
                "hasHash",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasHash(String arg0)"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "getHash",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public int getAttributeCount()"
            ],
            [
                "getId",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public String getId()"
            ],
            [
                "getAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "getIndex",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public int getIndex()"
            ],
            [
                "hasLabel",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasLabel(String arg0)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0)"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract CharSequence getLabel(String arg0)"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasArray(String arg0)"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "public abstract Collection<String> getAttributeKeySet()"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasNumber(String arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "public abstract Object[] getArray(String arg0)"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasHash(String arg0)"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasLabel(String arg0)"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterable<String> getEachAttributeKey()"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0)"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "public abstract String getId()"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "public abstract int getIndex()"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "public abstract int getAttributeCount()"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract double getNumber(String arg0)"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "public abstract HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "public abstract ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasVector(String arg0)"
            ],
            [
                "getNode0",
                "org.graphstream.graph",
                "Edge",
                "public abstract <T> T getNode0()"
            ],
            [
                "isLoop",
                "org.graphstream.graph",
                "Edge",
                "public abstract boolean isLoop()"
            ],
            [
                "getNode1",
                "org.graphstream.graph",
                "Edge",
                "public abstract <T> T getNode1()"
            ],
            [
                "getTargetNode",
                "org.graphstream.graph",
                "Edge",
                "public abstract <T> T getTargetNode()"
            ],
            [
                "getSourceNode",
                "org.graphstream.graph",
                "Edge",
                "public abstract <T> T getSourceNode()"
            ],
            [
                "isDirected",
                "org.graphstream.graph",
                "Edge",
                "public abstract boolean isDirected()"
            ],
            [
                "getOpposite",
                "org.graphstream.graph",
                "Edge",
                "public abstract <T> T getOpposite(Node arg0)"
            ],
            [
                "toString",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public String toString()"
            ],
            [
                "graphWidthGU",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double graphWidthGU()"
            ],
            [
                "getHighPoint",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public Point3 getHighPoint()"
            ],
            [
                "lengthToPx",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double lengthToPx(double arg0, StyleConstants.Units arg1)"
            ],
            [
                "getSize",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public Vector3 getSize()"
            ],
            [
                "lengthToGu",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double lengthToGu(double arg0, StyleConstants.Units arg1)"
            ],
            [
                "lengthToPx",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double lengthToPx(Values arg0, int arg1)"
            ],
            [
                "getLowPoint",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public Point3 getLowPoint()"
            ],
            [
                "lengthToPx",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double lengthToPx(Value arg0)"
            ],
            [
                "graphHeightGU",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double graphHeightGU()"
            ],
            [
                "lengthToGu",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double lengthToGu(Value arg0)"
            ],
            [
                "lengthToGu",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double lengthToGu(Values arg0, int arg1)"
            ],
            [
                "getDiagonal",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double getDiagonal()"
            ],
            [
                "positionPixelToGu",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double positionPixelToGu(int arg0, int arg1)"
            ],
            [
                "graphDepthGU",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double graphDepthGU()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "fillColor",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes",
                "Arrow",
                "protected Color fillColor = Color.BLACK;"
            ],
            [
                "strokeColor",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes",
                "Arrow",
                "protected Color strokeColor = Color.BLACK;"
            ],
            [
                "lengthGu",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes",
                "Arrow",
                "protected int lengthGu = 0;"
            ],
            [
                "widthGu",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes",
                "Arrow",
                "protected int widthGu = 0;"
            ],
            [
                "x",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes",
                "Arrow",
                "protected double x, y;"
            ],
            [
                "y",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes",
                "Arrow",
                "protected double x, y;"
            ],
            [
                "path",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes",
                "Arrow",
                "protected Path2D.Float path = new Path2D.Float();"
            ],
            [
                "from",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public GraphicNode from;"
            ],
            [
                "to",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public GraphicNode to;"
            ],
            [
                "directed",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public boolean directed;"
            ],
            [
                "multi",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public int multi;"
            ],
            [
                "group",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public GraphicEdge.EdgeGroup group;"
            ],
            [
                "ctrl",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public double[] ctrl;"
            ],
            [
                "mygraph",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected GraphicGraph mygraph;"
            ],
            [
                "label",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public String label;"
            ],
            [
                "style",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public StyleGroup style;"
            ],
            [
                "component",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public Object component;"
            ],
            [
                "hidden",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public boolean hidden;"
            ],
            [
                "id",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected String id;"
            ],
            [
                "attributes",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected HashMap<String, Object> attributes;"
            ],
            [
                "attributesBeingRemoved",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected ArrayList<String> attributesBeingRemoved;"
            ],
            [
                "lo",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public Point3 lo;"
            ],
            [
                "hi",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public Point3 hi;"
            ],
            [
                "loVisible",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public Point3 loVisible;"
            ],
            [
                "hiVisible",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public Point3 hiVisible;"
            ],
            [
                "size",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public Vector3 size;"
            ],
            [
                "diagonal",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double diagonal;"
            ],
            [
                "viewport",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double[] viewport;"
            ],
            [
                "ratioPx2Gu",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double ratioPx2Gu;"
            ],
            [
                "px1",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double px1;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 2762,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.ui.swingViewer.basicRenderer.shapes",
        "className": "Arrow",
        "javadocTag": "@param metrics The metrics.",
        "methodJavadoc": "    /**\n\t * Evaluate the position of the arrow to avoid putting it above or under the\n\t * target node.\n\t * \n\t * @param edge\n\t *            The edge.\n\t * @param metrics\n\t *            The metrics.\n\t * @return The length from the node centre along the edge to position the\n\t *         arrow.\n\t */",
        "methodSourceCode": "protected double evalTargetRadius(GraphicEdge edge, GraphMetrics metrics){\n    GraphicNode target = edge.to;\n    StyleGroup group = target.getStyle();\n    double w = metrics.lengthToGu(group.getSize(), 0);\n    double h = group.getSize().size() > 1 ? metrics.lengthToGu(group.getSize(), 1) : w;\n    if (w == h) {\n        double b = group.getStrokeMode() != StrokeMode.NONE ? metrics.lengthToGu(group.getStrokeWidth()) : 0;\n        return ((w / 2) + b);\n    } else {\n        return evalEllipseRadius(edge, w, h);\n    }\n}",
        "classJavadoc": "/**\n     * Compute the shape of the arrow.\n     *\n     * @param x\n     *            Point at which the edge crosses the node shape.\n     * @param y\n     *            Point at which the edge crosses the node shape.\n     * @param dx\n     *            The arrow vector (and length).\n     * @param dy\n     *            The arrow vector (and length).\n     */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.swingViewer.basicRenderer.shapes;\n\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.awt.geom.Path2D;\n\nimport org.graphstream.ui.graphicGraph.GraphicEdge;\nimport org.graphstream.ui.graphicGraph.GraphicNode;\nimport org.graphstream.ui.graphicGraph.StyleGroup;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleConstants.StrokeMode;\nimport org.graphstream.ui.swingViewer.util.GraphMetrics;\n\npublic class Arrow extends Shape {\n\tprotected Color fillColor = Color.BLACK;\n\n\tprotected Color strokeColor = Color.BLACK;\n\n\tprotected int lengthGu = 0;\n\n\tprotected int widthGu = 0;\n\n\tprotected double x, y;\n\n\tprotected Path2D.Float path = new Path2D.Float();\n\n\tpublic void setArrowLengthGu(int lengthGu) {\n\t\tthis.lengthGu = lengthGu;\n\t}\n\n\tpublic void setArrowWidthGu(int widthGu) {\n\t\tthis.widthGu = widthGu;\n\t}\n\n\tpublic void setFillColor(Color color) {\n\t\tfillColor = color;\n\t}\n\n\tpublic void setStrokeColor(Color color) {\n\t\tstrokeColor = color;\n\t}\n\n\t@Override\n\tpublic void renderFill(Graphics2D g, GraphMetrics metrics) {\n\t\tg.setColor(fillColor);\n\t\tg.fill(path);\n\t}\n\n\t@Override\n\tpublic void renderStroke(Graphics2D g, GraphMetrics metrics) {\n\t\tg.setColor(strokeColor);\n\t\tg.draw(path);\n\t}\n\n\t// Utility\n\n\tprotected void setPositionAndShape(GraphicEdge edge, GraphMetrics metrics) {\n\t\t// Compute the direction vector and some lengths.\n\n\t\tx = edge.to.x;\n\t\ty = edge.to.y;\n\t\tdouble vx = x - edge.from.x;\n\t\tdouble vy = y - edge.from.y;\n\t\tdouble off = evalTargetRadius(edge, metrics);\n\n\t\t// Normalise the vectors.\n\n\t\tdouble d = (double) Math.sqrt(vx * vx + vy * vy);\n\n\t\tvx /= d;\n\t\tvy /= d;\n\n\t\t// Choose an arrow \"length\".\n\n\t\tx -= vx * off;\n\t\ty -= vy * off;\n\n\t\tsetShapeAt(x, y, vx, vy);\n\t}\n\n\t/**\n\t * Compute the shape of the arrow.\n\t * \n\t * @param x\n\t *            Point at which the edge crosses the node shape.\n\t * @param y\n\t *            Point at which the edge crosses the node shape.\n\t * @param dx\n\t *            The arrow vector (and length).\n\t * @param dy\n\t *            The arrow vector (and length).\n\t */\n\tprotected void setShapeAt(double x, double y, double dx, double dy) {\n\t\t// Compute the edge vector (1) and the perpendicular vector (2).\n\n\t\tdouble dx2 = dy;\n\t\tdouble dy2 = -dx;\n\n\t\t// Normalise the vectors.\n\n\t\tdouble d2 = (double) Math.sqrt(dx2 * dx2 + dy2 * dy2);\n\n\t\tdx2 /= d2;\n\t\tdy2 /= d2;\n\n\t\t// Choose an arrow \"width\".\n\n\t\tdx2 *= widthGu;\n\t\tdy2 *= widthGu;\n\n\t\t// Create a polygon.\n\n\t\tpath.reset();\n\t\tpath.moveTo(x, y);\n\t\tpath.lineTo(x - dx + dx2, y - dy + dy2);\n\t\tpath.lineTo(x - dx - dx2, y - dy - dy2);\n\t\tpath.closePath();\n\t}\n\n\t/**\n\t * Evaluate the position of the arrow to avoid putting it above or under the\n\t * target node.\n\t * \n\t * @param edge\n\t *            The edge.\n\t * @param metrics\n\t *            The metrics.\n\t * @return The length from the node centre along the edge to position the\n\t *         arrow.\n\t */\n\tprotected double evalTargetRadius(GraphicEdge edge, GraphMetrics metrics) {\n\t\tGraphicNode target = edge.to;\n\t\tStyleGroup group = target.getStyle();\n\t\tdouble w = metrics.lengthToGu(group.getSize(), 0);\n\t\tdouble h = group.getSize().size() > 1 ? metrics.lengthToGu(\n\t\t\t\tgroup.getSize(), 1) : w;\n\n\t\tif (w == h) {\n\t\t\tdouble b = group.getStrokeMode() != StrokeMode.NONE ? metrics\n\t\t\t\t\t.lengthToGu(group.getStrokeWidth()) : 0;\n\t\t\treturn ((w / 2) + b);\n\t\t} else {\n\t\t\treturn evalEllipseRadius(edge, w, h);\n\t\t}\n\t}\n\n\t/**\n\t * Compute the length of a vector along the edge from the ellipse centre to\n\t * the intersection between the edge and the ellipse.\n\t * \n\t * @param edge\n\t *            The edge representing the vector.\n\t * @param w\n\t *            The ellipse first radius (width/2).\n\t * @param h\n\t *            The ellipse second radius (height/2).\n\t * @return The length of the radius along the edge vector.\n\t */\n\tprotected double evalEllipseRadius(GraphicEdge edge, double w, double h) {\n\t\t// Vector of the entering edge.\n\n\t\tdouble dx;\n\t\tdouble dy;\n\n\t\tdx = edge.to.x - edge.from.x;\n\t\tdy = edge.to.y - edge.from.y;\n\n\t\t// The entering edge must be deformed by the ellipse ratio to find the\n\t\t// correct angle.\n\n\t\tdy *= (w / h); // I searched a lot to find this line was missing ! Tsu !\n\t\t\t\t\t\t// This comment is in memory of this long search.\n\n\t\t// Find the angle of the entering vector with (1,0).\n\n\t\tdouble d = (double) Math.sqrt(dx * dx + dy * dy);\n\t\tdouble a = dx / d;\n\n\t\t// Compute the coordinates at which the entering vector and the ellipse\n\t\t// cross.\n\n\t\ta = (double) Math.acos(a);\n\t\tdx = (double) Math.cos(a) * w;\n\t\tdy = (double) Math.sin(a) * h;\n\n\t\t// The distance from the ellipse centre to the crossing point of the\n\t\t// ellipse and\n\t\t// vector. Yo !\n\n\t\treturn Math.sqrt(dx * dx + dy * dy);\n\t}\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "edge",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge"
            ],
            [
                "metrics",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "evalEllipseRadius",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes",
                "Arrow",
                "/**\n * Compute the length of a vector along the edge from the ellipse centre to\n * the intersection between the edge and the ellipse.\n *\n * @param edge\n *            The edge representing the vector.\n * @param w\n *            The ellipse first radius (width/2).\n * @param h\n *            The ellipse second radius (height/2).\n * @return The length of the radius along the edge vector.\n */\nprotected double evalEllipseRadius(GraphicEdge edge, double w, double h) {\n    // Vector of the entering edge.\n    double dx;\n    double dy;\n    dx = edge.to.x - edge.from.x;\n    dy = edge.to.y - edge.from.y;\n    // The entering edge must be deformed by the ellipse ratio to find the\n    // correct angle.\n    // I searched a lot to find this line was missing ! Tsu !\n    dy *= (w / h);\n    // This comment is in memory of this long search.\n    // Find the angle of the entering vector with (1,0).\n    double d = (double) Math.sqrt(dx * dx + dy * dy);\n    double a = dx / d;\n    // Compute the coordinates at which the entering vector and the ellipse\n    // cross.\n    a = (double) Math.acos(a);\n    dx = (double) Math.cos(a) * w;\n    dy = (double) Math.sin(a) * h;\n    // The distance from the ellipse centre to the crossing point of the\n    // ellipse and\n    // vector. Yo !\n    return Math.sqrt(dx * dx + dy * dy);\n}"
            ],
            [
                "evalTargetRadius",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes",
                "Arrow",
                "/**\n * Evaluate the position of the arrow to avoid putting it above or under the\n * target node.\n *\n * @param edge\n *            The edge.\n * @param metrics\n *            The metrics.\n * @return The length from the node centre along the edge to position the\n *         arrow.\n */\nprotected double evalTargetRadius(GraphicEdge edge, GraphMetrics metrics) {\n    GraphicNode target = edge.to;\n    StyleGroup group = target.getStyle();\n    double w = metrics.lengthToGu(group.getSize(), 0);\n    double h = group.getSize().size() > 1 ? metrics.lengthToGu(group.getSize(), 1) : w;\n    if (w == h) {\n        double b = group.getStrokeMode() != StrokeMode.NONE ? metrics.lengthToGu(group.getStrokeWidth()) : 0;\n        return ((w / 2) + b);\n    } else {\n        return evalEllipseRadius(edge, w, h);\n    }\n}"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getOpposite",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public <T> T getOpposite(Node arg0)"
            ],
            [
                "isDirected",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public boolean isDirected()"
            ],
            [
                "getY",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public double getY()"
            ],
            [
                "getControlPoints",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public double[] getControlPoints()"
            ],
            [
                "getZ",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public double getZ()"
            ],
            [
                "getSourceNode",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public <T> T getSourceNode()"
            ],
            [
                "getGroup",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public GraphicEdge.EdgeGroup getGroup()"
            ],
            [
                "getNode0",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public <T> T getNode0()"
            ],
            [
                "getMultiIndex",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public int getMultiIndex()"
            ],
            [
                "getTargetNode",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public <T> T getTargetNode()"
            ],
            [
                "isLoop",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public boolean isLoop()"
            ],
            [
                "getNode1",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public <T> T getNode1()"
            ],
            [
                "otherNode",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public GraphicNode otherNode(GraphicNode arg0)"
            ],
            [
                "isCurve",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public boolean isCurve()"
            ],
            [
                "getSelectorType",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public Selector.Type getSelectorType()"
            ],
            [
                "getX",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public double getX()"
            ],
            [
                "getX",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract double getX()"
            ],
            [
                "getStyle",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public StyleGroup getStyle()"
            ],
            [
                "getY",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract double getY()"
            ],
            [
                "nullAttributesAreErrors",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected boolean nullAttributesAreErrors()"
            ],
            [
                "myGraph",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public GraphicGraph myGraph()"
            ],
            [
                "getComponent",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public Object getComponent()"
            ],
            [
                "getLabel",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public String getLabel()"
            ],
            [
                "getZ",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract double getZ()"
            ],
            [
                "getSelectorType",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract Selector.Type getSelectorType()"
            ],
            [
                "getHash",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Iterable<String> getEachAttributeKey()"
            ],
            [
                "toString",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public String toString()"
            ],
            [
                "getNumber",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public double getNumber(String arg0)"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Collection<String> getAttributeKeySet()"
            ],
            [
                "hasHash",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasHash(String arg0)"
            ],
            [
                "hasNumber",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasNumber(String arg0)"
            ],
            [
                "nullAttributesAreErrors",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected abstract boolean nullAttributesAreErrors()"
            ],
            [
                "getIndex",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public int getIndex()"
            ],
            [
                "getLabel",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public String getLabel(String arg0)"
            ],
            [
                "hasVector",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasVector(String arg0)"
            ],
            [
                "getVector",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "getArray",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Object[] getArray(String arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public <T> T getAttribute(String arg0)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasAttribute(String arg0)"
            ],
            [
                "hasArray",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasArray(String arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public int getAttributeCount()"
            ],
            [
                "hasLabel",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasLabel(String arg0)"
            ],
            [
                "getId",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public String getId()"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0)"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "public abstract HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasHash(String arg0)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract double getNumber(String arg0)"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasVector(String arg0)"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasNumber(String arg0)"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterable<String> getEachAttributeKey()"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasArray(String arg0)"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "public abstract String getId()"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "public abstract Collection<String> getAttributeKeySet()"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract CharSequence getLabel(String arg0)"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "public abstract int getAttributeCount()"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "public abstract int getIndex()"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "public abstract Object[] getArray(String arg0)"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0)"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasLabel(String arg0)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "public abstract ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "isLoop",
                "org.graphstream.graph",
                "Edge",
                "public abstract boolean isLoop()"
            ],
            [
                "isDirected",
                "org.graphstream.graph",
                "Edge",
                "public abstract boolean isDirected()"
            ],
            [
                "getNode1",
                "org.graphstream.graph",
                "Edge",
                "public abstract <T> T getNode1()"
            ],
            [
                "getTargetNode",
                "org.graphstream.graph",
                "Edge",
                "public abstract <T> T getTargetNode()"
            ],
            [
                "getOpposite",
                "org.graphstream.graph",
                "Edge",
                "public abstract <T> T getOpposite(Node arg0)"
            ],
            [
                "getNode0",
                "org.graphstream.graph",
                "Edge",
                "public abstract <T> T getNode0()"
            ],
            [
                "getSourceNode",
                "org.graphstream.graph",
                "Edge",
                "public abstract <T> T getSourceNode()"
            ],
            [
                "toString",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public String toString()"
            ],
            [
                "lengthToGu",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double lengthToGu(Value arg0)"
            ],
            [
                "graphWidthGU",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double graphWidthGU()"
            ],
            [
                "getDiagonal",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double getDiagonal()"
            ],
            [
                "getLowPoint",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public Point3 getLowPoint()"
            ],
            [
                "lengthToGu",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double lengthToGu(Values arg0, int arg1)"
            ],
            [
                "positionPixelToGu",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double positionPixelToGu(int arg0, int arg1)"
            ],
            [
                "getSize",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public Vector3 getSize()"
            ],
            [
                "lengthToPx",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double lengthToPx(Value arg0)"
            ],
            [
                "graphHeightGU",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double graphHeightGU()"
            ],
            [
                "graphDepthGU",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double graphDepthGU()"
            ],
            [
                "lengthToPx",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double lengthToPx(Values arg0, int arg1)"
            ],
            [
                "lengthToGu",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double lengthToGu(double arg0, StyleConstants.Units arg1)"
            ],
            [
                "lengthToPx",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double lengthToPx(double arg0, StyleConstants.Units arg1)"
            ],
            [
                "getHighPoint",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public Point3 getHighPoint()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "fillColor",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes",
                "Arrow",
                "protected Color fillColor = Color.BLACK;"
            ],
            [
                "strokeColor",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes",
                "Arrow",
                "protected Color strokeColor = Color.BLACK;"
            ],
            [
                "lengthGu",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes",
                "Arrow",
                "protected int lengthGu = 0;"
            ],
            [
                "widthGu",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes",
                "Arrow",
                "protected int widthGu = 0;"
            ],
            [
                "x",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes",
                "Arrow",
                "protected double x, y;"
            ],
            [
                "y",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes",
                "Arrow",
                "protected double x, y;"
            ],
            [
                "path",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes",
                "Arrow",
                "protected Path2D.Float path = new Path2D.Float();"
            ],
            [
                "from",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public GraphicNode from;"
            ],
            [
                "to",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public GraphicNode to;"
            ],
            [
                "directed",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public boolean directed;"
            ],
            [
                "multi",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public int multi;"
            ],
            [
                "group",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public GraphicEdge.EdgeGroup group;"
            ],
            [
                "ctrl",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public double[] ctrl;"
            ],
            [
                "mygraph",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected GraphicGraph mygraph;"
            ],
            [
                "label",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public String label;"
            ],
            [
                "style",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public StyleGroup style;"
            ],
            [
                "component",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public Object component;"
            ],
            [
                "hidden",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public boolean hidden;"
            ],
            [
                "id",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected String id;"
            ],
            [
                "attributes",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected HashMap<String, Object> attributes;"
            ],
            [
                "attributesBeingRemoved",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected ArrayList<String> attributesBeingRemoved;"
            ],
            [
                "lo",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public Point3 lo;"
            ],
            [
                "hi",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public Point3 hi;"
            ],
            [
                "loVisible",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public Point3 loVisible;"
            ],
            [
                "hiVisible",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public Point3 hiVisible;"
            ],
            [
                "size",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public Vector3 size;"
            ],
            [
                "diagonal",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double diagonal;"
            ],
            [
                "viewport",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double[] viewport;"
            ],
            [
                "ratioPx2Gu",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double ratioPx2Gu;"
            ],
            [
                "px1",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double px1;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 2764,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.ui.swingViewer.basicRenderer.shapes",
        "className": "Arrow",
        "javadocTag": "@param edge The edge representing the vector.",
        "methodJavadoc": "    /**\n\t * Compute the length of a vector along the edge from the ellipse centre to\n\t * the intersection between the edge and the ellipse.\n\t * \n\t * @param edge\n\t *            The edge representing the vector.\n\t * @param w\n\t *            The ellipse first radius (width/2).\n\t * @param h\n\t *            The ellipse second radius (height/2).\n\t * @return The length of the radius along the edge vector.\n\t */",
        "methodSourceCode": "protected double evalEllipseRadius(GraphicEdge edge, double w, double h){\n    // Vector of the entering edge.\n    double dx;\n    double dy;\n    dx = edge.to.x - edge.from.x;\n    dy = edge.to.y - edge.from.y;\n    // The entering edge must be deformed by the ellipse ratio to find the\n    // correct angle.\n    // I searched a lot to find this line was missing ! Tsu !\n    dy *= (w / h);\n    // This comment is in memory of this long search.\n    // Find the angle of the entering vector with (1,0).\n    double d = (double) Math.sqrt(dx * dx + dy * dy);\n    double a = dx / d;\n    // Compute the coordinates at which the entering vector and the ellipse\n    // cross.\n    a = (double) Math.acos(a);\n    dx = (double) Math.cos(a) * w;\n    dy = (double) Math.sin(a) * h;\n    // The distance from the ellipse centre to the crossing point of the\n    // ellipse and\n    // vector. Yo !\n    return Math.sqrt(dx * dx + dy * dy);\n}",
        "classJavadoc": "/**\n     * Compute the shape of the arrow.\n     *\n     * @param x\n     *            Point at which the edge crosses the node shape.\n     * @param y\n     *            Point at which the edge crosses the node shape.\n     * @param dx\n     *            The arrow vector (and length).\n     * @param dy\n     *            The arrow vector (and length).\n     */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.swingViewer.basicRenderer.shapes;\n\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.awt.geom.Path2D;\n\nimport org.graphstream.ui.graphicGraph.GraphicEdge;\nimport org.graphstream.ui.graphicGraph.GraphicNode;\nimport org.graphstream.ui.graphicGraph.StyleGroup;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleConstants.StrokeMode;\nimport org.graphstream.ui.swingViewer.util.GraphMetrics;\n\npublic class Arrow extends Shape {\n\tprotected Color fillColor = Color.BLACK;\n\n\tprotected Color strokeColor = Color.BLACK;\n\n\tprotected int lengthGu = 0;\n\n\tprotected int widthGu = 0;\n\n\tprotected double x, y;\n\n\tprotected Path2D.Float path = new Path2D.Float();\n\n\tpublic void setArrowLengthGu(int lengthGu) {\n\t\tthis.lengthGu = lengthGu;\n\t}\n\n\tpublic void setArrowWidthGu(int widthGu) {\n\t\tthis.widthGu = widthGu;\n\t}\n\n\tpublic void setFillColor(Color color) {\n\t\tfillColor = color;\n\t}\n\n\tpublic void setStrokeColor(Color color) {\n\t\tstrokeColor = color;\n\t}\n\n\t@Override\n\tpublic void renderFill(Graphics2D g, GraphMetrics metrics) {\n\t\tg.setColor(fillColor);\n\t\tg.fill(path);\n\t}\n\n\t@Override\n\tpublic void renderStroke(Graphics2D g, GraphMetrics metrics) {\n\t\tg.setColor(strokeColor);\n\t\tg.draw(path);\n\t}\n\n\t// Utility\n\n\tprotected void setPositionAndShape(GraphicEdge edge, GraphMetrics metrics) {\n\t\t// Compute the direction vector and some lengths.\n\n\t\tx = edge.to.x;\n\t\ty = edge.to.y;\n\t\tdouble vx = x - edge.from.x;\n\t\tdouble vy = y - edge.from.y;\n\t\tdouble off = evalTargetRadius(edge, metrics);\n\n\t\t// Normalise the vectors.\n\n\t\tdouble d = (double) Math.sqrt(vx * vx + vy * vy);\n\n\t\tvx /= d;\n\t\tvy /= d;\n\n\t\t// Choose an arrow \"length\".\n\n\t\tx -= vx * off;\n\t\ty -= vy * off;\n\n\t\tsetShapeAt(x, y, vx, vy);\n\t}\n\n\t/**\n\t * Compute the shape of the arrow.\n\t * \n\t * @param x\n\t *            Point at which the edge crosses the node shape.\n\t * @param y\n\t *            Point at which the edge crosses the node shape.\n\t * @param dx\n\t *            The arrow vector (and length).\n\t * @param dy\n\t *            The arrow vector (and length).\n\t */\n\tprotected void setShapeAt(double x, double y, double dx, double dy) {\n\t\t// Compute the edge vector (1) and the perpendicular vector (2).\n\n\t\tdouble dx2 = dy;\n\t\tdouble dy2 = -dx;\n\n\t\t// Normalise the vectors.\n\n\t\tdouble d2 = (double) Math.sqrt(dx2 * dx2 + dy2 * dy2);\n\n\t\tdx2 /= d2;\n\t\tdy2 /= d2;\n\n\t\t// Choose an arrow \"width\".\n\n\t\tdx2 *= widthGu;\n\t\tdy2 *= widthGu;\n\n\t\t// Create a polygon.\n\n\t\tpath.reset();\n\t\tpath.moveTo(x, y);\n\t\tpath.lineTo(x - dx + dx2, y - dy + dy2);\n\t\tpath.lineTo(x - dx - dx2, y - dy - dy2);\n\t\tpath.closePath();\n\t}\n\n\t/**\n\t * Evaluate the position of the arrow to avoid putting it above or under the\n\t * target node.\n\t * \n\t * @param edge\n\t *            The edge.\n\t * @param metrics\n\t *            The metrics.\n\t * @return The length from the node centre along the edge to position the\n\t *         arrow.\n\t */\n\tprotected double evalTargetRadius(GraphicEdge edge, GraphMetrics metrics) {\n\t\tGraphicNode target = edge.to;\n\t\tStyleGroup group = target.getStyle();\n\t\tdouble w = metrics.lengthToGu(group.getSize(), 0);\n\t\tdouble h = group.getSize().size() > 1 ? metrics.lengthToGu(\n\t\t\t\tgroup.getSize(), 1) : w;\n\n\t\tif (w == h) {\n\t\t\tdouble b = group.getStrokeMode() != StrokeMode.NONE ? metrics\n\t\t\t\t\t.lengthToGu(group.getStrokeWidth()) : 0;\n\t\t\treturn ((w / 2) + b);\n\t\t} else {\n\t\t\treturn evalEllipseRadius(edge, w, h);\n\t\t}\n\t}\n\n\t/**\n\t * Compute the length of a vector along the edge from the ellipse centre to\n\t * the intersection between the edge and the ellipse.\n\t * \n\t * @param edge\n\t *            The edge representing the vector.\n\t * @param w\n\t *            The ellipse first radius (width/2).\n\t * @param h\n\t *            The ellipse second radius (height/2).\n\t * @return The length of the radius along the edge vector.\n\t */\n\tprotected double evalEllipseRadius(GraphicEdge edge, double w, double h) {\n\t\t// Vector of the entering edge.\n\n\t\tdouble dx;\n\t\tdouble dy;\n\n\t\tdx = edge.to.x - edge.from.x;\n\t\tdy = edge.to.y - edge.from.y;\n\n\t\t// The entering edge must be deformed by the ellipse ratio to find the\n\t\t// correct angle.\n\n\t\tdy *= (w / h); // I searched a lot to find this line was missing ! Tsu !\n\t\t\t\t\t\t// This comment is in memory of this long search.\n\n\t\t// Find the angle of the entering vector with (1,0).\n\n\t\tdouble d = (double) Math.sqrt(dx * dx + dy * dy);\n\t\tdouble a = dx / d;\n\n\t\t// Compute the coordinates at which the entering vector and the ellipse\n\t\t// cross.\n\n\t\ta = (double) Math.acos(a);\n\t\tdx = (double) Math.cos(a) * w;\n\t\tdy = (double) Math.sin(a) * h;\n\n\t\t// The distance from the ellipse centre to the crossing point of the\n\t\t// ellipse and\n\t\t// vector. Yo !\n\n\t\treturn Math.sqrt(dx * dx + dy * dy);\n\t}\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "2",
                "int"
            ],
            [
                "2",
                "int"
            ]
        ],
        "tokensMethodArguments": [
            [
                "edge",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge"
            ],
            [
                "w",
                "",
                "double"
            ],
            [
                "h",
                "",
                "double"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "evalEllipseRadius",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes",
                "Arrow",
                "/**\n * Compute the length of a vector along the edge from the ellipse centre to\n * the intersection between the edge and the ellipse.\n *\n * @param edge\n *            The edge representing the vector.\n * @param w\n *            The ellipse first radius (width/2).\n * @param h\n *            The ellipse second radius (height/2).\n * @return The length of the radius along the edge vector.\n */\nprotected double evalEllipseRadius(GraphicEdge edge, double w, double h) {\n    // Vector of the entering edge.\n    double dx;\n    double dy;\n    dx = edge.to.x - edge.from.x;\n    dy = edge.to.y - edge.from.y;\n    // The entering edge must be deformed by the ellipse ratio to find the\n    // correct angle.\n    // I searched a lot to find this line was missing ! Tsu !\n    dy *= (w / h);\n    // This comment is in memory of this long search.\n    // Find the angle of the entering vector with (1,0).\n    double d = (double) Math.sqrt(dx * dx + dy * dy);\n    double a = dx / d;\n    // Compute the coordinates at which the entering vector and the ellipse\n    // cross.\n    a = (double) Math.acos(a);\n    dx = (double) Math.cos(a) * w;\n    dy = (double) Math.sin(a) * h;\n    // The distance from the ellipse centre to the crossing point of the\n    // ellipse and\n    // vector. Yo !\n    return Math.sqrt(dx * dx + dy * dy);\n}"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "evalTargetRadius",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes",
                "Arrow",
                "/**\n * Evaluate the position of the arrow to avoid putting it above or under the\n * target node.\n *\n * @param edge\n *            The edge.\n * @param metrics\n *            The metrics.\n * @return The length from the node centre along the edge to position the\n *         arrow.\n */\nprotected double evalTargetRadius(GraphicEdge edge, GraphMetrics metrics) {\n    GraphicNode target = edge.to;\n    StyleGroup group = target.getStyle();\n    double w = metrics.lengthToGu(group.getSize(), 0);\n    double h = group.getSize().size() > 1 ? metrics.lengthToGu(group.getSize(), 1) : w;\n    if (w == h) {\n        double b = group.getStrokeMode() != StrokeMode.NONE ? metrics.lengthToGu(group.getStrokeWidth()) : 0;\n        return ((w / 2) + b);\n    } else {\n        return evalEllipseRadius(edge, w, h);\n    }\n}"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "otherNode",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public GraphicNode otherNode(GraphicNode arg0)"
            ],
            [
                "getControlPoints",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public double[] getControlPoints()"
            ],
            [
                "getMultiIndex",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public int getMultiIndex()"
            ],
            [
                "getSelectorType",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public Selector.Type getSelectorType()"
            ],
            [
                "getY",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public double getY()"
            ],
            [
                "isDirected",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public boolean isDirected()"
            ],
            [
                "getX",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public double getX()"
            ],
            [
                "getSourceNode",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public <T> T getSourceNode()"
            ],
            [
                "getOpposite",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public <T> T getOpposite(Node arg0)"
            ],
            [
                "getTargetNode",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public <T> T getTargetNode()"
            ],
            [
                "isLoop",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public boolean isLoop()"
            ],
            [
                "getNode0",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public <T> T getNode0()"
            ],
            [
                "getZ",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public double getZ()"
            ],
            [
                "isCurve",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public boolean isCurve()"
            ],
            [
                "getNode1",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public <T> T getNode1()"
            ],
            [
                "getGroup",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public GraphicEdge.EdgeGroup getGroup()"
            ],
            [
                "nullAttributesAreErrors",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected boolean nullAttributesAreErrors()"
            ],
            [
                "getY",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract double getY()"
            ],
            [
                "getComponent",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public Object getComponent()"
            ],
            [
                "getX",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract double getX()"
            ],
            [
                "getSelectorType",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract Selector.Type getSelectorType()"
            ],
            [
                "getLabel",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public String getLabel()"
            ],
            [
                "getStyle",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public StyleGroup getStyle()"
            ],
            [
                "myGraph",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public GraphicGraph myGraph()"
            ],
            [
                "getZ",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract double getZ()"
            ],
            [
                "getHash",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "hasArray",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasArray(String arg0)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "nullAttributesAreErrors",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected abstract boolean nullAttributesAreErrors()"
            ],
            [
                "getAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public <T> T getAttribute(String arg0)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasAttribute(String arg0)"
            ],
            [
                "hasVector",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasVector(String arg0)"
            ],
            [
                "getIndex",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public int getIndex()"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "getAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "toString",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public String toString()"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "hasNumber",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasNumber(String arg0)"
            ],
            [
                "getArray",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Object[] getArray(String arg0)"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public int getAttributeCount()"
            ],
            [
                "getLabel",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public String getLabel(String arg0)"
            ],
            [
                "getId",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public String getId()"
            ],
            [
                "hasHash",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasHash(String arg0)"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Iterable<String> getEachAttributeKey()"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Collection<String> getAttributeKeySet()"
            ],
            [
                "getNumber",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public double getNumber(String arg0)"
            ],
            [
                "hasLabel",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasLabel(String arg0)"
            ],
            [
                "getVector",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract double getNumber(String arg0)"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "public abstract Collection<String> getAttributeKeySet()"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasArray(String arg0)"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract CharSequence getLabel(String arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0)"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "public abstract Object[] getArray(String arg0)"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "public abstract int getAttributeCount()"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "public abstract String getId()"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0)"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterable<String> getEachAttributeKey()"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasHash(String arg0)"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasNumber(String arg0)"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasLabel(String arg0)"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasVector(String arg0)"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "public abstract HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "public abstract int getIndex()"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "public abstract ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "isDirected",
                "org.graphstream.graph",
                "Edge",
                "public abstract boolean isDirected()"
            ],
            [
                "isLoop",
                "org.graphstream.graph",
                "Edge",
                "public abstract boolean isLoop()"
            ],
            [
                "getNode0",
                "org.graphstream.graph",
                "Edge",
                "public abstract <T> T getNode0()"
            ],
            [
                "getSourceNode",
                "org.graphstream.graph",
                "Edge",
                "public abstract <T> T getSourceNode()"
            ],
            [
                "getNode1",
                "org.graphstream.graph",
                "Edge",
                "public abstract <T> T getNode1()"
            ],
            [
                "getTargetNode",
                "org.graphstream.graph",
                "Edge",
                "public abstract <T> T getTargetNode()"
            ],
            [
                "getOpposite",
                "org.graphstream.graph",
                "Edge",
                "public abstract <T> T getOpposite(Node arg0)"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "fillColor",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes",
                "Arrow",
                "protected Color fillColor = Color.BLACK;"
            ],
            [
                "strokeColor",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes",
                "Arrow",
                "protected Color strokeColor = Color.BLACK;"
            ],
            [
                "lengthGu",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes",
                "Arrow",
                "protected int lengthGu = 0;"
            ],
            [
                "widthGu",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes",
                "Arrow",
                "protected int widthGu = 0;"
            ],
            [
                "x",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes",
                "Arrow",
                "protected double x, y;"
            ],
            [
                "y",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes",
                "Arrow",
                "protected double x, y;"
            ],
            [
                "path",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes",
                "Arrow",
                "protected Path2D.Float path = new Path2D.Float();"
            ],
            [
                "from",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public GraphicNode from;"
            ],
            [
                "to",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public GraphicNode to;"
            ],
            [
                "directed",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public boolean directed;"
            ],
            [
                "multi",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public int multi;"
            ],
            [
                "group",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public GraphicEdge.EdgeGroup group;"
            ],
            [
                "ctrl",
                "org.graphstream.ui.graphicGraph",
                "GraphicEdge",
                "public double[] ctrl;"
            ],
            [
                "mygraph",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected GraphicGraph mygraph;"
            ],
            [
                "label",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public String label;"
            ],
            [
                "style",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public StyleGroup style;"
            ],
            [
                "component",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public Object component;"
            ],
            [
                "hidden",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public boolean hidden;"
            ],
            [
                "id",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected String id;"
            ],
            [
                "attributes",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected HashMap<String, Object> attributes;"
            ],
            [
                "attributesBeingRemoved",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected ArrayList<String> attributesBeingRemoved;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 2768,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.ui.swingViewer.basicRenderer.shapes",
        "className": "Shape",
        "javadocTag": "@param g The Swing graphics.",
        "methodJavadoc": "    /**\n\t * Same as calling {@link #renderStroke(Graphics2D,GraphMetrics)} and\n\t * {@link #renderFill(Graphics2D,GraphMetrics)} at once.\n\t * \n\t * @param g\n\t *            The Swing graphics.\n\t */",
        "methodSourceCode": "public void render(Graphics2D g, GraphMetrics metrics){\n    renderStroke(g, metrics);\n    renderFill(g, metrics);\n}",
        "classJavadoc": "/**\n     * Same as calling {@link #renderStroke(Graphics2D,GraphMetrics)} and\n     * {@link #renderFill(Graphics2D,GraphMetrics)} at once.\n     *\n     * @param g\n     *            The Swing graphics.\n     */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.swingViewer.basicRenderer.shapes;\n\nimport java.awt.Graphics2D;\n\nimport org.graphstream.ui.swingViewer.util.GraphMetrics;\n\npublic abstract class Shape {\n\t/**\n\t * Same as calling {@link #renderStroke(Graphics2D,GraphMetrics)} and\n\t * {@link #renderFill(Graphics2D,GraphMetrics)} at once.\n\t * \n\t * @param g\n\t *            The Swing graphics.\n\t */\n\tpublic void render(Graphics2D g, GraphMetrics metrics) {\n\t\trenderStroke(g, metrics);\n\t\trenderFill(g, metrics);\n\t}\n\n\t/**\n\t * Render the stroke of the shape.\n\t * \n\t * @param g\n\t *            The Swing graphics.\n\t */\n\tpublic abstract void renderStroke(Graphics2D g, GraphMetrics metrics);\n\n\t/**\n\t * Render the filled part of the shape.\n\t * \n\t * @param g\n\t *            The Swing graphics.\n\t */\n\tpublic abstract void renderFill(Graphics2D g, GraphMetrics metrics);\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "2",
                "int"
            ],
            [
                "2",
                "int"
            ]
        ],
        "tokensMethodArguments": [
            [
                "g",
                "java.awt",
                "Graphics2D"
            ],
            [
                "metrics",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getRenderingHint",
                "java.awt",
                "Graphics2D",
                "public abstract Object getRenderingHint(RenderingHints.Key arg0)"
            ],
            [
                "getComposite",
                "java.awt",
                "Graphics2D",
                "public abstract Composite getComposite()"
            ],
            [
                "getRenderingHints",
                "java.awt",
                "Graphics2D",
                "public abstract RenderingHints getRenderingHints()"
            ],
            [
                "getStroke",
                "java.awt",
                "Graphics2D",
                "public abstract Stroke getStroke()"
            ],
            [
                "getFontRenderContext",
                "java.awt",
                "Graphics2D",
                "public abstract FontRenderContext getFontRenderContext()"
            ],
            [
                "getDeviceConfiguration",
                "java.awt",
                "Graphics2D",
                "public abstract GraphicsConfiguration getDeviceConfiguration()"
            ],
            [
                "getBackground",
                "java.awt",
                "Graphics2D",
                "public abstract Color getBackground()"
            ],
            [
                "hit",
                "java.awt",
                "Graphics2D",
                "public abstract boolean hit(Rectangle arg0, Shape arg1, boolean arg2)"
            ],
            [
                "drawImage",
                "java.awt",
                "Graphics2D",
                "public abstract boolean drawImage(Image arg0, AffineTransform arg1, ImageObserver arg2)"
            ],
            [
                "getTransform",
                "java.awt",
                "Graphics2D",
                "public abstract AffineTransform getTransform()"
            ],
            [
                "getPaint",
                "java.awt",
                "Graphics2D",
                "public abstract Paint getPaint()"
            ],
            [
                "getColor",
                "java.awt",
                "Graphics",
                "public abstract Color getColor()"
            ],
            [
                "toString",
                "java.awt",
                "Graphics",
                "public String toString()"
            ],
            [
                "drawImage",
                "java.awt",
                "Graphics",
                "public abstract boolean drawImage(Image arg0, int arg1, int arg2, Color arg3, ImageObserver arg4)"
            ],
            [
                "drawImage",
                "java.awt",
                "Graphics",
                "public abstract boolean drawImage(Image arg0, int arg1, int arg2, int arg3, int arg4, ImageObserver arg5)"
            ],
            [
                "getFontMetrics",
                "java.awt",
                "Graphics",
                "public abstract FontMetrics getFontMetrics(Font arg0)"
            ],
            [
                "drawImage",
                "java.awt",
                "Graphics",
                "public abstract boolean drawImage(Image arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, Color arg9, ImageObserver arg10)"
            ],
            [
                "getFont",
                "java.awt",
                "Graphics",
                "public abstract Font getFont()"
            ],
            [
                "create",
                "java.awt",
                "Graphics",
                "public abstract Graphics create()"
            ],
            [
                "getClipRect",
                "java.awt",
                "Graphics",
                "public Rectangle getClipRect()"
            ],
            [
                "hitClip",
                "java.awt",
                "Graphics",
                "public boolean hitClip(int arg0, int arg1, int arg2, int arg3)"
            ],
            [
                "getClipBounds",
                "java.awt",
                "Graphics",
                "public abstract Rectangle getClipBounds()"
            ],
            [
                "drawImage",
                "java.awt",
                "Graphics",
                "public abstract boolean drawImage(Image arg0, int arg1, int arg2, int arg3, int arg4, Color arg5, ImageObserver arg6)"
            ],
            [
                "getClip",
                "java.awt",
                "Graphics",
                "public abstract Shape getClip()"
            ],
            [
                "create",
                "java.awt",
                "Graphics",
                "public Graphics create(int arg0, int arg1, int arg2, int arg3)"
            ],
            [
                "getFontMetrics",
                "java.awt",
                "Graphics",
                "public FontMetrics getFontMetrics()"
            ],
            [
                "drawImage",
                "java.awt",
                "Graphics",
                "public abstract boolean drawImage(Image arg0, int arg1, int arg2, ImageObserver arg3)"
            ],
            [
                "getClipBounds",
                "java.awt",
                "Graphics",
                "public Rectangle getClipBounds(Rectangle arg0)"
            ],
            [
                "drawImage",
                "java.awt",
                "Graphics",
                "public abstract boolean drawImage(Image arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, ImageObserver arg9)"
            ],
            [
                "getHighPoint",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public Point3 getHighPoint()"
            ],
            [
                "graphHeightGU",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double graphHeightGU()"
            ],
            [
                "lengthToGu",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double lengthToGu(Values arg0, int arg1)"
            ],
            [
                "getSize",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public Vector3 getSize()"
            ],
            [
                "lengthToGu",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double lengthToGu(Value arg0)"
            ],
            [
                "graphDepthGU",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double graphDepthGU()"
            ],
            [
                "toString",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public String toString()"
            ],
            [
                "getLowPoint",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public Point3 getLowPoint()"
            ],
            [
                "graphWidthGU",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double graphWidthGU()"
            ],
            [
                "lengthToGu",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double lengthToGu(double arg0, StyleConstants.Units arg1)"
            ],
            [
                "lengthToPx",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double lengthToPx(double arg0, StyleConstants.Units arg1)"
            ],
            [
                "positionPixelToGu",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double positionPixelToGu(int arg0, int arg1)"
            ],
            [
                "getDiagonal",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double getDiagonal()"
            ],
            [
                "lengthToPx",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double lengthToPx(Values arg0, int arg1)"
            ],
            [
                "lengthToPx",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double lengthToPx(Value arg0)"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "lo",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public Point3 lo;"
            ],
            [
                "hi",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public Point3 hi;"
            ],
            [
                "loVisible",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public Point3 loVisible;"
            ],
            [
                "hiVisible",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public Point3 hiVisible;"
            ],
            [
                "size",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public Vector3 size;"
            ],
            [
                "diagonal",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double diagonal;"
            ],
            [
                "viewport",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double[] viewport;"
            ],
            [
                "ratioPx2Gu",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double ratioPx2Gu;"
            ],
            [
                "px1",
                "org.graphstream.ui.swingViewer.util",
                "GraphMetrics",
                "public double px1;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 2775,
        "oracle": ";",
        "oracleType": "NORMAL_POST",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.ui.swingViewer",
        "className": "GraphRenderer",
        "javadocTag": "@return a Camera instance",
        "methodJavadoc": "    /**\n\t * Get a camera object to provide control commands on the view.\n\t * \n\t * @return a Camera instance\n\t */",
        "methodSourceCode": "public abstract Camera getCamera();",
        "classJavadoc": "/**\n * Interface for classes that draw a GraphicGraph in a swing component.\n * \n * <p>\n * There are two rendering mechanisms in the Swing ui package : the viewer and\n * the renderers. The viewer is a complete architecture to render a graph in a\n * panel or frame, handling all the details. The renderer architecture is a way\n * to only render the graph in any surface, handled directly by the developer.\n * When using the render you are must handle the graphic graph by yourself, but\n * you have a lot more flexibility.\n * </p>\n * \n * <p>\n * The viewer mechanisms uses graph renderers.\n * </p>\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.swingViewer;\n\nimport org.graphstream.ui.graphicGraph.GraphicElement;\nimport org.graphstream.ui.graphicGraph.GraphicGraph;\nimport org.graphstream.ui.view.Camera;\n\nimport java.awt.Container;\nimport java.awt.Graphics2D;\nimport java.util.Collection;\n\n/**\n * Interface for classes that draw a GraphicGraph in a swing component.\n * \n * <p>\n * There are two rendering mechanisms in the Swing ui package : the viewer and\n * the renderers. The viewer is a complete architecture to render a graph in a\n * panel or frame, handling all the details. The renderer architecture is a way\n * to only render the graph in any surface, handled directly by the developer.\n * When using the render you are must handle the graphic graph by yourself, but\n * you have a lot more flexibility.\n * </p>\n * \n * <p>\n * The viewer mechanisms uses graph renderers.\n * </p>\n */\npublic interface GraphRenderer {\n\t// Initialisation\n\n\tvoid open(GraphicGraph graph, Container drawingSurface);\n\n\tvoid close();\n\n\t// Access\n\n\t/**\n\t * Get a camera object to provide control commands on the view.\n\t * \n\t * @return a Camera instance\n\t */\n\tpublic abstract Camera getCamera();\n\n\t/**\n\t * Search for the first node or sprite (in that order) that contains the\n\t * point at coordinates (x, y).\n\t * \n\t * @param x\n\t *            The point abscissa.\n\t * @param y\n\t *            The point ordinate.\n\t * @return The first node or sprite at the given coordinates or null if\n\t *         nothing found.\n\t */\n\tpublic abstract GraphicElement findNodeOrSpriteAt(double x, double y);\n\n\t/**\n\t * Search for all the nodes and sprites contained inside the rectangle\n\t * (x1,y1)-(x2,y2).\n\t * \n\t * @param x1\n\t *            The rectangle lowest point abscissa.\n\t * @param y1\n\t *            The rectangle lowest point ordinate.\n\t * @param x2\n\t *            The rectangle highest point abscissa.\n\t * @param y2\n\t *            The rectangle highest point ordinate.\n\t * @return The set of sprites and nodes in the given rectangle.\n\t */\n\tpublic abstract Collection<GraphicElement> allNodesOrSpritesIn(double x1,\n\t\t\tdouble y1, double x2, double y2);\n\n\t// Command\n\n\t/**\n\t * Redisplay or update the graph.\n\t */\n\tpublic abstract void render(Graphics2D g, int x, int y, int width, int height);\n\n\t/**\n\t * Called by the mouse manager to specify where a node and sprite selection\n\t * started.\n\t * \n\t * @param x1\n\t *            The selection start abscissa.\n\t * @param y1\n\t *            The selection start ordinate.\n\t */\n\tpublic abstract void beginSelectionAt(double x1, double y1);\n\n\t/**\n\t * The selection already started grows toward position (x, y).\n\t * \n\t * @param x\n\t *            The new end selection abscissa.\n\t * @param y\n\t *            The new end selection ordinate.\n\t */\n\tpublic abstract void selectionGrowsAt(double x, double y);\n\n\t/**\n\t * Called by the mouse manager to specify where a node and spite selection\n\t * stopped.\n\t * \n\t * @param x2\n\t *            The selection stop abscissa.\n\t * @param y2\n\t *            The selection stop ordinate.\n\t */\n\tpublic abstract void endSelectionAt(double x2, double y2);\n\n\t/**\n\t * Force an element to move at the given location in pixels.\n\t * \n\t * @param element\n\t *            The element.\n\t * @param x\n\t *            The requested position abscissa in pixels.\n\t * @param y\n\t *            The requested position ordinate in pixels.\n\t */\n\tpublic abstract void moveElementAtPx(GraphicElement element, double x,\n\t\t\tdouble y);\n\t\n\tpublic abstract void screenshot(String filename, int width, int height);\n\n\t/**\n\t * Set a layer renderer that will be called each time the graph needs to be\n\t * redrawn before the graph is rendered. Pass \"null\" to remove the layer\n\t * renderer.\n\t * \n\t * @param renderer\n\t *            The renderer (or null to remove it).\n\t */\n\tpublic abstract void setBackLayerRenderer(LayerRenderer renderer);\n\n\t/**\n\t * Set a layer renderer that will be called each time the graph needs to be\n\t * redrawn after the graph is rendered. Pass \"null\" to remove the layer\n\t * renderer.\n\t * \n\t * @param renderer\n\t *            The renderer (or null to remove it).\n\t */\n\tpublic abstract void setForeLayoutRenderer(LayerRenderer renderer);\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "findNodeOrSpriteAt",
                "org.graphstream.ui.swingViewer",
                "GraphRenderer",
                "/**\n * Search for the first node or sprite (in that order) that contains the\n * point at coordinates (x, y).\n *\n * @param x\n *            The point abscissa.\n * @param y\n *            The point ordinate.\n * @return The first node or sprite at the given coordinates or null if\n *         nothing found.\n */\npublic abstract GraphicElement findNodeOrSpriteAt(double x, double y);"
            ],
            [
                "allNodesOrSpritesIn",
                "org.graphstream.ui.swingViewer",
                "GraphRenderer",
                "/**\n * Search for all the nodes and sprites contained inside the rectangle\n * (x1,y1)-(x2,y2).\n *\n * @param x1\n *            The rectangle lowest point abscissa.\n * @param y1\n *            The rectangle lowest point ordinate.\n * @param x2\n *            The rectangle highest point abscissa.\n * @param y2\n *            The rectangle highest point ordinate.\n * @return The set of sprites and nodes in the given rectangle.\n */\npublic abstract Collection<GraphicElement> allNodesOrSpritesIn(double x1, double y1, double x2, double y2);"
            ],
            [
                "getCamera",
                "org.graphstream.ui.swingViewer",
                "GraphRenderer",
                "// Access\n/**\n * Get a camera object to provide control commands on the view.\n *\n * @return a Camera instance\n */\npublic abstract Camera getCamera();"
            ],
            [
                "getViewPercent",
                "org.graphstream.ui.view",
                "Camera",
                "public abstract double getViewPercent()"
            ],
            [
                "transformPxToGu",
                "org.graphstream.ui.view",
                "Camera",
                "public abstract Point3 transformPxToGu(double arg0, double arg1)"
            ],
            [
                "getMetrics",
                "org.graphstream.ui.view",
                "Camera",
                "public abstract GraphMetrics getMetrics()"
            ],
            [
                "getViewCenter",
                "org.graphstream.ui.view",
                "Camera",
                "public abstract Point3 getViewCenter()"
            ],
            [
                "transformGuToPx",
                "org.graphstream.ui.view",
                "Camera",
                "public abstract Point3 transformGuToPx(double arg0, double arg1, double arg2)"
            ],
            [
                "isVisible",
                "org.graphstream.ui.view",
                "Camera",
                "public abstract boolean isVisible(GraphicElement arg0)"
            ],
            [
                "getGraphDimension",
                "org.graphstream.ui.view",
                "Camera",
                "public abstract double getGraphDimension()"
            ],
            [
                "getViewRotation",
                "org.graphstream.ui.view",
                "Camera",
                "public abstract double getViewRotation()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 2776,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.ui.swingViewer",
        "className": "GraphRenderer",
        "javadocTag": "@param x The point abscissa.",
        "methodJavadoc": "    /**\n\t * Search for the first node or sprite (in that order) that contains the\n\t * point at coordinates (x, y).\n\t * \n\t * @param x\n\t *            The point abscissa.\n\t * @param y\n\t *            The point ordinate.\n\t * @return The first node or sprite at the given coordinates or null if\n\t *         nothing found.\n\t */",
        "methodSourceCode": "public abstract GraphicElement findNodeOrSpriteAt(double x, double y);",
        "classJavadoc": "/**\n * Interface for classes that draw a GraphicGraph in a swing component.\n * \n * <p>\n * There are two rendering mechanisms in the Swing ui package : the viewer and\n * the renderers. The viewer is a complete architecture to render a graph in a\n * panel or frame, handling all the details. The renderer architecture is a way\n * to only render the graph in any surface, handled directly by the developer.\n * When using the render you are must handle the graphic graph by yourself, but\n * you have a lot more flexibility.\n * </p>\n * \n * <p>\n * The viewer mechanisms uses graph renderers.\n * </p>\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.swingViewer;\n\nimport org.graphstream.ui.graphicGraph.GraphicElement;\nimport org.graphstream.ui.graphicGraph.GraphicGraph;\nimport org.graphstream.ui.view.Camera;\n\nimport java.awt.Container;\nimport java.awt.Graphics2D;\nimport java.util.Collection;\n\n/**\n * Interface for classes that draw a GraphicGraph in a swing component.\n * \n * <p>\n * There are two rendering mechanisms in the Swing ui package : the viewer and\n * the renderers. The viewer is a complete architecture to render a graph in a\n * panel or frame, handling all the details. The renderer architecture is a way\n * to only render the graph in any surface, handled directly by the developer.\n * When using the render you are must handle the graphic graph by yourself, but\n * you have a lot more flexibility.\n * </p>\n * \n * <p>\n * The viewer mechanisms uses graph renderers.\n * </p>\n */\npublic interface GraphRenderer {\n\t// Initialisation\n\n\tvoid open(GraphicGraph graph, Container drawingSurface);\n\n\tvoid close();\n\n\t// Access\n\n\t/**\n\t * Get a camera object to provide control commands on the view.\n\t * \n\t * @return a Camera instance\n\t */\n\tpublic abstract Camera getCamera();\n\n\t/**\n\t * Search for the first node or sprite (in that order) that contains the\n\t * point at coordinates (x, y).\n\t * \n\t * @param x\n\t *            The point abscissa.\n\t * @param y\n\t *            The point ordinate.\n\t * @return The first node or sprite at the given coordinates or null if\n\t *         nothing found.\n\t */\n\tpublic abstract GraphicElement findNodeOrSpriteAt(double x, double y);\n\n\t/**\n\t * Search for all the nodes and sprites contained inside the rectangle\n\t * (x1,y1)-(x2,y2).\n\t * \n\t * @param x1\n\t *            The rectangle lowest point abscissa.\n\t * @param y1\n\t *            The rectangle lowest point ordinate.\n\t * @param x2\n\t *            The rectangle highest point abscissa.\n\t * @param y2\n\t *            The rectangle highest point ordinate.\n\t * @return The set of sprites and nodes in the given rectangle.\n\t */\n\tpublic abstract Collection<GraphicElement> allNodesOrSpritesIn(double x1,\n\t\t\tdouble y1, double x2, double y2);\n\n\t// Command\n\n\t/**\n\t * Redisplay or update the graph.\n\t */\n\tpublic abstract void render(Graphics2D g, int x, int y, int width, int height);\n\n\t/**\n\t * Called by the mouse manager to specify where a node and sprite selection\n\t * started.\n\t * \n\t * @param x1\n\t *            The selection start abscissa.\n\t * @param y1\n\t *            The selection start ordinate.\n\t */\n\tpublic abstract void beginSelectionAt(double x1, double y1);\n\n\t/**\n\t * The selection already started grows toward position (x, y).\n\t * \n\t * @param x\n\t *            The new end selection abscissa.\n\t * @param y\n\t *            The new end selection ordinate.\n\t */\n\tpublic abstract void selectionGrowsAt(double x, double y);\n\n\t/**\n\t * Called by the mouse manager to specify where a node and spite selection\n\t * stopped.\n\t * \n\t * @param x2\n\t *            The selection stop abscissa.\n\t * @param y2\n\t *            The selection stop ordinate.\n\t */\n\tpublic abstract void endSelectionAt(double x2, double y2);\n\n\t/**\n\t * Force an element to move at the given location in pixels.\n\t * \n\t * @param element\n\t *            The element.\n\t * @param x\n\t *            The requested position abscissa in pixels.\n\t * @param y\n\t *            The requested position ordinate in pixels.\n\t */\n\tpublic abstract void moveElementAtPx(GraphicElement element, double x,\n\t\t\tdouble y);\n\t\n\tpublic abstract void screenshot(String filename, int width, int height);\n\n\t/**\n\t * Set a layer renderer that will be called each time the graph needs to be\n\t * redrawn before the graph is rendered. Pass \"null\" to remove the layer\n\t * renderer.\n\t * \n\t * @param renderer\n\t *            The renderer (or null to remove it).\n\t */\n\tpublic abstract void setBackLayerRenderer(LayerRenderer renderer);\n\n\t/**\n\t * Set a layer renderer that will be called each time the graph needs to be\n\t * redrawn after the graph is rendered. Pass \"null\" to remove the layer\n\t * renderer.\n\t * \n\t * @param renderer\n\t *            The renderer (or null to remove it).\n\t */\n\tpublic abstract void setForeLayoutRenderer(LayerRenderer renderer);\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "x",
                "",
                "double"
            ],
            [
                "y",
                "",
                "double"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "findNodeOrSpriteAt",
                "org.graphstream.ui.swingViewer",
                "GraphRenderer",
                "/**\n * Search for the first node or sprite (in that order) that contains the\n * point at coordinates (x, y).\n *\n * @param x\n *            The point abscissa.\n * @param y\n *            The point ordinate.\n * @return The first node or sprite at the given coordinates or null if\n *         nothing found.\n */\npublic abstract GraphicElement findNodeOrSpriteAt(double x, double y);"
            ],
            [
                "getCamera",
                "org.graphstream.ui.swingViewer",
                "GraphRenderer",
                "// Access\n/**\n * Get a camera object to provide control commands on the view.\n *\n * @return a Camera instance\n */\npublic abstract Camera getCamera();"
            ],
            [
                "allNodesOrSpritesIn",
                "org.graphstream.ui.swingViewer",
                "GraphRenderer",
                "/**\n * Search for all the nodes and sprites contained inside the rectangle\n * (x1,y1)-(x2,y2).\n *\n * @param x1\n *            The rectangle lowest point abscissa.\n * @param y1\n *            The rectangle lowest point ordinate.\n * @param x2\n *            The rectangle highest point abscissa.\n * @param y2\n *            The rectangle highest point ordinate.\n * @return The set of sprites and nodes in the given rectangle.\n */\npublic abstract Collection<GraphicElement> allNodesOrSpritesIn(double x1, double y1, double x2, double y2);"
            ],
            [
                "nullAttributesAreErrors",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected boolean nullAttributesAreErrors()"
            ],
            [
                "getStyle",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public StyleGroup getStyle()"
            ],
            [
                "getX",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract double getX()"
            ],
            [
                "getSelectorType",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract Selector.Type getSelectorType()"
            ],
            [
                "getY",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract double getY()"
            ],
            [
                "myGraph",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public GraphicGraph myGraph()"
            ],
            [
                "getLabel",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public String getLabel()"
            ],
            [
                "getComponent",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public Object getComponent()"
            ],
            [
                "getZ",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract double getZ()"
            ],
            [
                "getIndex",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public int getIndex()"
            ],
            [
                "hasArray",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasArray(String arg0)"
            ],
            [
                "hasVector",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasVector(String arg0)"
            ],
            [
                "getVector",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public <T> T getAttribute(String arg0)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "getHash",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "toString",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public String toString()"
            ],
            [
                "getLabel",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public String getLabel(String arg0)"
            ],
            [
                "getId",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public String getId()"
            ],
            [
                "hasLabel",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasLabel(String arg0)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasAttribute(String arg0)"
            ],
            [
                "hasHash",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasHash(String arg0)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Collection<String> getAttributeKeySet()"
            ],
            [
                "nullAttributesAreErrors",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected abstract boolean nullAttributesAreErrors()"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Iterable<String> getEachAttributeKey()"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public int getAttributeCount()"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "getArray",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Object[] getArray(String arg0)"
            ],
            [
                "hasNumber",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasNumber(String arg0)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "getNumber",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public double getNumber(String arg0)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "public abstract Collection<String> getAttributeKeySet()"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0)"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "public abstract int getIndex()"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasHash(String arg0)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterable<String> getEachAttributeKey()"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "public abstract Object[] getArray(String arg0)"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract CharSequence getLabel(String arg0)"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract double getNumber(String arg0)"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "public abstract String getId()"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasLabel(String arg0)"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasArray(String arg0)"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "public abstract HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "public abstract ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasNumber(String arg0)"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasVector(String arg0)"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "public abstract int getAttributeCount()"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0)"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "mygraph",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected GraphicGraph mygraph;"
            ],
            [
                "label",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public String label;"
            ],
            [
                "style",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public StyleGroup style;"
            ],
            [
                "component",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public Object component;"
            ],
            [
                "hidden",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public boolean hidden;"
            ],
            [
                "id",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected String id;"
            ],
            [
                "attributes",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected HashMap<String, Object> attributes;"
            ],
            [
                "attributesBeingRemoved",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected ArrayList<String> attributesBeingRemoved;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    }
]