[ {
  "id" : 3684,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "gs-core-1.3",
  "packageName" : "org.graphstream.stream.thread",
  "className" : "ThreadProxyPipeOld",
  "javadocTag" : "@param inputGraph The graph we listen at.",
  "methodJavadoc" : "    /**\n\t * Like {@link #ThreadProxyPipe(Graph)} but allow to avoid replaying the\n\t * graph.\n\t * \n\t * @param inputGraph\n\t *            The graph we listen at.\n\t * @param replayGraph\n\t *            If false, and if the input graph already contains element they\n\t *            are not replayed.\n\t */",
  "methodSourceCode" : "public ThreadProxyPipeOld(Graph inputGraph, boolean replayGraph){\n    this(inputGraph, null, replayGraph);\n}",
  "classJavadoc" : "/**\n * Filter that allows to pass graph events between two threads without explicit\n * synchronization.\n * \n * <p>\n * This filter allows to register it as an output for some source of events in a\n * source thread (hereafter called the input thread) and to register listening\n * outputs in a destination thread (hereafter called the sink thread).\n * </p>\n * \n * <pre>\n *                       |\n *   Source ---> ThreadProxyFilter ----> Sink\n *  Thread 1             |              Thread 2\n *                       |\n * </pre>\n * \n * <p>\n * In other words, this class allows to listen in a sink thread graph events\n * that are produced in another source thread without any explicit\n * synchronization on the source of events.\n * </p>\n * \n * <p>\n * The only restriction is that the sink thread must regularly call the\n * {@link #pump()} method to dispatch events coming from the source to all sinks\n * registered (see the explanation in {@link org.graphstream.stream.ProxyPipe}).\n * </p>\n * \n * <p>\n * You can register any kind of input as source of event, but if the input is a\n * graph, then you can choose to \"replay\" all the content of the graph so that\n * at the other end of the filter, all outputs receive the complete content of\n * the graph. This is the default behavior if this filter is constructed with a\n * graph as input.\n * </p>\n * \n * @deprecated This is the old version of\n *             {@link org.graphstream.stream.thread.ThreadProxyPipe}.\n */",
  "classSourceCode" : "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign√©      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.stream.thread;\n\nimport org.graphstream.graph.Edge;\nimport org.graphstream.graph.Graph;\nimport org.graphstream.graph.Node;\nimport org.graphstream.stream.ProxyPipe;\nimport org.graphstream.stream.Sink;\nimport org.graphstream.stream.Source;\nimport org.graphstream.stream.SourceBase;\nimport org.miv.mbox.CannotPostException;\nimport org.miv.mbox.MBox;\nimport org.miv.mbox.MBoxListener;\nimport org.miv.mbox.MBoxStandalone;\n\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n * Filter that allows to pass graph events between two threads without explicit\n * synchronization.\n * \n * <p>\n * This filter allows to register it as an output for some source of events in a\n * source thread (hereafter called the input thread) and to register listening\n * outputs in a destination thread (hereafter called the sink thread).\n * </p>\n * \n * <pre>\n *                       |\n *   Source ---> ThreadProxyFilter ----> Sink\n *  Thread 1             |              Thread 2\n *                       |\n * </pre>\n * \n * <p>\n * In other words, this class allows to listen in a sink thread graph events\n * that are produced in another source thread without any explicit\n * synchronization on the source of events.\n * </p>\n * \n * <p>\n * The only restriction is that the sink thread must regularly call the\n * {@link #pump()} method to dispatch events coming from the source to all sinks\n * registered (see the explanation in {@link org.graphstream.stream.ProxyPipe}).\n * </p>\n * \n * <p>\n * You can register any kind of input as source of event, but if the input is a\n * graph, then you can choose to \"replay\" all the content of the graph so that\n * at the other end of the filter, all outputs receive the complete content of\n * the graph. This is the default behavior if this filter is constructed with a\n * graph as input.\n * </p>\n * \n * @deprecated This is the old version of\n *             {@link org.graphstream.stream.thread.ThreadProxyPipe}.\n */\n@Deprecated\npublic class ThreadProxyPipeOld extends SourceBase implements ProxyPipe, MBoxListener {\n\n    /**\n     * class level logger\n     */\n    private static final Logger logger = Logger.getLogger(ThreadProxyPipe.class.getSimpleName());\n\n\t/**\n\t * Proxy id.\n\t */\n\tprotected String id;\n\n\t/**\n\t * The event sender name, usually the graph name.\n\t */\n\tprotected String from;\n\n\t/**\n\t * The message box used to exchange messages between the two threads.\n\t */\n\tprotected MBox events;\n\n\t/**\n\t * Used only to remove the listener. We ensure this is done in the source\n\t * thread.\n\t */\n\tprotected Source input;\n\n\t/**\n\t * Signals that this proxy must be removed from the source input.\n\t */\n\tprotected boolean unregisterWhenPossible = false;\n\n\t/**\n\t * New thread proxy pipe with no input.\n\t */\n\tpublic ThreadProxyPipeOld() {\n\t\tthis((Source) null);\n\t}\n\n\t/**\n\t * Listen at an input in a given thread and redirect all events to\n\t * GraphListeners that may be in another thread.\n\t * \n\t * @param input\n\t *            The source of graph events we listen at.\n\t */\n\tpublic ThreadProxyPipeOld(Source input) {\n\t\tthis(input, new MBoxStandalone());\n\t}\n\n\t/**\n\t * Like {@link #ThreadProxyPipe(Source)}, but allow to share the message box\n\t * with another message processor. This can be needed to share the same\n\t * message stack, when message order is important.\n\t * \n\t * @param input\n\t *            The source of events we listen at.\n\t * @param sharedMBox\n\t *            The message box used to send and receive graph messages across\n\t *            the thread boundary.\n\t */\n\tpublic ThreadProxyPipeOld(Source input, MBox sharedMBox) {\n\t\tthis.events = sharedMBox;\n\t\tthis.from = \"<in>\";\n\t\tthis.input = input;\n\n\t\tif (input != null)\n\t\t\tinput.addSink(this);\n\n\t\t((MBoxStandalone) this.events).addListener(this);\n\t}\n\n\t/**\n\t * Listen at an input graph in a given thread and redirect all events to\n\t * GraphListeners that may be in another thread. By default, if the graph\n\t * already contains some elements, they are \"replayed\". This means that\n\t * events are sent to mimic the fact they just appeared.\n\t * \n\t * @param inputGraph\n\t *            The graph we listen at.\n\t */\n\tpublic ThreadProxyPipeOld(Graph inputGraph) {\n\t\tthis(inputGraph, true);\n\t}\n\n\t/**\n\t * Like {@link #ThreadProxyPipe(Graph)} but allow to avoid replaying the\n\t * graph.\n\t * \n\t * @param inputGraph\n\t *            The graph we listen at.\n\t * @param replayGraph\n\t *            If false, and if the input graph already contains element they\n\t *            are not replayed.\n\t */\n\tpublic ThreadProxyPipeOld(Graph inputGraph, boolean replayGraph) {\n\t\tthis(inputGraph, null, replayGraph);\n\t}\n\n\t/**\n\t * Like {@link #ThreadProxyPipe(Graph,boolean)} but allows to pass an\n\t * initial listener, therefore specifying the input and output at once.\n\t * \n\t * @param inputGraph\n\t *            The graph we listen at.\n\t * @param firstListener\n\t *            The initial listener to register.\n\t * @param replayGraph\n\t *            If false, and if the input graph already contains element they\n\t *            are not replayed.\n\t */\n\tpublic ThreadProxyPipeOld(Graph inputGraph, Sink firstListener,\n\t\t\tboolean replayGraph) {\n\t\tthis(inputGraph, firstListener, replayGraph, new MBoxStandalone());\n\t}\n\n\t/**\n\t * Like {@link #ThreadProxyPipe(Graph,Sink,boolean)}, but allows to share\n\t * the message box with another message processor. This can be needed to\n\t * share the same message stack, when message order is important.\n\t * \n\t * @param inputGraph\n\t *            The graph we listen at.\n\t * @param replayGraph\n\t *            If false, and if the input graph already contains element they\n\t *            are not replayed.\n\t * @param sharedMBox\n\t *            The message box used to send and receive graph messages across\n\t *            the thread boundary.\n\t */\n\tpublic ThreadProxyPipeOld(Graph inputGraph, Sink firstListener,\n\t\t\tboolean replayGraph, MBox sharedMBox) {\n\t\tthis.events = sharedMBox;\n\t\tthis.from = inputGraph.getId();\n\t\tthis.input = inputGraph;\n\n\t\tif (firstListener != null)\n\t\t\taddSink(firstListener);\n\n\t\tif (replayGraph)\n\t\t\treplayGraph(inputGraph);\n\n\t\tinput.addSink(this);\n\t\t((MBoxStandalone) this.events).addListener(this);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\tString dest = \"nil\";\n\n\t\tif (attrSinks.size() > 0)\n\t\t\tdest = attrSinks.get(0).toString();\n\n\t\treturn String.format(\"thread-proxy(from %s to %s)\", from, dest);\n\t}\n\n\t/**\n\t * Ask the proxy to unregister from the event input source (stop receive\n\t * events) as soon as possible (when the next event will occur in the\n\t * graph).\n\t */\n\tpublic void unregisterFromSource() {\n\t\tunregisterWhenPossible = true;\n\t}\n\n\t/**\n\t * This method must be called regularly in the output thread to check if the\n\t * input source sent events. If some event occurred, the listeners will be\n\t * called.\n\t */\n\tpublic void pump() {\n\t\t((MBoxStandalone) events).processMessages();\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.graphstream.stream.ProxyPipe#blockingPump()\n\t */\n\tpublic void blockingPump() throws InterruptedException {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.graphstream.stream.ProxyPipe#blockingPump(long)\n\t */\n\tpublic void blockingPump(long timeout) throws InterruptedException {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t/**\n\t * Set of events sent via the message box.\n\t */\n\tprotected static enum GraphEvents {\n\t\tADD_NODE, DEL_NODE, ADD_EDGE, DEL_EDGE, STEP, CLEARED, ADD_GRAPH_ATTR, CHG_GRAPH_ATTR, DEL_GRAPH_ATTR, ADD_NODE_ATTR, CHG_NODE_ATTR, DEL_NODE_ATTR, ADD_EDGE_ATTR, CHG_EDGE_ATTR, DEL_EDGE_ATTR\n\t};\n\n\tprotected void replayGraph(Graph graph) {\n\t\ttry {\n\t\t\tString graphId = \"@replay\";\n\n\t\t\t// Replay all graph attributes.\n\n\t\t\tif (graph.getAttributeKeySet() != null)\n\t\t\t\tfor (String key : graph.getAttributeKeySet())\n\t\t\t\t\tevents.post(from, GraphEvents.ADD_GRAPH_ATTR, graphId,\n\t\t\t\t\t\t\tsourceTime.newEvent(), key, graph.getAttribute(key));\n\n\t\t\tThread.yield();\n\n\t\t\t// Replay all nodes and their attributes.\n\n\t\t\tfor (Node node : graph) {\n\t\t\t\tevents.post(from, GraphEvents.ADD_NODE, graphId,\n\t\t\t\t\t\tsourceTime.newEvent(), node.getId());\n\n\t\t\t\tif (node.getAttributeKeySet() != null)\n\t\t\t\t\tfor (String key : node.getAttributeKeySet())\n\t\t\t\t\t\tevents.post(from, GraphEvents.ADD_NODE_ATTR, graphId,\n\t\t\t\t\t\t\t\tsourceTime.newEvent(), node.getId(), key,\n\t\t\t\t\t\t\t\tnode.getAttribute(key));\n\t\t\t\tThread.yield();\n\t\t\t}\n\n\t\t\t// Replay all edges and their attributes.\n\n\t\t\tfor (Edge edge : graph.getEachEdge()) {\n\t\t\t\tevents.post(from, GraphEvents.ADD_EDGE, graphId, sourceTime\n\t\t\t\t\t\t.newEvent(), edge.getId(),\n\t\t\t\t\t\tedge.getSourceNode().getId(), edge.getTargetNode()\n\t\t\t\t\t\t\t\t.getId(), edge.isDirected());\n\n\t\t\t\tif (edge.getAttributeKeySet() != null)\n\t\t\t\t\tfor (String key : edge.getAttributeKeySet())\n\t\t\t\t\t\tevents.post(from, GraphEvents.ADD_EDGE_ATTR, graphId,\n\t\t\t\t\t\t\t\tsourceTime.newEvent(), edge.getId(), key,\n\t\t\t\t\t\t\t\tedge.getAttribute(key));\n\t\t\t\tThread.yield();\n\t\t\t}\n\t\t} catch (CannotPostException e) {\n            logger.log(Level.WARNING, \"Unable to post message to listeners.\", e);\n\t\t}\n\t}\n\n\tprotected boolean maybeUnregister() {\n\t\tif (unregisterWhenPossible) {\n\t\t\tif (input != null)\n\t\t\t\tinput.removeSink(this);\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic void edgeAttributeAdded(String graphId, long timeId, String edgeId,\n\t\t\tString attribute, Object value) {\n\t\tif (maybeUnregister())\n\t\t\treturn;\n\n\t\ttry {\n\t\t\tevents.post(from, GraphEvents.ADD_EDGE_ATTR, graphId, timeId,\n\t\t\t\t\tedgeId, attribute, value);\n\t\t} catch (CannotPostException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void edgeAttributeChanged(String graphId, long timeId,\n\t\t\tString edgeId, String attribute, Object oldValue, Object newValue) {\n\t\tif (maybeUnregister())\n\t\t\treturn;\n\n\t\ttry {\n\t\t\tevents.post(from, GraphEvents.CHG_EDGE_ATTR, graphId, timeId,\n\t\t\t\t\tedgeId, attribute, oldValue, newValue);\n\t\t} catch (CannotPostException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void edgeAttributeRemoved(String graphId, long timeId,\n\t\t\tString edgeId, String attribute) {\n\t\tif (maybeUnregister())\n\t\t\treturn;\n\n\t\ttry {\n\t\t\tevents.post(from, GraphEvents.DEL_EDGE_ATTR, graphId, timeId,\n\t\t\t\t\tedgeId, attribute);\n\t\t} catch (CannotPostException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void graphAttributeAdded(String graphId, long timeId,\n\t\t\tString attribute, Object value) {\n\t\tif (maybeUnregister())\n\t\t\treturn;\n\n\t\ttry {\n\t\t\tevents.post(from, GraphEvents.ADD_GRAPH_ATTR, graphId, timeId,\n\t\t\t\t\tattribute, value);\n\t\t} catch (CannotPostException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void graphAttributeChanged(String graphId, long timeId,\n\t\t\tString attribute, Object oldValue, Object newValue) {\n\t\tif (maybeUnregister())\n\t\t\treturn;\n\n\t\ttry {\n\t\t\tevents.post(from, GraphEvents.CHG_GRAPH_ATTR, graphId, timeId,\n\t\t\t\t\tattribute, oldValue, newValue);\n\t\t} catch (CannotPostException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void graphAttributeRemoved(String graphId, long timeId,\n\t\t\tString attribute) {\n\t\tif (maybeUnregister())\n\t\t\treturn;\n\n\t\ttry {\n\t\t\tevents.post(from, GraphEvents.DEL_GRAPH_ATTR, graphId, timeId,\n\t\t\t\t\tattribute);\n\t\t} catch (CannotPostException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void nodeAttributeAdded(String graphId, long timeId, String nodeId,\n\t\t\tString attribute, Object value) {\n\t\tif (maybeUnregister())\n\t\t\treturn;\n\n\t\ttry {\n\t\t\tevents.post(from, GraphEvents.ADD_NODE_ATTR, graphId, timeId,\n\t\t\t\t\tnodeId, attribute, value);\n\t\t} catch (CannotPostException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void nodeAttributeChanged(String graphId, long timeId,\n\t\t\tString nodeId, String attribute, Object oldValue, Object newValue) {\n\t\tif (maybeUnregister())\n\t\t\treturn;\n\n\t\ttry {\n\t\t\tevents.post(from, GraphEvents.CHG_NODE_ATTR, graphId, timeId,\n\t\t\t\t\tnodeId, attribute, oldValue, newValue);\n\t\t} catch (CannotPostException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void nodeAttributeRemoved(String graphId, long timeId,\n\t\t\tString nodeId, String attribute) {\n\t\tif (maybeUnregister())\n\t\t\treturn;\n\n\t\ttry {\n\t\t\tevents.post(from, GraphEvents.DEL_NODE_ATTR, graphId, timeId,\n\t\t\t\t\tnodeId, attribute);\n\t\t} catch (CannotPostException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void edgeAdded(String graphId, long timeId, String edgeId,\n\t\t\tString fromNodeId, String toNodeId, boolean directed) {\n\t\tif (maybeUnregister())\n\t\t\treturn;\n\n\t\ttry {\n\t\t\tevents.post(from, GraphEvents.ADD_EDGE, graphId, timeId, edgeId,\n\t\t\t\t\tfromNodeId, toNodeId, directed);\n\t\t} catch (CannotPostException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void edgeRemoved(String graphId, long timeId, String edgeId) {\n\t\tif (maybeUnregister())\n\t\t\treturn;\n\n\t\ttry {\n\t\t\tevents.post(from, GraphEvents.DEL_EDGE, graphId, timeId, edgeId);\n\t\t} catch (CannotPostException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void graphCleared(String graphId, long timeId) {\n\t\tif (maybeUnregister())\n\t\t\treturn;\n\n\t\ttry {\n\t\t\tevents.post(from, GraphEvents.CLEARED, graphId, timeId);\n\t\t} catch (CannotPostException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void nodeAdded(String graphId, long timeId, String nodeId) {\n\t\tif (maybeUnregister())\n\t\t\treturn;\n\n\t\ttry {\n\t\t\tevents.post(from, GraphEvents.ADD_NODE, graphId, timeId, nodeId);\n\t\t} catch (CannotPostException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void nodeRemoved(String graphId, long timeId, String nodeId) {\n\t\tif (maybeUnregister())\n\t\t\treturn;\n\n\t\ttry {\n\t\t\tevents.post(from, GraphEvents.DEL_NODE, graphId, timeId, nodeId);\n\t\t} catch (CannotPostException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void stepBegins(String graphId, long timeId, double step) {\n\t\tif (maybeUnregister())\n\t\t\treturn;\n\n\t\ttry {\n\t\t\tevents.post(from, GraphEvents.STEP, graphId, timeId, step);\n\t\t} catch (CannotPostException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t// MBoxListener\n\n\tpublic void processMessage(String from, Object[] data) {\n\t\tif (data[0].equals(GraphEvents.ADD_NODE)) {\n\t\t\tString graphId = (String) data[1];\n\t\t\tLong timeId = (Long) data[2];\n\t\t\tString nodeId = (String) data[3];\n\n\t\t\tsendNodeAdded(graphId, timeId, nodeId);\n\t\t} else if (data[0].equals(GraphEvents.DEL_NODE)) {\n\t\t\tString graphId = (String) data[1];\n\t\t\tLong timeId = (Long) data[2];\n\t\t\tString nodeId = (String) data[3];\n\n\t\t\tsendNodeRemoved(graphId, timeId, nodeId);\n\t\t} else if (data[0].equals(GraphEvents.ADD_EDGE)) {\n\t\t\tString graphId = (String) data[1];\n\t\t\tLong timeId = (Long) data[2];\n\t\t\tString edgeId = (String) data[3];\n\t\t\tString fromId = (String) data[4];\n\t\t\tString toId = (String) data[5];\n\t\t\tboolean directed = (Boolean) data[6];\n\n\t\t\tsendEdgeAdded(graphId, timeId, edgeId, fromId, toId, directed);\n\t\t} else if (data[0].equals(GraphEvents.DEL_EDGE)) {\n\t\t\tString graphId = (String) data[1];\n\t\t\tLong timeId = (Long) data[2];\n\t\t\tString edgeId = (String) data[3];\n\n\t\t\tsendEdgeRemoved(graphId, timeId, edgeId);\n\t\t} else if (data[0].equals(GraphEvents.STEP)) {\n\t\t\tString graphId = (String) data[1];\n\t\t\tLong timeId = (Long) data[2];\n\t\t\tdouble step = (Double) data[3];\n\n\t\t\tsendStepBegins(graphId, timeId, step);\n\t\t} else if (data[0].equals(GraphEvents.ADD_GRAPH_ATTR)) {\n\t\t\tString graphId = (String) data[1];\n\t\t\tLong timeId = (Long) data[2];\n\t\t\tString attribute = (String) data[3];\n\t\t\tObject value = data[4];\n\n\t\t\tsendGraphAttributeAdded(graphId, timeId, attribute, value);\n\t\t} else if (data[0].equals(GraphEvents.CHG_GRAPH_ATTR)) {\n\t\t\tString graphId = (String) data[1];\n\t\t\tLong timeId = (Long) data[2];\n\t\t\tString attribute = (String) data[3];\n\t\t\tObject oldValue = data[4];\n\t\t\tObject newValue = data[5];\n\n\t\t\tsendGraphAttributeChanged(graphId, timeId, attribute, oldValue,\n\t\t\t\t\tnewValue);\n\t\t} else if (data[0].equals(GraphEvents.DEL_GRAPH_ATTR)) {\n\t\t\tString graphId = (String) data[1];\n\t\t\tLong timeId = (Long) data[2];\n\t\t\tString attribute = (String) data[3];\n\n\t\t\tsendGraphAttributeRemoved(graphId, timeId, attribute);\n\t\t} else if (data[0].equals(GraphEvents.ADD_EDGE_ATTR)) {\n\t\t\tString graphId = (String) data[1];\n\t\t\tLong timeId = (Long) data[2];\n\t\t\tString edgeId = (String) data[3];\n\t\t\tString attribute = (String) data[4];\n\t\t\tObject value = data[5];\n\n\t\t\tsendEdgeAttributeAdded(graphId, timeId, edgeId, attribute, value);\n\t\t} else if (data[0].equals(GraphEvents.CHG_EDGE_ATTR)) {\n\t\t\tString graphId = (String) data[1];\n\t\t\tLong timeId = (Long) data[2];\n\t\t\tString edgeId = (String) data[3];\n\t\t\tString attribute = (String) data[4];\n\t\t\tObject oldValue = data[5];\n\t\t\tObject newValue = data[6];\n\n\t\t\tsendEdgeAttributeChanged(graphId, timeId, edgeId, attribute,\n\t\t\t\t\toldValue, newValue);\n\t\t} else if (data[0].equals(GraphEvents.DEL_EDGE_ATTR)) {\n\t\t\tString graphId = (String) data[1];\n\t\t\tLong timeId = (Long) data[2];\n\t\t\tString edgeId = (String) data[3];\n\t\t\tString attribute = (String) data[4];\n\n\t\t\tsendEdgeAttributeRemoved(graphId, timeId, edgeId, attribute);\n\t\t} else if (data[0].equals(GraphEvents.ADD_NODE_ATTR)) {\n\t\t\tString graphId = (String) data[1];\n\t\t\tLong timeId = (Long) data[2];\n\t\t\tString nodeId = (String) data[3];\n\t\t\tString attribute = (String) data[4];\n\t\t\tObject value = data[5];\n\n\t\t\tsendNodeAttributeAdded(graphId, timeId, nodeId, attribute, value);\n\t\t} else if (data[0].equals(GraphEvents.CHG_NODE_ATTR)) {\n\t\t\tString graphId = (String) data[1];\n\t\t\tLong timeId = (Long) data[2];\n\t\t\tString nodeId = (String) data[3];\n\t\t\tString attribute = (String) data[4];\n\t\t\tObject oldValue = data[5];\n\t\t\tObject newValue = data[6];\n\n\t\t\tsendNodeAttributeChanged(graphId, timeId, nodeId, attribute,\n\t\t\t\t\toldValue, newValue);\n\t\t} else if (data[0].equals(GraphEvents.DEL_NODE_ATTR)) {\n\t\t\tString graphId = (String) data[1];\n\t\t\tLong timeId = (Long) data[2];\n\t\t\tString nodeId = (String) data[3];\n\t\t\tString attribute = (String) data[4];\n\n\t\t\tsendNodeAttributeRemoved(graphId, timeId, nodeId, attribute);\n\t\t} else if (data[0].equals(GraphEvents.CLEARED)) {\n\t\t\tString graphId = (String) data[1];\n\t\t\tLong timeId = (Long) data[2];\n\n\t\t\tsendGraphCleared(graphId, timeId);\n\t\t} else {\n            logger.warning(String.format(\"Unknown message %s.\", data[0]));\n\t\t}\n\t}\n}",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "DefaultCamera", "org.graphstream.ui.swingViewer.util" ], [ "GradientFactory", "org.graphstream.ui.swingViewer.util" ], [ "GraphMetrics", "org.graphstream.ui.swingViewer.util" ], [ "Graphics2DOutput", "org.graphstream.ui.swingViewer.util" ], [ "ImageCache", "org.graphstream.ui.swingViewer.util" ], [ "StrokeFactory", "org.graphstream.ui.swingViewer.util" ], [ "FontCache", "org.graphstream.ui.swingViewer.util" ], [ "FontSlot", "org.graphstream.ui.swingViewer.util" ], [ "DefaultView", "org.graphstream.ui.swingViewer" ], [ "SpriteRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "ElementRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "NodeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "Arrow", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "Shape", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "EdgeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "SwingBasicGraphRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "GraphRendererBase", "org.graphstream.ui.swingViewer" ], [ "GraphRenderer", "org.graphstream.ui.swingViewer" ], [ "LayerRenderer", "org.graphstream.ui.swingViewer" ], [ "ViewPanel", "org.graphstream.ui.swingViewer" ], [ "Layouts", "org.graphstream.ui.layout" ], [ "Layout", "org.graphstream.ui.layout" ], [ "LayoutRunner", "org.graphstream.ui.layout" ], [ "NodeParticle", "org.graphstream.ui.layout.springbox" ], [ "GraphCellData", "org.graphstream.ui.layout.springbox" ], [ "EdgeSpring", "org.graphstream.ui.layout.springbox" ], [ "Energies", "org.graphstream.ui.layout.springbox" ], [ "BarnesHutLayout", "org.graphstream.ui.layout.springbox" ], [ "LinLog", "org.graphstream.ui.layout.springbox.implementations" ], [ "LinLogNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBoxNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBox", "org.graphstream.ui.layout.springbox.implementations" ], [ "Point2", "org.graphstream.ui.geom" ], [ "Vector2", "org.graphstream.ui.geom" ], [ "Vector3", "org.graphstream.ui.geom" ], [ "Point3", "org.graphstream.ui.geom" ], [ "ViewerListener", "org.graphstream.ui.view" ], [ "MouseManager", "org.graphstream.ui.view.util" ], [ "ShortcutManager", "org.graphstream.ui.view.util" ], [ "DefaultShortcutManager", "org.graphstream.ui.view.util" ], [ "FpsCounter", "org.graphstream.ui.view.util" ], [ "CubicCurve", "org.graphstream.ui.view.util" ], [ "DefaultMouseManager", "org.graphstream.ui.view.util" ], [ "Selection", "org.graphstream.ui.view" ], [ "ViewerPipe", "org.graphstream.ui.view" ], [ "Viewer", "org.graphstream.ui.view" ], [ "View", "org.graphstream.ui.view" ], [ "Camera", "org.graphstream.ui.view" ], [ "Sprite", "org.graphstream.ui.spriteManager" ], [ "InvalidSpriteIDException", "org.graphstream.ui.spriteManager" ], [ "SpriteManager", "org.graphstream.ui.spriteManager" ], [ "SpriteFactory", "org.graphstream.ui.spriteManager" ], [ "StyleGroupListener", "org.graphstream.ui.graphicGraph" ], [ "Colors", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Values", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetListener", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetParserTokenManager", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParserConstants", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParser", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "Style", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheet", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleConstants", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Selector", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Value", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Rule", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "GraphicNode", "org.graphstream.ui.graphicGraph" ], [ "StyleGroup", "org.graphstream.ui.graphicGraph" ], [ "GraphPosLengthUtils", "org.graphstream.ui.graphicGraph" ], [ "GraphicEdge", "org.graphstream.ui.graphicGraph" ], [ "GraphicElementChangeListener", "org.graphstream.ui.graphicGraph" ], [ "GraphicGraph", "org.graphstream.ui.graphicGraph" ], [ "StyleGroupSet", "org.graphstream.ui.graphicGraph" ], [ "GraphicSprite", "org.graphstream.ui.graphicGraph" ], [ "GraphicElement", "org.graphstream.ui.graphicGraph" ], [ "VerboseSink", "org.graphstream.util" ], [ "GraphListeners", "org.graphstream.util" ], [ "Environment", "org.graphstream.util" ], [ "GraphDiff", "org.graphstream.util" ], [ "Filters", "org.graphstream.util" ], [ "FilteredEdgeIterator", "org.graphstream.util" ], [ "Parser", "org.graphstream.util.parser" ], [ "ParserFactory", "org.graphstream.util.parser" ], [ "TokenMgrError", "org.graphstream.util.parser" ], [ "ParseException", "org.graphstream.util.parser" ], [ "SimpleCharStream", "org.graphstream.util.parser" ], [ "Token", "org.graphstream.util.parser" ], [ "ISODateIO", "org.graphstream.util.time" ], [ "ISODateComponent", "org.graphstream.util.time" ], [ "FilteredNodeIterator", "org.graphstream.util" ], [ "FixedArrayList", "org.graphstream.util.set" ], [ "StepCounter", "org.graphstream.util" ], [ "GraphSpells", "org.graphstream.util.cumulative" ], [ "CumulativeAttributes", "org.graphstream.util.cumulative" ], [ "CumulativeSpells", "org.graphstream.util.cumulative" ], [ "Filter", "org.graphstream.util" ], [ "PipeAdapter", "org.graphstream.stream" ], [ "GraphParseException", "org.graphstream.stream" ], [ "ElementSink", "org.graphstream.stream" ], [ "URLSource", "org.graphstream.stream.net" ], [ "HTTPSource", "org.graphstream.stream.net" ], [ "SourceAdapter", "org.graphstream.stream" ], [ "AttributeSink", "org.graphstream.stream" ], [ "GMLParserConstants", "org.graphstream.stream.file.gml" ], [ "GMLParserTokenManager", "org.graphstream.stream.file.gml" ], [ "GMLContext", "org.graphstream.stream.file.gml" ], [ "Graphics", "org.graphstream.stream.file.gml" ], [ "KeyValues", "org.graphstream.stream.file.gml" ], [ "GMLParser", "org.graphstream.stream.file.gml" ], [ "FileSinkGraphML", "org.graphstream.stream.file" ], [ "TLPParserConstants", "org.graphstream.stream.file.tlp" ], [ "TLPParser", "org.graphstream.stream.file.tlp" ], [ "TLPParserTokenManager", "org.graphstream.stream.file.tlp" ], [ "FileSinkFactory", "org.graphstream.stream.file" ], [ "FileSourceEdge", "org.graphstream.stream.file" ], [ "FileSinkBase", "org.graphstream.stream.file" ], [ "FileSinkTikZ", "org.graphstream.stream.file" ], [ "FileSourceGEXF", "org.graphstream.stream.file" ], [ "DOTParser", "org.graphstream.stream.file.dot" ], [ "DOTParserConstants", "org.graphstream.stream.file.dot" ], [ "DOTParserTokenManager", "org.graphstream.stream.file.dot" ], [ "FileSink", "org.graphstream.stream.file" ], [ "PajekContext", "org.graphstream.stream.file.pajek" ], [ "Graphics", "org.graphstream.stream.file.pajek" ], [ "NodeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeMatrix", "org.graphstream.stream.file.pajek" ], [ "PajekParserTokenManager", "org.graphstream.stream.file.pajek" ], [ "PajekParserConstants", "org.graphstream.stream.file.pajek" ], [ "FileSourceXML", "org.graphstream.stream.file" ], [ "FileSinkBaseFiltered", "org.graphstream.stream.file" ], [ "FileSinkDOT", "org.graphstream.stream.file" ], [ "FileSourceParser", "org.graphstream.stream.file" ], [ "FileSinkDGSFiltered", "org.graphstream.stream.file" ], [ "FileSourceDOT", "org.graphstream.stream.file" ], [ "FileSourceDGS1And2", "org.graphstream.stream.file" ], [ "FileSourceGraphML", "org.graphstream.stream.file" ], [ "FileSourceFactory", "org.graphstream.stream.file" ], [ "FileSinkImages", "org.graphstream.stream.file" ], [ "FileSinkDynamicGML", "org.graphstream.stream.file" ], [ "FileSinkSVG", "org.graphstream.stream.file" ], [ "GEXFSpell", "org.graphstream.stream.file.gexf" ], [ "SmartXMLWriter", "org.graphstream.stream.file.gexf" ], [ "GEXFElement", "org.graphstream.stream.file.gexf" ], [ "GEXFEdges", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValues", "org.graphstream.stream.file.gexf" ], [ "GEXFEdge", "org.graphstream.stream.file.gexf" ], [ "GEXFSpells", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValue", "org.graphstream.stream.file.gexf" ], [ "GEXFNodes", "org.graphstream.stream.file.gexf" ], [ "GEXFNode", "org.graphstream.stream.file.gexf" ], [ "GEXFMeta", "org.graphstream.stream.file.gexf" ], [ "GEXFAttributes", "org.graphstream.stream.file.gexf" ], [ "GEXF", "org.graphstream.stream.file.gexf" ], [ "GEXFGraph", "org.graphstream.stream.file.gexf" ], [ "GEXFAttribute", "org.graphstream.stream.file.gexf" ], [ "OldFileSourceDGS", "org.graphstream.stream.file.dgs" ], [ "DGSParser", "org.graphstream.stream.file.dgs" ], [ "FileSourceBase", "org.graphstream.stream.file" ], [ "FileSinkGML", "org.graphstream.stream.file" ], [ "FileSourceDGS", "org.graphstream.stream.file" ], [ "FileSinkDGSUtility", "org.graphstream.stream.file" ], [ "FileSourceTLP", "org.graphstream.stream.file" ], [ "FileSinkSVG2", "org.graphstream.stream.file" ], [ "FileSource", "org.graphstream.stream.file" ], [ "FileSourceNCol", "org.graphstream.stream.file" ], [ "FileSourcePajek", "org.graphstream.stream.file" ], [ "FileSourceGPX", "org.graphstream.stream.file" ], [ "FileSourceLGL", "org.graphstream.stream.file" ], [ "FileSinkGEXF2", "org.graphstream.stream.file" ], [ "FileSourceGML", "org.graphstream.stream.file" ], [ "FileSinkGEXF", "org.graphstream.stream.file" ], [ "FileSinkDGS", "org.graphstream.stream.file" ], [ "ProxyPipe", "org.graphstream.stream" ], [ "Sink", "org.graphstream.stream" ], [ "Timeline", "org.graphstream.stream" ], [ "Pipe", "org.graphstream.stream" ], [ "SinkAdapter", "org.graphstream.stream" ], [ "Replayable", "org.graphstream.stream" ], [ "Source", "org.graphstream.stream" ], [ "AnnotatedSink", "org.graphstream.stream" ], [ "GraphReplay", "org.graphstream.stream" ], [ "AttributePipe", "org.graphstream.stream" ], [ "SinkTime", "org.graphstream.stream.sync" ], [ "SourceTime", "org.graphstream.stream.sync" ], [ "PipeBase", "org.graphstream.stream" ], [ "ThreadProxyPipe", "org.graphstream.stream.thread" ], [ "ThreadProxyPipeOld", "org.graphstream.stream.thread" ], [ "RMISource", "org.graphstream.stream.rmi" ], [ "RMIAdapterOut", "org.graphstream.stream.rmi" ], [ "RMISink", "org.graphstream.stream.rmi" ], [ "RMIAdapterIn", "org.graphstream.stream.rmi" ], [ "SourceBase", "org.graphstream.stream" ], [ "NetStreamDecoder", "org.graphstream.stream.netstream" ], [ "NetStreamReceiver", "org.graphstream.stream.netstream" ], [ "NetStreamConstants", "org.graphstream.stream.netstream" ], [ "NetStreamSender", "org.graphstream.stream.netstream" ], [ "DefaultNetStreamDecoder", "org.graphstream.stream.netstream" ], [ "Base64", "org.graphstream.stream.netstream.packing" ], [ "NetStreamUnpacker", "org.graphstream.stream.netstream.packing" ], [ "Base64Packer", "org.graphstream.stream.netstream.packing" ], [ "Base64Unpacker", "org.graphstream.stream.netstream.packing" ], [ "NetStreamPacker", "org.graphstream.stream.netstream.packing" ], [ "AttributePredicate", "org.graphstream.stream" ], [ "Element", "org.graphstream.graph" ], [ "Node", "org.graphstream.graph" ], [ "BreadthFirstIterator", "org.graphstream.graph" ], [ "Graph", "org.graphstream.graph" ], [ "EdgeRejectedException", "org.graphstream.graph" ], [ "CompoundAttribute", "org.graphstream.graph" ], [ "Structure", "org.graphstream.graph" ], [ "DepthFirstIterator", "org.graphstream.graph" ], [ "NullAttributeException", "org.graphstream.graph" ], [ "IdAlreadyInUseException", "org.graphstream.graph" ], [ "EdgeFactory", "org.graphstream.graph" ], [ "ElementNotFoundException", "org.graphstream.graph" ], [ "OneAttributeElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListNode", "org.graphstream.graph.implementations" ], [ "SingleNode", "org.graphstream.graph.implementations" ], [ "AbstractElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListGraph", "org.graphstream.graph.implementations" ], [ "AbstractNode", "org.graphstream.graph.implementations" ], [ "DefaultGraph", "org.graphstream.graph.implementations" ], [ "MultiGraph", "org.graphstream.graph.implementations" ], [ "Graphs", "org.graphstream.graph.implementations" ], [ "SingleGraph", "org.graphstream.graph.implementations" ], [ "MultiNode", "org.graphstream.graph.implementations" ], [ "AbstractGraph", "org.graphstream.graph.implementations" ], [ "AbstractEdge", "org.graphstream.graph.implementations" ], [ "GraphFactory", "org.graphstream.graph" ], [ "NodeFactory", "org.graphstream.graph" ], [ "Edge", "org.graphstream.graph" ], [ "Path", "org.graphstream.graph" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "gradientInArea", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)" ], [ "linearGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)" ], [ "createFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static float[] createFractions(Style style)" ], [ "createColors", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static Color[] createColors(Style style)" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "public static ImageCache defaultImageCache()" ], [ "generateStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "public static Stroke generateStroke(Style style, GraphMetrics metrics)" ], [ "generatePlainStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)" ], [ "generateDotsStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)" ], [ "generateDashesStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache()" ], [ "newLayoutAlgorithm", "org.graphstream.ui.layout", "Layouts", "public static Layout newLayoutAlgorithm()" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static double eval(double x0, double x1, double x2, double x3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static double derivative(double x0, double x1, double x2, double x3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "newGraphRenderer", "org.graphstream.ui.view", "Viewer", "public static GraphRenderer newGraphRenderer()" ], [ "getPositionValue", "org.graphstream.ui.spriteManager", "SpriteManager", "protected static Values getPositionValue(Object value)" ], [ "convertColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Color convertColor(Object anyValue)" ], [ "convertLabel", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static String convertLabel(Object value)" ], [ "convertWidth", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static float convertWidth(Object value)" ], [ "convertValue", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Value convertValue(Object value)" ], [ "convertUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Units convertUnit(String unit)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Graph graph, String id)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Graph graph, String id)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Node node)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Node node)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Graph graph, String id)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Edge edge)" ], [ "getGlobalEnvironment", "org.graphstream.util", "Environment", "public static Environment getGlobalEnvironment()" ], [ "falseFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> falseFilter()" ], [ "trueFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> trueFilter()" ], [ "byAttributeFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)" ], [ "separateNodeAndEdgeFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)" ], [ "byExtremitiesFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)" ], [ "byIdFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byIdFilter(String idPattern)" ], [ "isContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)" ], [ "isIdContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)" ], [ "and", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)" ], [ "or", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)" ], [ "xor", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)" ], [ "not", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> not(Filter<T> f)" ], [ "addEscapes", "org.graphstream.util.parser", "TokenMgrError", "protected static final String addEscapes(String str)" ], [ "LexicalError", "org.graphstream.util.parser", "TokenMgrError", "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)" ], [ "add_escapes", "org.graphstream.util.parser", "ParseException", "static String add_escapes(String str)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind, String image)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind)" ], [ "countStepInFile", "org.graphstream.util", "StepCounter", "public static int countStepInFile(String path) throws IOException" ], [ "GET", "org.graphstream.stream.net", "HTTPSource", "protected static HashMap<String, Object> GET(HttpExchange ex)" ], [ "sinkFor", "org.graphstream.stream.file", "FileSinkFactory", "public static FileSink sinkFor(String filename)" ], [ "formatId", "org.graphstream.stream.file", "FileSinkTikZ", "protected static String formatId(String id)" ], [ "getInt", "org.graphstream.stream.file.pajek", "PajekContext", "protected static int getInt(Token nb) throws ParseException" ], [ "getReal", "org.graphstream.stream.file.pajek", "PajekContext", "protected static double getReal(Token nb) throws ParseException" ], [ "toColorValue", "org.graphstream.stream.file.pajek", "PajekContext", "public static String toColorValue(Token R, Token G, Token B) throws ParseException" ], [ "sourceFor", "org.graphstream.stream.file", "FileSourceFactory", "public static FileSource sourceFor(String fileName) throws IOException" ], [ "getXMLRootElement", "org.graphstream.stream.file", "FileSourceFactory", "public static String getXMLRootElement(String fileName) throws IOException" ], [ "formatStringForQuoting", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String formatStringForQuoting(String str)" ], [ "attributeString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String attributeString(String key, Object value, boolean remove)" ], [ "arrayString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String arrayString(Object value)" ], [ "valueString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String valueString(Object value)" ], [ "hashToString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String hashToString(HashMap<?, ?> hash)" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source)" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s, int options) throws java.io.IOException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decodeFromFile(String filename) throws java.io.IOException" ], [ "encodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeFromFile(String filename) throws java.io.IOException" ], [ "unmutableGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph unmutableGraph(Graph g)" ], [ "synchronizedGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph synchronizedGraph(Graph g)" ], [ "merge", "org.graphstream.graph.implementations", "Graphs", "public static Graph merge(Graph... graphs)" ], [ "clone", "org.graphstream.graph.implementations", "Graphs", "public static Graph clone(Graph g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "version16", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static boolean version16 = false;" ], [ "predefFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[][] predefFractions = new float[11][];" ], [ "predefFractions2", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions2 = { 0f, 1f };" ], [ "predefFractions3", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions3 = { 0f, 0.5f, 1f };" ], [ "predefFractions4", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };" ], [ "predefFractions5", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };" ], [ "predefFractions6", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };" ], [ "predefFractions7", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };" ], [ "predefFractions8", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };" ], [ "predefFractions9", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };" ], [ "predefFractions10", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "protected static ImageCache defaultImageCache;" ], [ "dots", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dots = { 1f, 1f };" ], [ "dashes", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dashes = { 3f, 3f };" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache;" ], [ "NULL_POINT2", "org.graphstream.ui.geom", "Point2", "public static final Point2 NULL_POINT2 = new Point2(0, 0);" ], [ "NULL_POINT3", "org.graphstream.ui.geom", "Point3", "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);" ], [ "DEFAULT_VIEW_ID", "org.graphstream.ui.view", "Viewer", "public static String DEFAULT_VIEW_ID = \"defaultView\";" ], [ "jjbitVec0", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };" ], [ "jjstrLiteralImages", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };" ], [ "lexStateNames", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };" ], [ "jjtoSkip", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };" ], [ "colorMap", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static HashMap<String,Color> colorMap;" ], [ "sharpColor1", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor1;" ], [ "sharpColor2", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor2;" ], [ "cssColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColor;" ], [ "cssColorA", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColorA;" ], [ "awtColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern awtColor;" ], [ "hexaColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern hexaColor;" ], [ "numberUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern numberUnit;" ], [ "number", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern number;" ], [ "acceptedAttribute", "org.graphstream.ui.graphicGraph", "GraphicElement", "protected static Pattern acceptedAttribute;" ], [ "DEFAULT_AN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_CNA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_AE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";" ], [ "DEFAULT_CEA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CEC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CER_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";" ], [ "DEFAULT_CGA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_CL_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";" ], [ "DEFAULT_ST_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";" ], [ "GLOBAL_ENV", "org.graphstream.util", "Environment", "public static Environment GLOBAL_ENV;" ], [ "LEXICAL_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int LEXICAL_ERROR = 0;" ], [ "STATIC_LEXER_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int STATIC_LEXER_ERROR = 1;" ], [ "INVALID_LEXICAL_STATE", "org.graphstream.util.parser", "TokenMgrError", "public static final int INVALID_LEXICAL_STATE = 2;" ], [ "LOOP_DETECTED", "org.graphstream.util.parser", "TokenMgrError", "public static final int LOOP_DETECTED = 3;" ], [ "staticFlag", "org.graphstream.util.parser", "SimpleCharStream", "public static final boolean staticFlag = false;" ], [ "ABBREVIATED_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");" ], [ "FULL_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");" ], [ "ABBREVIATED_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");" ], [ "FULL_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");" ], [ "LOCALE_DATE_AND_TIME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);" ], [ "CENTURY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");" ], [ "DAY_OF_MONTH_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");" ], [ "DATE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");" ], [ "DAY_OF_MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");" ], [ "DATE_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");" ], [ "WEEK_BASED_YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "WEEK_BASED_YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "ABBREVIATED_MONTH_NAME_ALIAS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");" ], [ "HOUR_OF_DAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");" ], [ "HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");" ], [ "DAY_OF_YEAR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");" ], [ "MILLISECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");" ], [ "EPOCH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent EPOCH = new EpochComponent();" ], [ "MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");" ], [ "MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");" ], [ "NEW_LINE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");" ], [ "AM_PM", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent AM_PM = new AMPMComponent();" ], [ "LOCALE_CLOCK_TIME_12_HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");" ], [ "HOUR_AND_MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");" ], [ "SECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");" ], [ "TABULATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");" ], [ "TIME_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");" ], [ "DAY_OF_WEEK_1_7", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");" ], [ "WEEK_OF_YEAR_FROM_SUNDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");" ], [ "WEEK_NUMBER_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");" ], [ "DAY_OF_WEEK_0_6", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");" ], [ "WEEK_OF_YEAR_FROM_MONDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");" ], [ "LOCALE_DATE_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");" ], [ "LOCALE_TIME_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");" ], [ "YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "UTC_OFFSET", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();" ], [ "LOCALE_TIME_ZONE_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");" ], [ "PERCENT", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");" ], [ "jjbitVec0", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoToken = { 0xff01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoSkip = { 0x1eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoToken = { 0xffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "XYZ_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String XYZ_ATTR = \"xyz\";" ], [ "WIDTH_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String WIDTH_ATTR = \"ui.tikz.width\";" ], [ "HEIGHT_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String HEIGHT_ATTR = \"ui.tikz.height\";" ], [ "DEFAULT_WIDTH", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_WIDTH = 10;" ], [ "DEFAULT_HEIGHT", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_HEIGHT = 10;" ], [ "DISPLAY_MIN_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;" ], [ "DISPLAY_MAX_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;" ], [ "jjbitVec0", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };" ], [ "lexStateNames", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoToken = { 0x3ffffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoToken = { 0x3fffffffffffc9L };" ], [ "jjtoSkip", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoSkip = { 0x6L };" ], [ "XMLNS", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";" ], [ "XMLNS_XSI", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";" ], [ "XMLNS_SL", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";" ], [ "XMLNS_VIZ", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";" ], [ "VERSION", "org.graphstream.stream.file.gexf", "GEXF", "public static final String VERSION = \"1.2\";" ], [ "BUFFER_SIZE", "org.graphstream.stream.file.dgs", "DGSParser", "protected static final int BUFFER_SIZE = 4096;" ], [ "ARRAY_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_OPEN = '{';" ], [ "ARRAY_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_CLOSE = '}';" ], [ "MAP_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_OPEN = '[';" ], [ "MAP_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_CLOSE = ']';" ], [ "gradientId", "org.graphstream.stream.file", "FileSinkSVG2", "static int gradientId = 0;" ], [ "gradientId", "org.graphstream.stream.file", "SVGStyle", "static int gradientId = 0;" ], [ "TIME_PREFIX", "org.graphstream.stream", "Timeline", "public static final String TIME_PREFIX = \"time\";" ], [ "SYNC_DISABLE_KEY", "org.graphstream.stream.sync", "SinkTime", "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";" ], [ "disableSync", "org.graphstream.stream.sync", "SinkTime", "protected static final boolean disableSync;" ], [ "LIGHT_YELLOW", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String LIGHT_YELLOW = \"\u001B[33;1m\";" ], [ "RESET", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String RESET = \"\u001B[0m\";" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "IncomingBuffer", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "EVENT_GETVERSION", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_GETVERSION = 0x00;" ], [ "EVENT_START", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_START = 0x01;" ], [ "EVENT_END", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_END = 0x02;" ], [ "EVENT_ADD_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE = 0x10;" ], [ "EVENT_DEL_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE = 0x11;" ], [ "EVENT_ADD_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE = 0x12;" ], [ "EVENT_DEL_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE = 0x13;" ], [ "EVENT_STEP", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_STEP = 0x14;" ], [ "EVENT_CLEARED", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CLEARED = 0x15;" ], [ "EVENT_ADD_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_GRAPH_ATTR = 0x16;" ], [ "EVENT_CHG_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_GRAPH_ATTR = 0x17;" ], [ "EVENT_DEL_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_GRAPH_ATTR = 0x18;" ], [ "EVENT_ADD_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE_ATTR = 0x19;" ], [ "EVENT_CHG_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_NODE_ATTR = 0x1a;" ], [ "EVENT_DEL_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE_ATTR = 0x1b;" ], [ "EVENT_ADD_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE_ATTR = 0x1c;" ], [ "EVENT_CHG_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_EDGE_ATTR = 0x1d;" ], [ "EVENT_DEL_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE_ATTR = 0x1e;" ], [ "TYPE_UNKNOWN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_UNKNOWN = 0x00;" ], [ "TYPE_BOOLEAN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN = 0x50;" ], [ "TYPE_BOOLEAN_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN_ARRAY = 0x51;" ], [ "TYPE_BYTE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE = 0x52;" ], [ "TYPE_BYTE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE_ARRAY = 0x53;" ], [ "TYPE_SHORT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT = 0x54;" ], [ "TYPE_SHORT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT_ARRAY = 0x55;" ], [ "TYPE_INT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT = 0x56;" ], [ "TYPE_INT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT_ARRAY = 0x57;" ], [ "TYPE_LONG", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG = 0x58;" ], [ "TYPE_LONG_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG_ARRAY = 0x59;" ], [ "TYPE_FLOAT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT = 0x5a;" ], [ "TYPE_FLOAT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT_ARRAY = 0x5b;" ], [ "TYPE_DOUBLE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE = 0x5c;" ], [ "TYPE_DOUBLE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE_ARRAY = 0x5d;" ], [ "TYPE_STRING", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_STRING = 0x5e;" ], [ "TYPE_RAW", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_RAW = 0x5f;" ], [ "TYPE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static byte TYPE_ARRAY = 0x60;" ], [ "TYPE_NULL", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_NULL = 0x61;" ], [ "COMMAND", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int COMMAND = 0x70;" ], [ "NO_OPTIONS", "org.graphstream.stream.netstream.packing", "Base64", "public final static int NO_OPTIONS = 0;" ], [ "ENCODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ENCODE = 1;" ], [ "DECODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DECODE = 0;" ], [ "GZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int GZIP = 2;" ], [ "DONT_GUNZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DONT_GUNZIP = 4;" ], [ "DO_BREAK_LINES", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DO_BREAK_LINES = 8;" ], [ "URL_SAFE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int URL_SAFE = 16;" ], [ "ORDERED", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ORDERED = 32;" ], [ "INITIAL_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final int INITIAL_EDGE_CAPACITY;" ], [ "GROWTH_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final double GROWTH_FACTOR = 1.1;" ], [ "I_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char I_EDGE = 0;" ], [ "IO_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char IO_EDGE = 1;" ], [ "O_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char O_EDGE = 2;" ], [ "GROW_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final double GROW_FACTOR = 1.1;" ], [ "DEFAULT_NODE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_NODE_CAPACITY = 128;" ], [ "DEFAULT_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_EDGE_CAPACITY = 1024;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "inputGraph", "org.graphstream.graph", "Graph" ], [ "replayGraph", "", "boolean" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "toString", "org.graphstream.stream.thread", "ThreadProxyPipeOld", "public String toString()" ], [ "elementSinks", "org.graphstream.stream", "SourceBase", "public Iterable<ElementSink> elementSinks()" ], [ "maybeUnregister", "org.graphstream.stream.thread", "ThreadProxyPipeOld", "protected boolean maybeUnregister()" ], [ "attributeSinks", "org.graphstream.stream", "SourceBase", "public Iterable<AttributeSink> attributeSinks()" ], [ "getNode", "org.graphstream.graph", "Graph", "public abstract <T> T getNode(String arg0)" ], [ "display", "org.graphstream.graph", "Graph", "public abstract Viewer display(boolean arg0)" ], [ "isStrict", "org.graphstream.graph", "Graph", "public abstract boolean isStrict()" ], [ "display", "org.graphstream.graph", "Graph", "public abstract Viewer display()" ], [ "removeEdge", "org.graphstream.graph", "Graph", "public abstract <T> T removeEdge(Node arg0, Node arg1) throws ElementNotFoundException" ], [ "getEdge", "org.graphstream.graph", "Graph", "public abstract <T> T getEdge(int arg0) throws IndexOutOfBoundsException" ], [ "addEdge", "org.graphstream.graph", "Graph", "public abstract <T> T addEdge(String arg0, Node arg1, Node arg2, boolean arg3) throws IdAlreadyInUseException, EdgeRejectedException" ], [ "isAutoCreationEnabled", "org.graphstream.graph", "Graph", "public abstract boolean isAutoCreationEnabled()" ], [ "nullAttributesAreErrors", "org.graphstream.graph", "Graph", "public abstract boolean nullAttributesAreErrors()" ], [ "removeEdge", "org.graphstream.graph", "Graph", "public abstract <T> T removeEdge(String arg0, String arg1) throws ElementNotFoundException" ], [ "attributeSinks", "org.graphstream.graph", "Graph", "public abstract Iterable<AttributeSink> attributeSinks()" ], [ "removeEdge", "org.graphstream.graph", "Graph", "public abstract <T> T removeEdge(String arg0) throws ElementNotFoundException" ], [ "removeEdge", "org.graphstream.graph", "Graph", "public abstract <T> T removeEdge(Edge arg0)" ], [ "addEdge", "org.graphstream.graph", "Graph", "public abstract <T> T addEdge(String arg0, String arg1, String arg2) throws IdAlreadyInUseException, ElementNotFoundException, EdgeRejectedException" ], [ "addEdge", "org.graphstream.graph", "Graph", "public abstract <T> T addEdge(String arg0, String arg1, String arg2, boolean arg3) throws IdAlreadyInUseException, ElementNotFoundException" ], [ "getStep", "org.graphstream.graph", "Graph", "public abstract double getStep()" ], [ "removeEdge", "org.graphstream.graph", "Graph", "public abstract <T> T removeEdge(int arg0, int arg1) throws IndexOutOfBoundsException, ElementNotFoundException" ], [ "nodeFactory", "org.graphstream.graph", "Graph", "public abstract NodeFactory<? extends Node> nodeFactory()" ], [ "addEdge", "org.graphstream.graph", "Graph", "public abstract <T> T addEdge(String arg0, int arg1, int arg2, boolean arg3) throws IndexOutOfBoundsException, IdAlreadyInUseException, EdgeRejectedException" ], [ "addNode", "org.graphstream.graph", "Graph", "public abstract <T> T addNode(String arg0) throws IdAlreadyInUseException" ], [ "addEdge", "org.graphstream.graph", "Graph", "public abstract <T> T addEdge(String arg0, int arg1, int arg2) throws IndexOutOfBoundsException, IdAlreadyInUseException, EdgeRejectedException" ], [ "getNode", "org.graphstream.graph", "Graph", "public abstract <T> T getNode(int arg0) throws IndexOutOfBoundsException" ], [ "addEdge", "org.graphstream.graph", "Graph", "public abstract <T> T addEdge(String arg0, Node arg1, Node arg2) throws IdAlreadyInUseException, EdgeRejectedException" ], [ "removeNode", "org.graphstream.graph", "Graph", "public abstract <T> T removeNode(String arg0) throws ElementNotFoundException" ], [ "removeNode", "org.graphstream.graph", "Graph", "public abstract <T> T removeNode(int arg0) throws IndexOutOfBoundsException" ], [ "edgeFactory", "org.graphstream.graph", "Graph", "public abstract EdgeFactory<? extends Edge> edgeFactory()" ], [ "removeEdge", "org.graphstream.graph", "Graph", "public abstract <T> T removeEdge(int arg0) throws IndexOutOfBoundsException" ], [ "elementSinks", "org.graphstream.graph", "Graph", "public abstract Iterable<ElementSink> elementSinks()" ], [ "getEdge", "org.graphstream.graph", "Graph", "public abstract <T> T getEdge(String arg0)" ], [ "removeNode", "org.graphstream.graph", "Graph", "public abstract <T> T removeNode(Node arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0, Class<T> arg1)" ], [ "hasVector", "org.graphstream.graph", "Element", "public abstract boolean hasVector(String arg0)" ], [ "getFirstAttributeOf", "org.graphstream.graph", "Element", "public abstract transient <T> T getFirstAttributeOf(String[] arg0)" ], [ "getNumber", "org.graphstream.graph", "Element", "public abstract double getNumber(String arg0)" ], [ "getEachAttributeKey", "org.graphstream.graph", "Element", "public abstract Iterable<String> getEachAttributeKey()" ], [ "getAttributeKeySet", "org.graphstream.graph", "Element", "public abstract Collection<String> getAttributeKeySet()" ], [ "hasNumber", "org.graphstream.graph", "Element", "public abstract boolean hasNumber(String arg0)" ], [ "getAttributeKeyIterator", "org.graphstream.graph", "Element", "public abstract Iterator<String> getAttributeKeyIterator()" ], [ "hasLabel", "org.graphstream.graph", "Element", "public abstract boolean hasLabel(String arg0)" ], [ "getAttributeCount", "org.graphstream.graph", "Element", "public abstract int getAttributeCount()" ], [ "getAttribute", "org.graphstream.graph", "Element", "public abstract <T> T getAttribute(String arg0)" ], [ "hasArray", "org.graphstream.graph", "Element", "public abstract boolean hasArray(String arg0)" ], [ "getIndex", "org.graphstream.graph", "Element", "public abstract int getIndex()" ], [ "getLabel", "org.graphstream.graph", "Element", "public abstract CharSequence getLabel(String arg0)" ], [ "getHash", "org.graphstream.graph", "Element", "public abstract HashMap<?, ?> getHash(String arg0)" ], [ "hasHash", "org.graphstream.graph", "Element", "public abstract boolean hasHash(String arg0)" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0, Class<?> arg1)" ], [ "getArray", "org.graphstream.graph", "Element", "public abstract Object[] getArray(String arg0)" ], [ "getId", "org.graphstream.graph", "Element", "public abstract String getId()" ], [ "getVector", "org.graphstream.graph", "Element", "public abstract ArrayList<? extends Number> getVector(String arg0)" ], [ "hasAttribute", "org.graphstream.graph", "Element", "public abstract boolean hasAttribute(String arg0)" ], [ "spliterator", "java.lang", "Iterable", "public default Spliterator<T> spliterator()" ], [ "iterator", "java.lang", "Iterable", "public abstract Iterator<T> iterator()" ], [ "getNodeIterator", "org.graphstream.graph", "Structure", "public abstract <T> Iterator<T> getNodeIterator()" ], [ "getEachNode", "org.graphstream.graph", "Structure", "public abstract <T> Iterable<? extends T> getEachNode()" ], [ "getNodeSet", "org.graphstream.graph", "Structure", "public abstract <T> Collection<T> getNodeSet()" ], [ "getEdgeIterator", "org.graphstream.graph", "Structure", "public abstract <T> Iterator<T> getEdgeIterator()" ], [ "getEachEdge", "org.graphstream.graph", "Structure", "public abstract <T> Iterable<? extends T> getEachEdge()" ], [ "getNodeCount", "org.graphstream.graph", "Structure", "public abstract int getNodeCount()" ], [ "getEdgeSet", "org.graphstream.graph", "Structure", "public abstract <T> Collection<T> getEdgeSet()" ], [ "getEdgeCount", "org.graphstream.graph", "Structure", "public abstract int getEdgeCount()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "id", "org.graphstream.stream.thread", "ThreadProxyPipeOld", "protected String id;" ], [ "from", "org.graphstream.stream.thread", "ThreadProxyPipeOld", "protected String from;" ], [ "events", "org.graphstream.stream.thread", "ThreadProxyPipeOld", "protected MBox events;" ], [ "input", "org.graphstream.stream.thread", "ThreadProxyPipeOld", "protected Source input;" ], [ "unregisterWhenPossible", "org.graphstream.stream.thread", "ThreadProxyPipeOld", "protected boolean unregisterWhenPossible = false;" ], [ "attrSinks", "org.graphstream.stream", "SourceBase", "protected ArrayList<AttributeSink> attrSinks;" ], [ "eltsSinks", "org.graphstream.stream", "SourceBase", "protected ArrayList<ElementSink> eltsSinks;" ], [ "eventQueue", "org.graphstream.stream", "SourceBase", "protected LinkedList<SourceBase.GraphEvent> eventQueue;" ], [ "eventProcessing", "org.graphstream.stream", "SourceBase", "protected boolean eventProcessing;" ], [ "sourceId", "org.graphstream.stream", "SourceBase", "protected String sourceId;" ], [ "sourceTime", "org.graphstream.stream", "SourceBase", "protected SourceTime sourceTime;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 3702,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "gs-core-1.3",
  "packageName" : "org.graphstream.stream",
  "className" : "SourceBase",
  "javadocTag" : "@param sourceId The source identifier.",
  "methodJavadoc" : "    /**\n\t * Send a \"node added\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param nodeId\n\t *            The node identifier.\n\t */",
  "methodSourceCode" : "public void sendNodeAdded(String sourceId, long timeId, String nodeId){\n    if (!eventProcessing) {\n        eventProcessing = true;\n        manageEvents();\n        for (int i = 0; i < eltsSinks.size(); i++) eltsSinks.get(i).nodeAdded(sourceId, timeId, nodeId);\n        manageEvents();\n        eventProcessing = false;\n    } else {\n        eventQueue.add(new AfterNodeAddEvent(sourceId, timeId, nodeId));\n    }\n}",
  "classJavadoc" : "/**\n * Base implementation of an input that provide basic sink handling.\n * \n * <p>\n * This implementation can register a set of graph sinks (or separate sets of\n * attributes or elements sinks) and provides protected methods to easily\n * broadcast events to all the sinks (beginning with \"send\").\n * </p>\n * \n * <p>\n * Each time you want to produce an event toward all registered sinks, you call\n * one of the \"send*\" methods with correct parameters. The parameters of the\n * \"send*\" methods maps to the usual GraphStream events.\n * </p>\n * \n * <p>\n * This class is \"reentrant\". This means that if a send*() method is called\n * during the execution of another or the same send*() method, the event is\n * deferred until the first send*() method is finished. This avoid recursive\n * loops if a sink modifies the input during event handling.\n * </p>\n */",
  "classSourceCode" : "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign√©      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.stream;\n\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\n\nimport org.graphstream.graph.implementations.AbstractElement.AttributeChangeEvent;\nimport org.graphstream.stream.sync.SourceTime;\n\n/**\n * Base implementation of an input that provide basic sink handling.\n * \n * <p>\n * This implementation can register a set of graph sinks (or separate sets of\n * attributes or elements sinks) and provides protected methods to easily\n * broadcast events to all the sinks (beginning with \"send\").\n * </p>\n * \n * <p>\n * Each time you want to produce an event toward all registered sinks, you call\n * one of the \"send*\" methods with correct parameters. The parameters of the\n * \"send*\" methods maps to the usual GraphStream events.\n * </p>\n * \n * <p>\n * This class is \"reentrant\". This means that if a send*() method is called\n * during the execution of another or the same send*() method, the event is\n * deferred until the first send*() method is finished. This avoid recursive\n * loops if a sink modifies the input during event handling.\n * </p>\n */\npublic abstract class SourceBase implements Source {\n\t// Attribute\n\n\tpublic enum ElementType {\n\t\tNODE, EDGE, GRAPH\n\t};\n\n\t/**\n\t * Set of graph attributes sinks.\n\t */\n\tprotected ArrayList<AttributeSink> attrSinks = new ArrayList<AttributeSink>();\n\n\t/**\n\t * Set of graph elements sinks.\n\t */\n\tprotected ArrayList<ElementSink> eltsSinks = new ArrayList<ElementSink>();\n\n\t/**\n\t * A queue that allow the management of events (nodes/edge\n\t * add/delete/change) in the right order.\n\t */\n\tprotected LinkedList<GraphEvent> eventQueue = new LinkedList<GraphEvent>();\n\n\t/**\n\t * A boolean that indicates whether or not an Sink event is being sent\n\t * during another one.\n\t */\n\tprotected boolean eventProcessing = false;\n\n\t/**\n\t * Id of this source.\n\t */\n\tprotected String sourceId;\n\t\n\t/**\n\t * Time of this source.\n\t */\n\tprotected SourceTime sourceTime;\n\n\t// Construction\n\n\tprotected SourceBase() {\n\t\tthis(String.format(\"sourceOnThread#%d_%d\", Thread.currentThread()\n\t\t\t\t.getId(), System.currentTimeMillis()\n\t\t\t\t+ ((int) (Math.random() * 1000))));\n\t}\n\n\tprotected SourceBase(String sourceId) {\n\t\tthis.sourceId = sourceId;\n\t\tthis.sourceTime = new SourceTime(sourceId);\n\t}\n\n\t// Access\n\n\tpublic Iterable<AttributeSink> attributeSinks() {\n\t\treturn attrSinks;\n\t}\n\n\tpublic Iterable<ElementSink> elementSinks() {\n\t\treturn eltsSinks;\n\t}\n\n\t// Command\n\n\tpublic void addSink(Sink sink) {\n\t\taddAttributeSink(sink);\n\t\taddElementSink(sink);\n\t}\n\n\tpublic void addAttributeSink(AttributeSink sink) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tattrSinks.add(sink);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new AddToListEvent<AttributeSink>(attrSinks, sink));\n\t\t}\n\t}\n\n\tpublic void addElementSink(ElementSink sink) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\teltsSinks.add(sink);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new AddToListEvent<ElementSink>(eltsSinks, sink));\n\t\t}\n\t}\n\n\tpublic void clearSinks() {\n\t\tclearElementSinks();\n\t\tclearAttributeSinks();\n\t}\n\n\tpublic void clearElementSinks() {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\teltsSinks.clear();\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new ClearListEvent<ElementSink>(eltsSinks));\n\t\t}\n\t}\n\n\tpublic void clearAttributeSinks() {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tattrSinks.clear();\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new ClearListEvent<AttributeSink>(attrSinks));\n\t\t}\n\t}\n\n\tpublic void removeSink(Sink sink) {\n\t\tremoveAttributeSink(sink);\n\t\tremoveElementSink(sink);\n\t}\n\n\tpublic void removeAttributeSink(AttributeSink sink) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tattrSinks.remove(sink);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new RemoveFromListEvent<AttributeSink>(attrSinks,\n\t\t\t\t\tsink));\n\t\t}\n\t}\n\n\tpublic void removeElementSink(ElementSink sink) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\teltsSinks.remove(sink);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue\n\t\t\t\t\t.add(new RemoveFromListEvent<ElementSink>(eltsSinks, sink));\n\t\t}\n\t}\n\n\t/**\n\t * Send a \"graph cleared\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t */\n\tpublic void sendGraphCleared(String sourceId) {\n\t\tsendGraphCleared(sourceId, sourceTime.newEvent());\n\t}\n\n\t/**\n\t * Send a \"graph cleared\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t */\n\tpublic void sendGraphCleared(String sourceId, long timeId) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).graphCleared(sourceId, timeId);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new BeforeGraphClearEvent(sourceId, timeId));\n\t\t}\n\t}\n\n\t/**\n\t * Send a \"step begins\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The graph identifier.\n\t * @param step\n\t *            The step time stamp.\n\t */\n\tpublic void sendStepBegins(String sourceId, double step) {\n\t\tsendStepBegins(sourceId, sourceTime.newEvent(), step);\n\t}\n\n\t/**\n\t * Send a \"step begins\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The graph identifier.\n\t * @param timeId\n\t * @param step\n\t *            The step time stamp.\n\t */\n\tpublic void sendStepBegins(String sourceId, long timeId, double step) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).stepBegins(sourceId, timeId, step);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new StepBeginsEvent(sourceId, timeId, step));\n\t\t}\n\t}\n\n\t/**\n\t * Send a \"node added\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param nodeId\n\t *            The node identifier.\n\t */\n\tpublic void sendNodeAdded(String sourceId, String nodeId) {\n\t\tsendNodeAdded(sourceId, sourceTime.newEvent(), nodeId);\n\t}\n\n\t/**\n\t * Send a \"node added\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param nodeId\n\t *            The node identifier.\n\t */\n\tpublic void sendNodeAdded(String sourceId, long timeId, String nodeId) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).nodeAdded(sourceId, timeId, nodeId);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new AfterNodeAddEvent(sourceId, timeId, nodeId));\n\t\t}\n\t}\n\n\t/**\n\t * Send a \"node removed\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The graph identifier.\n\t * @param nodeId\n\t *            The node identifier.\n\t */\n\tpublic void sendNodeRemoved(String sourceId, String nodeId) {\n\t\tsendNodeRemoved(sourceId, sourceTime.newEvent(), nodeId);\n\t}\n\n\t/**\n\t * Send a \"node removed\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The graph identifier.\n\t * @param timeId\n\t * @param nodeId\n\t *            The node identifier.\n\t */\n\tpublic void sendNodeRemoved(String sourceId, long timeId, String nodeId) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).nodeRemoved(sourceId, timeId, nodeId);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new BeforeNodeRemoveEvent(sourceId, timeId, nodeId));\n\t\t}\n\t}\n\n\t/**\n\t * Send an \"edge added\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param edgeId\n\t *            The edge identifier.\n\t * @param fromNodeId\n\t *            The edge start node.\n\t * @param toNodeId\n\t *            The edge end node.\n\t * @param directed\n\t *            Is the edge directed?.\n\t */\n\tpublic void sendEdgeAdded(String sourceId, String edgeId,\n\t\t\tString fromNodeId, String toNodeId, boolean directed) {\n\t\tsendEdgeAdded(sourceId, sourceTime.newEvent(), edgeId, fromNodeId,\n\t\t\t\ttoNodeId, directed);\n\t}\n\n\t/**\n\t * Send an \"edge added\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param edgeId\n\t *            The edge identifier.\n\t * @param fromNodeId\n\t *            The edge start node.\n\t * @param toNodeId\n\t *            The edge end node.\n\t * @param directed\n\t *            Is the edge directed?.\n\t */\n\tpublic void sendEdgeAdded(String sourceId, long timeId, String edgeId,\n\t\t\tString fromNodeId, String toNodeId, boolean directed) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).edgeAdded(sourceId, timeId, edgeId,\n\t\t\t\t\t\tfromNodeId, toNodeId, directed);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new AfterEdgeAddEvent(sourceId, timeId, edgeId,\n\t\t\t\t\tfromNodeId, toNodeId, directed));\n\t\t}\n\t}\n\n\t/**\n\t * Send a \"edge removed\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param edgeId\n\t *            The edge identifier.\n\t */\n\tpublic void sendEdgeRemoved(String sourceId, String edgeId) {\n\t\tsendEdgeRemoved(sourceId, sourceTime.newEvent(), edgeId);\n\t}\n\n\t/**\n\t * Send a \"edge removed\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param edgeId\n\t *            The edge identifier.\n\t */\n\tpublic void sendEdgeRemoved(String sourceId, long timeId, String edgeId) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).edgeRemoved(sourceId, timeId, edgeId);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new BeforeEdgeRemoveEvent(sourceId, timeId, edgeId));\n\t\t}\n\t}\n\n\t/**\n\t * Send a \"edge attribute added\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param edgeId\n\t *            The edge identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param value\n\t *            The attribute value.\n\t */\n\tpublic void sendEdgeAttributeAdded(String sourceId, String edgeId,\n\t\t\tString attribute, Object value) {\n\t\tsendAttributeChangedEvent(sourceId, edgeId, ElementType.EDGE,\n\t\t\t\tattribute, AttributeChangeEvent.ADD, null, value);\n\t}\n\n\t/**\n\t * Send a \"edge attribute added\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param edgeId\n\t *            The edge identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param value\n\t *            The attribute value.\n\t */\n\tpublic void sendEdgeAttributeAdded(String sourceId, long timeId,\n\t\t\tString edgeId, String attribute, Object value) {\n\t\tsendAttributeChangedEvent(sourceId, timeId, edgeId, ElementType.EDGE,\n\t\t\t\tattribute, AttributeChangeEvent.ADD, null, value);\n\t}\n\n\t/**\n\t * Send a \"edge attribute changed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param edgeId\n\t *            The edge identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param oldValue\n\t *            The old attribute value.\n\t * @param newValue\n\t *            The new attribute value.\n\t */\n\tpublic void sendEdgeAttributeChanged(String sourceId, String edgeId,\n\t\t\tString attribute, Object oldValue, Object newValue) {\n\t\tsendAttributeChangedEvent(sourceId, edgeId, ElementType.EDGE,\n\t\t\t\tattribute, AttributeChangeEvent.CHANGE, oldValue, newValue);\n\t}\n\n\t/**\n\t * Send a \"edge attribute changed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param edgeId\n\t *            The edge identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param oldValue\n\t *            The old attribute value.\n\t * @param newValue\n\t *            The new attribute value.\n\t */\n\tpublic void sendEdgeAttributeChanged(String sourceId, long timeId,\n\t\t\tString edgeId, String attribute, Object oldValue, Object newValue) {\n\t\tsendAttributeChangedEvent(sourceId, timeId, edgeId, ElementType.EDGE,\n\t\t\t\tattribute, AttributeChangeEvent.CHANGE, oldValue, newValue);\n\t}\n\n\t/**\n\t * Send a \"edge attribute removed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param edgeId\n\t *            The edge identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t */\n\tpublic void sendEdgeAttributeRemoved(String sourceId, String edgeId,\n\t\t\tString attribute) {\n\t\tsendAttributeChangedEvent(sourceId, edgeId, ElementType.EDGE,\n\t\t\t\tattribute, AttributeChangeEvent.REMOVE, null, null);\n\t}\n\n\t/**\n\t * Send a \"edge attribute removed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param edgeId\n\t *            The edge identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t */\n\tpublic void sendEdgeAttributeRemoved(String sourceId, long timeId,\n\t\t\tString edgeId, String attribute) {\n\t\tsendAttributeChangedEvent(sourceId, timeId, edgeId, ElementType.EDGE,\n\t\t\t\tattribute, AttributeChangeEvent.REMOVE, null, null);\n\t}\n\n\t/**\n\t * Send a \"graph attribute added\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param value\n\t *            The attribute value.\n\t */\n\tpublic void sendGraphAttributeAdded(String sourceId, String attribute,\n\t\t\tObject value) {\n\t\tsendAttributeChangedEvent(sourceId, null, ElementType.GRAPH, attribute,\n\t\t\t\tAttributeChangeEvent.ADD, null, value);\n\t}\n\n\t/**\n\t * Send a \"graph attribute added\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param attribute\n\t *            The attribute name.\n\t * @param value\n\t *            The attribute value.\n\t */\n\tpublic void sendGraphAttributeAdded(String sourceId, long timeId,\n\t\t\tString attribute, Object value) {\n\t\tsendAttributeChangedEvent(sourceId, timeId, null, ElementType.GRAPH,\n\t\t\t\tattribute, AttributeChangeEvent.ADD, null, value);\n\t}\n\n\t/**\n\t * Send a \"graph attribute changed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param oldValue\n\t *            The attribute old value.\n\t * @param newValue\n\t *            The attribute new value.\n\t */\n\tpublic void sendGraphAttributeChanged(String sourceId, String attribute,\n\t\t\tObject oldValue, Object newValue) {\n\t\tsendAttributeChangedEvent(sourceId, null, ElementType.GRAPH, attribute,\n\t\t\t\tAttributeChangeEvent.CHANGE, oldValue, newValue);\n\t}\n\n\t/**\n\t * Send a \"graph attribute changed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param attribute\n\t *            The attribute name.\n\t * @param oldValue\n\t *            The attribute old value.\n\t * @param newValue\n\t *            The attribute new value.\n\t */\n\tpublic void sendGraphAttributeChanged(String sourceId, long timeId,\n\t\t\tString attribute, Object oldValue, Object newValue) {\n\t\tsendAttributeChangedEvent(sourceId, timeId, null, ElementType.GRAPH,\n\t\t\t\tattribute, AttributeChangeEvent.CHANGE, oldValue, newValue);\n\t}\n\n\t/**\n\t * Send a \"graph attribute removed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t */\n\tpublic void sendGraphAttributeRemoved(String sourceId, String attribute) {\n\t\tsendAttributeChangedEvent(sourceId, null, ElementType.GRAPH, attribute,\n\t\t\t\tAttributeChangeEvent.REMOVE, null, null);\n\t}\n\n\t/**\n\t * Send a \"graph attribute removed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param attribute\n\t *            The attribute name.\n\t */\n\tpublic void sendGraphAttributeRemoved(String sourceId, long timeId,\n\t\t\tString attribute) {\n\t\tsendAttributeChangedEvent(sourceId, timeId, null, ElementType.GRAPH,\n\t\t\t\tattribute, AttributeChangeEvent.REMOVE, null, null);\n\t}\n\n\t/**\n\t * Send a \"node attribute added\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param nodeId\n\t *            The node identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param value\n\t *            The attribute value.\n\t */\n\tpublic void sendNodeAttributeAdded(String sourceId, String nodeId,\n\t\t\tString attribute, Object value) {\n\t\tsendAttributeChangedEvent(sourceId, nodeId, ElementType.NODE,\n\t\t\t\tattribute, AttributeChangeEvent.ADD, null, value);\n\t}\n\n\t/**\n\t * Send a \"node attribute added\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param nodeId\n\t *            The node identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param value\n\t *            The attribute value.\n\t */\n\tpublic void sendNodeAttributeAdded(String sourceId, long timeId,\n\t\t\tString nodeId, String attribute, Object value) {\n\t\tsendAttributeChangedEvent(sourceId, timeId, nodeId, ElementType.NODE,\n\t\t\t\tattribute, AttributeChangeEvent.ADD, null, value);\n\t}\n\n\t/**\n\t * Send a \"node attribute changed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param nodeId\n\t *            The node identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param oldValue\n\t *            The attribute old value.\n\t * @param newValue\n\t *            The attribute new value.\n\t */\n\tpublic void sendNodeAttributeChanged(String sourceId, String nodeId,\n\t\t\tString attribute, Object oldValue, Object newValue) {\n\t\tsendAttributeChangedEvent(sourceId, nodeId, ElementType.NODE,\n\t\t\t\tattribute, AttributeChangeEvent.CHANGE, oldValue, newValue);\n\t}\n\n\t/**\n\t * Send a \"node attribute changed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param nodeId\n\t *            The node identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param oldValue\n\t *            The attribute old value.\n\t * @param newValue\n\t *            The attribute new value.\n\t */\n\tpublic void sendNodeAttributeChanged(String sourceId, long timeId,\n\t\t\tString nodeId, String attribute, Object oldValue, Object newValue) {\n\t\tsendAttributeChangedEvent(sourceId, timeId, nodeId, ElementType.NODE,\n\t\t\t\tattribute, AttributeChangeEvent.CHANGE, oldValue, newValue);\n\t}\n\n\t/**\n\t * Send a \"node attribute removed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param nodeId\n\t *            The node identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t */\n\tpublic void sendNodeAttributeRemoved(String sourceId, String nodeId,\n\t\t\tString attribute) {\n\t\tsendAttributeChangedEvent(sourceId, nodeId, ElementType.NODE,\n\t\t\t\tattribute, AttributeChangeEvent.REMOVE, null, null);\n\t}\n\n\t/**\n\t * Send a \"node attribute removed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param nodeId\n\t *            The node identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t */\n\tpublic void sendNodeAttributeRemoved(String sourceId, long timeId,\n\t\t\tString nodeId, String attribute) {\n\t\tsendAttributeChangedEvent(sourceId, timeId, nodeId, ElementType.NODE,\n\t\t\t\tattribute, AttributeChangeEvent.REMOVE, null, null);\n\t}\n\n\t/**\n\t * Send a add/change/remove attribute event on an element. This method is a\n\t * generic way of notifying of an attribute change and is equivalent to\n\t * individual send*Attribute*() methods.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param eltId\n\t *            The changed element identifier.\n\t * @param eltType\n\t *            The changed element type.\n\t * @param attribute\n\t *            The changed attribute.\n\t * @param event\n\t *            The add/change/remove action.\n\t * @param oldValue\n\t *            The old attribute value (null if the attribute is removed or\n\t *            added).\n\t * @param newValue\n\t *            The new attribute value (null if removed).\n\t */\n\tpublic void sendAttributeChangedEvent(String sourceId, String eltId,\n\t\t\tElementType eltType, String attribute, AttributeChangeEvent event,\n\t\t\tObject oldValue, Object newValue) {\n\t\tsendAttributeChangedEvent(sourceId, sourceTime.newEvent(), eltId,\n\t\t\t\teltType, attribute, event, oldValue, newValue);\n\t}\n\n\tpublic void sendAttributeChangedEvent(String sourceId, long timeId,\n\t\t\tString eltId, ElementType eltType, String attribute,\n\t\t\tAttributeChangeEvent event, Object oldValue, Object newValue) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tif (event == AttributeChangeEvent.ADD) {\n\t\t\t\tif (eltType == ElementType.NODE) {\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).nodeAttributeAdded(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute, newValue);\n\t\t\t\t} else if (eltType == ElementType.EDGE) {\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).edgeAttributeAdded(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute, newValue);\n\t\t\t\t} else {\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).graphAttributeAdded(sourceId, timeId,\n\t\t\t\t\t\t\t\tattribute, newValue);\n\t\t\t\t}\n\t\t\t} else if (event == AttributeChangeEvent.REMOVE) {\n\t\t\t\tif (eltType == ElementType.NODE) {\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).nodeAttributeRemoved(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute);\n\t\t\t\t} else if (eltType == ElementType.EDGE) {\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).edgeAttributeRemoved(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute);\n\t\t\t\t} else {\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).graphAttributeRemoved(sourceId,\n\t\t\t\t\t\t\t\ttimeId, attribute);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (eltType == ElementType.NODE) {\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).nodeAttributeChanged(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute, oldValue, newValue);\n\t\t\t\t} else if (eltType == ElementType.EDGE) {\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).edgeAttributeChanged(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute, oldValue, newValue);\n\t\t\t\t} else {\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).graphAttributeChanged(sourceId,\n\t\t\t\t\t\t\t\ttimeId, attribute, oldValue, newValue);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new AttributeChangedEvent(sourceId, timeId, eltId,\n\t\t\t\t\teltType, attribute, event, oldValue, newValue));\n\t\t}\n\t}\n\n\t// Deferred event management\n\n\t/**\n\t * If in \"event processing mode\", ensure all pending events are processed.\n\t */\n\tprotected void manageEvents() {\n\t\tif (eventProcessing) {\n\t\t\twhile (!eventQueue.isEmpty())\n\t\t\t\teventQueue.remove().trigger();\n\t\t}\n\t}\n\n\t// Events Management\n\n\t/**\n\t * Interface that provide general purpose classification for evens involved\n\t * in graph modifications\n\t */\n\tabstract class GraphEvent {\n\t\tString sourceId;\n\t\tlong timeId;\n\n\t\tGraphEvent(String sourceId, long timeId) {\n\t\t\tthis.sourceId = sourceId;\n\t\t\tthis.timeId = timeId;\n\t\t}\n\n\t\tabstract void trigger();\n\t}\n\n\tclass AfterEdgeAddEvent extends GraphEvent {\n\t\tString edgeId;\n\t\tString fromNodeId;\n\t\tString toNodeId;\n\t\tboolean directed;\n\n\t\tAfterEdgeAddEvent(String sourceId, long timeId, String edgeId,\n\t\t\t\tString fromNodeId, String toNodeId, boolean directed) {\n\t\t\tsuper(sourceId, timeId);\n\t\t\tthis.edgeId = edgeId;\n\t\t\tthis.fromNodeId = fromNodeId;\n\t\t\tthis.toNodeId = toNodeId;\n\t\t\tthis.directed = directed;\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).edgeAdded(sourceId, timeId, edgeId,\n\t\t\t\t\t\tfromNodeId, toNodeId, directed);\n\t\t}\n\t}\n\n\tclass BeforeEdgeRemoveEvent extends GraphEvent {\n\t\tString edgeId;\n\n\t\tBeforeEdgeRemoveEvent(String sourceId, long timeId, String edgeId) {\n\t\t\tsuper(sourceId, timeId);\n\t\t\tthis.edgeId = edgeId;\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).edgeRemoved(sourceId, timeId, edgeId);\n\t\t}\n\t}\n\n\tclass AfterNodeAddEvent extends GraphEvent {\n\t\tString nodeId;\n\n\t\tAfterNodeAddEvent(String sourceId, long timeId, String nodeId) {\n\t\t\tsuper(sourceId, timeId);\n\t\t\tthis.nodeId = nodeId;\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).nodeAdded(sourceId, timeId, nodeId);\n\t\t}\n\t}\n\n\tclass BeforeNodeRemoveEvent extends GraphEvent {\n\t\tString nodeId;\n\n\t\tBeforeNodeRemoveEvent(String sourceId, long timeId, String nodeId) {\n\t\t\tsuper(sourceId, timeId);\n\t\t\tthis.nodeId = nodeId;\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).nodeRemoved(sourceId, timeId, nodeId);\n\t\t}\n\t}\n\n\tclass BeforeGraphClearEvent extends GraphEvent {\n\t\tBeforeGraphClearEvent(String sourceId, long timeId) {\n\t\t\tsuper(sourceId, timeId);\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).graphCleared(sourceId, timeId);\n\t\t}\n\t}\n\n\tclass StepBeginsEvent extends GraphEvent {\n\t\tdouble step;\n\n\t\tStepBeginsEvent(String sourceId, long timeId, double step) {\n\t\t\tsuper(sourceId, timeId);\n\t\t\tthis.step = step;\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).stepBegins(sourceId, timeId, step);\n\t\t}\n\t}\n\n\tclass AttributeChangedEvent extends GraphEvent {\n\t\tElementType eltType;\n\n\t\tString eltId;\n\n\t\tString attribute;\n\n\t\tAttributeChangeEvent event;\n\n\t\tObject oldValue;\n\n\t\tObject newValue;\n\n\t\tAttributeChangedEvent(String sourceId, long timeId, String eltId,\n\t\t\t\tElementType eltType, String attribute,\n\t\t\t\tAttributeChangeEvent event, Object oldValue, Object newValue) {\n\t\t\tsuper(sourceId, timeId);\n\t\t\tthis.eltType = eltType;\n\t\t\tthis.eltId = eltId;\n\t\t\tthis.attribute = attribute;\n\t\t\tthis.event = event;\n\t\t\tthis.oldValue = oldValue;\n\t\t\tthis.newValue = newValue;\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tswitch (event) {\n\t\t\tcase ADD:\n\t\t\t\tswitch (eltType) {\n\t\t\t\tcase NODE:\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).nodeAttributeAdded(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute, newValue);\n\t\t\t\t\tbreak;\n\t\t\t\tcase EDGE:\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).edgeAttributeAdded(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute, newValue);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).graphAttributeAdded(sourceId, timeId,\n\t\t\t\t\t\t\t\tattribute, newValue);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase REMOVE:\n\t\t\t\tswitch (eltType) {\n\t\t\t\tcase NODE:\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).nodeAttributeRemoved(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute);\n\t\t\t\t\tbreak;\n\t\t\t\tcase EDGE:\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).edgeAttributeRemoved(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).graphAttributeRemoved(sourceId,\n\t\t\t\t\t\t\t\ttimeId, attribute);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tswitch (eltType) {\n\t\t\t\tcase NODE:\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).nodeAttributeChanged(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute, oldValue, newValue);\n\t\t\t\t\tbreak;\n\t\t\t\tcase EDGE:\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).edgeAttributeChanged(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute, oldValue, newValue);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).graphAttributeChanged(sourceId,\n\t\t\t\t\t\t\t\ttimeId, attribute, oldValue, newValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tclass AddToListEvent<T> extends GraphEvent {\n\t\tList<T> l;\n\t\tT obj;\n\n\t\tAddToListEvent(List<T> l, T obj) {\n\t\t\tsuper(null, -1);\n\t\t\tthis.l = l;\n\t\t\tthis.obj = obj;\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tl.add(obj);\n\t\t}\n\t}\n\n\tclass RemoveFromListEvent<T> extends GraphEvent {\n\t\tList<T> l;\n\t\tT obj;\n\n\t\tRemoveFromListEvent(List<T> l, T obj) {\n\t\t\tsuper(null, -1);\n\t\t\tthis.l = l;\n\t\t\tthis.obj = obj;\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tl.remove(obj);\n\t\t}\n\t}\n\n\tclass ClearListEvent<T> extends GraphEvent {\n\t\tList<T> l;\n\n\t\tClearListEvent(List<T> l) {\n\t\t\tsuper(null, -1);\n\t\t\tthis.l = l;\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tl.clear();\n\t\t}\n\t}\n}",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "DefaultCamera", "org.graphstream.ui.swingViewer.util" ], [ "GradientFactory", "org.graphstream.ui.swingViewer.util" ], [ "GraphMetrics", "org.graphstream.ui.swingViewer.util" ], [ "Graphics2DOutput", "org.graphstream.ui.swingViewer.util" ], [ "ImageCache", "org.graphstream.ui.swingViewer.util" ], [ "StrokeFactory", "org.graphstream.ui.swingViewer.util" ], [ "FontCache", "org.graphstream.ui.swingViewer.util" ], [ "FontSlot", "org.graphstream.ui.swingViewer.util" ], [ "DefaultView", "org.graphstream.ui.swingViewer" ], [ "SpriteRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "ElementRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "NodeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "Arrow", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "Shape", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "EdgeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "SwingBasicGraphRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "GraphRendererBase", "org.graphstream.ui.swingViewer" ], [ "GraphRenderer", "org.graphstream.ui.swingViewer" ], [ "LayerRenderer", "org.graphstream.ui.swingViewer" ], [ "ViewPanel", "org.graphstream.ui.swingViewer" ], [ "Layouts", "org.graphstream.ui.layout" ], [ "Layout", "org.graphstream.ui.layout" ], [ "LayoutRunner", "org.graphstream.ui.layout" ], [ "NodeParticle", "org.graphstream.ui.layout.springbox" ], [ "GraphCellData", "org.graphstream.ui.layout.springbox" ], [ "EdgeSpring", "org.graphstream.ui.layout.springbox" ], [ "Energies", "org.graphstream.ui.layout.springbox" ], [ "BarnesHutLayout", "org.graphstream.ui.layout.springbox" ], [ "LinLog", "org.graphstream.ui.layout.springbox.implementations" ], [ "LinLogNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBoxNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBox", "org.graphstream.ui.layout.springbox.implementations" ], [ "Point2", "org.graphstream.ui.geom" ], [ "Vector2", "org.graphstream.ui.geom" ], [ "Vector3", "org.graphstream.ui.geom" ], [ "Point3", "org.graphstream.ui.geom" ], [ "ViewerListener", "org.graphstream.ui.view" ], [ "MouseManager", "org.graphstream.ui.view.util" ], [ "ShortcutManager", "org.graphstream.ui.view.util" ], [ "DefaultShortcutManager", "org.graphstream.ui.view.util" ], [ "FpsCounter", "org.graphstream.ui.view.util" ], [ "CubicCurve", "org.graphstream.ui.view.util" ], [ "DefaultMouseManager", "org.graphstream.ui.view.util" ], [ "Selection", "org.graphstream.ui.view" ], [ "ViewerPipe", "org.graphstream.ui.view" ], [ "Viewer", "org.graphstream.ui.view" ], [ "View", "org.graphstream.ui.view" ], [ "Camera", "org.graphstream.ui.view" ], [ "Sprite", "org.graphstream.ui.spriteManager" ], [ "InvalidSpriteIDException", "org.graphstream.ui.spriteManager" ], [ "SpriteManager", "org.graphstream.ui.spriteManager" ], [ "SpriteFactory", "org.graphstream.ui.spriteManager" ], [ "StyleGroupListener", "org.graphstream.ui.graphicGraph" ], [ "Colors", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Values", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetListener", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetParserTokenManager", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParserConstants", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParser", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "Style", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheet", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleConstants", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Selector", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Value", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Rule", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "GraphicNode", "org.graphstream.ui.graphicGraph" ], [ "StyleGroup", "org.graphstream.ui.graphicGraph" ], [ "GraphPosLengthUtils", "org.graphstream.ui.graphicGraph" ], [ "GraphicEdge", "org.graphstream.ui.graphicGraph" ], [ "GraphicElementChangeListener", "org.graphstream.ui.graphicGraph" ], [ "GraphicGraph", "org.graphstream.ui.graphicGraph" ], [ "StyleGroupSet", "org.graphstream.ui.graphicGraph" ], [ "GraphicSprite", "org.graphstream.ui.graphicGraph" ], [ "GraphicElement", "org.graphstream.ui.graphicGraph" ], [ "VerboseSink", "org.graphstream.util" ], [ "GraphListeners", "org.graphstream.util" ], [ "Environment", "org.graphstream.util" ], [ "GraphDiff", "org.graphstream.util" ], [ "Filters", "org.graphstream.util" ], [ "FilteredEdgeIterator", "org.graphstream.util" ], [ "Parser", "org.graphstream.util.parser" ], [ "ParserFactory", "org.graphstream.util.parser" ], [ "TokenMgrError", "org.graphstream.util.parser" ], [ "ParseException", "org.graphstream.util.parser" ], [ "SimpleCharStream", "org.graphstream.util.parser" ], [ "Token", "org.graphstream.util.parser" ], [ "ISODateIO", "org.graphstream.util.time" ], [ "ISODateComponent", "org.graphstream.util.time" ], [ "FilteredNodeIterator", "org.graphstream.util" ], [ "FixedArrayList", "org.graphstream.util.set" ], [ "StepCounter", "org.graphstream.util" ], [ "GraphSpells", "org.graphstream.util.cumulative" ], [ "CumulativeAttributes", "org.graphstream.util.cumulative" ], [ "CumulativeSpells", "org.graphstream.util.cumulative" ], [ "Filter", "org.graphstream.util" ], [ "PipeAdapter", "org.graphstream.stream" ], [ "GraphParseException", "org.graphstream.stream" ], [ "ElementSink", "org.graphstream.stream" ], [ "URLSource", "org.graphstream.stream.net" ], [ "HTTPSource", "org.graphstream.stream.net" ], [ "SourceAdapter", "org.graphstream.stream" ], [ "AttributeSink", "org.graphstream.stream" ], [ "GMLParserConstants", "org.graphstream.stream.file.gml" ], [ "GMLParserTokenManager", "org.graphstream.stream.file.gml" ], [ "GMLContext", "org.graphstream.stream.file.gml" ], [ "Graphics", "org.graphstream.stream.file.gml" ], [ "KeyValues", "org.graphstream.stream.file.gml" ], [ "GMLParser", "org.graphstream.stream.file.gml" ], [ "FileSinkGraphML", "org.graphstream.stream.file" ], [ "TLPParserConstants", "org.graphstream.stream.file.tlp" ], [ "TLPParser", "org.graphstream.stream.file.tlp" ], [ "TLPParserTokenManager", "org.graphstream.stream.file.tlp" ], [ "FileSinkFactory", "org.graphstream.stream.file" ], [ "FileSourceEdge", "org.graphstream.stream.file" ], [ "FileSinkBase", "org.graphstream.stream.file" ], [ "FileSinkTikZ", "org.graphstream.stream.file" ], [ "FileSourceGEXF", "org.graphstream.stream.file" ], [ "DOTParser", "org.graphstream.stream.file.dot" ], [ "DOTParserConstants", "org.graphstream.stream.file.dot" ], [ "DOTParserTokenManager", "org.graphstream.stream.file.dot" ], [ "FileSink", "org.graphstream.stream.file" ], [ "PajekContext", "org.graphstream.stream.file.pajek" ], [ "Graphics", "org.graphstream.stream.file.pajek" ], [ "NodeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeMatrix", "org.graphstream.stream.file.pajek" ], [ "PajekParserTokenManager", "org.graphstream.stream.file.pajek" ], [ "PajekParserConstants", "org.graphstream.stream.file.pajek" ], [ "FileSourceXML", "org.graphstream.stream.file" ], [ "FileSinkBaseFiltered", "org.graphstream.stream.file" ], [ "FileSinkDOT", "org.graphstream.stream.file" ], [ "FileSourceParser", "org.graphstream.stream.file" ], [ "FileSinkDGSFiltered", "org.graphstream.stream.file" ], [ "FileSourceDOT", "org.graphstream.stream.file" ], [ "FileSourceDGS1And2", "org.graphstream.stream.file" ], [ "FileSourceGraphML", "org.graphstream.stream.file" ], [ "FileSourceFactory", "org.graphstream.stream.file" ], [ "FileSinkImages", "org.graphstream.stream.file" ], [ "FileSinkDynamicGML", "org.graphstream.stream.file" ], [ "FileSinkSVG", "org.graphstream.stream.file" ], [ "GEXFSpell", "org.graphstream.stream.file.gexf" ], [ "SmartXMLWriter", "org.graphstream.stream.file.gexf" ], [ "GEXFElement", "org.graphstream.stream.file.gexf" ], [ "GEXFEdges", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValues", "org.graphstream.stream.file.gexf" ], [ "GEXFEdge", "org.graphstream.stream.file.gexf" ], [ "GEXFSpells", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValue", "org.graphstream.stream.file.gexf" ], [ "GEXFNodes", "org.graphstream.stream.file.gexf" ], [ "GEXFNode", "org.graphstream.stream.file.gexf" ], [ "GEXFMeta", "org.graphstream.stream.file.gexf" ], [ "GEXFAttributes", "org.graphstream.stream.file.gexf" ], [ "GEXF", "org.graphstream.stream.file.gexf" ], [ "GEXFGraph", "org.graphstream.stream.file.gexf" ], [ "GEXFAttribute", "org.graphstream.stream.file.gexf" ], [ "OldFileSourceDGS", "org.graphstream.stream.file.dgs" ], [ "DGSParser", "org.graphstream.stream.file.dgs" ], [ "FileSourceBase", "org.graphstream.stream.file" ], [ "FileSinkGML", "org.graphstream.stream.file" ], [ "FileSourceDGS", "org.graphstream.stream.file" ], [ "FileSinkDGSUtility", "org.graphstream.stream.file" ], [ "FileSourceTLP", "org.graphstream.stream.file" ], [ "FileSinkSVG2", "org.graphstream.stream.file" ], [ "FileSource", "org.graphstream.stream.file" ], [ "FileSourceNCol", "org.graphstream.stream.file" ], [ "FileSourcePajek", "org.graphstream.stream.file" ], [ "FileSourceGPX", "org.graphstream.stream.file" ], [ "FileSourceLGL", "org.graphstream.stream.file" ], [ "FileSinkGEXF2", "org.graphstream.stream.file" ], [ "FileSourceGML", "org.graphstream.stream.file" ], [ "FileSinkGEXF", "org.graphstream.stream.file" ], [ "FileSinkDGS", "org.graphstream.stream.file" ], [ "ProxyPipe", "org.graphstream.stream" ], [ "Sink", "org.graphstream.stream" ], [ "Timeline", "org.graphstream.stream" ], [ "Pipe", "org.graphstream.stream" ], [ "SinkAdapter", "org.graphstream.stream" ], [ "Replayable", "org.graphstream.stream" ], [ "Source", "org.graphstream.stream" ], [ "AnnotatedSink", "org.graphstream.stream" ], [ "GraphReplay", "org.graphstream.stream" ], [ "AttributePipe", "org.graphstream.stream" ], [ "SinkTime", "org.graphstream.stream.sync" ], [ "SourceTime", "org.graphstream.stream.sync" ], [ "PipeBase", "org.graphstream.stream" ], [ "ThreadProxyPipe", "org.graphstream.stream.thread" ], [ "ThreadProxyPipeOld", "org.graphstream.stream.thread" ], [ "RMISource", "org.graphstream.stream.rmi" ], [ "RMIAdapterOut", "org.graphstream.stream.rmi" ], [ "RMISink", "org.graphstream.stream.rmi" ], [ "RMIAdapterIn", "org.graphstream.stream.rmi" ], [ "SourceBase", "org.graphstream.stream" ], [ "NetStreamDecoder", "org.graphstream.stream.netstream" ], [ "NetStreamReceiver", "org.graphstream.stream.netstream" ], [ "NetStreamConstants", "org.graphstream.stream.netstream" ], [ "NetStreamSender", "org.graphstream.stream.netstream" ], [ "DefaultNetStreamDecoder", "org.graphstream.stream.netstream" ], [ "Base64", "org.graphstream.stream.netstream.packing" ], [ "NetStreamUnpacker", "org.graphstream.stream.netstream.packing" ], [ "Base64Packer", "org.graphstream.stream.netstream.packing" ], [ "Base64Unpacker", "org.graphstream.stream.netstream.packing" ], [ "NetStreamPacker", "org.graphstream.stream.netstream.packing" ], [ "AttributePredicate", "org.graphstream.stream" ], [ "Element", "org.graphstream.graph" ], [ "Node", "org.graphstream.graph" ], [ "BreadthFirstIterator", "org.graphstream.graph" ], [ "Graph", "org.graphstream.graph" ], [ "EdgeRejectedException", "org.graphstream.graph" ], [ "CompoundAttribute", "org.graphstream.graph" ], [ "Structure", "org.graphstream.graph" ], [ "DepthFirstIterator", "org.graphstream.graph" ], [ "NullAttributeException", "org.graphstream.graph" ], [ "IdAlreadyInUseException", "org.graphstream.graph" ], [ "EdgeFactory", "org.graphstream.graph" ], [ "ElementNotFoundException", "org.graphstream.graph" ], [ "OneAttributeElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListNode", "org.graphstream.graph.implementations" ], [ "SingleNode", "org.graphstream.graph.implementations" ], [ "AbstractElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListGraph", "org.graphstream.graph.implementations" ], [ "AbstractNode", "org.graphstream.graph.implementations" ], [ "DefaultGraph", "org.graphstream.graph.implementations" ], [ "MultiGraph", "org.graphstream.graph.implementations" ], [ "Graphs", "org.graphstream.graph.implementations" ], [ "SingleGraph", "org.graphstream.graph.implementations" ], [ "MultiNode", "org.graphstream.graph.implementations" ], [ "AbstractGraph", "org.graphstream.graph.implementations" ], [ "AbstractEdge", "org.graphstream.graph.implementations" ], [ "GraphFactory", "org.graphstream.graph" ], [ "NodeFactory", "org.graphstream.graph" ], [ "Edge", "org.graphstream.graph" ], [ "Path", "org.graphstream.graph" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "gradientInArea", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)" ], [ "linearGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)" ], [ "createFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static float[] createFractions(Style style)" ], [ "createColors", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static Color[] createColors(Style style)" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "public static ImageCache defaultImageCache()" ], [ "generateStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "public static Stroke generateStroke(Style style, GraphMetrics metrics)" ], [ "generatePlainStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)" ], [ "generateDotsStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)" ], [ "generateDashesStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache()" ], [ "newLayoutAlgorithm", "org.graphstream.ui.layout", "Layouts", "public static Layout newLayoutAlgorithm()" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static double eval(double x0, double x1, double x2, double x3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static double derivative(double x0, double x1, double x2, double x3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "newGraphRenderer", "org.graphstream.ui.view", "Viewer", "public static GraphRenderer newGraphRenderer()" ], [ "getPositionValue", "org.graphstream.ui.spriteManager", "SpriteManager", "protected static Values getPositionValue(Object value)" ], [ "convertColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Color convertColor(Object anyValue)" ], [ "convertLabel", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static String convertLabel(Object value)" ], [ "convertWidth", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static float convertWidth(Object value)" ], [ "convertValue", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Value convertValue(Object value)" ], [ "convertUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Units convertUnit(String unit)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Graph graph, String id)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Graph graph, String id)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Node node)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Node node)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Graph graph, String id)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Edge edge)" ], [ "getGlobalEnvironment", "org.graphstream.util", "Environment", "public static Environment getGlobalEnvironment()" ], [ "falseFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> falseFilter()" ], [ "trueFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> trueFilter()" ], [ "byAttributeFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)" ], [ "separateNodeAndEdgeFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)" ], [ "byExtremitiesFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)" ], [ "byIdFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byIdFilter(String idPattern)" ], [ "isContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)" ], [ "isIdContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)" ], [ "and", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)" ], [ "or", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)" ], [ "xor", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)" ], [ "not", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> not(Filter<T> f)" ], [ "addEscapes", "org.graphstream.util.parser", "TokenMgrError", "protected static final String addEscapes(String str)" ], [ "LexicalError", "org.graphstream.util.parser", "TokenMgrError", "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)" ], [ "add_escapes", "org.graphstream.util.parser", "ParseException", "static String add_escapes(String str)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind, String image)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind)" ], [ "countStepInFile", "org.graphstream.util", "StepCounter", "public static int countStepInFile(String path) throws IOException" ], [ "GET", "org.graphstream.stream.net", "HTTPSource", "protected static HashMap<String, Object> GET(HttpExchange ex)" ], [ "sinkFor", "org.graphstream.stream.file", "FileSinkFactory", "public static FileSink sinkFor(String filename)" ], [ "formatId", "org.graphstream.stream.file", "FileSinkTikZ", "protected static String formatId(String id)" ], [ "getInt", "org.graphstream.stream.file.pajek", "PajekContext", "protected static int getInt(Token nb) throws ParseException" ], [ "getReal", "org.graphstream.stream.file.pajek", "PajekContext", "protected static double getReal(Token nb) throws ParseException" ], [ "toColorValue", "org.graphstream.stream.file.pajek", "PajekContext", "public static String toColorValue(Token R, Token G, Token B) throws ParseException" ], [ "sourceFor", "org.graphstream.stream.file", "FileSourceFactory", "public static FileSource sourceFor(String fileName) throws IOException" ], [ "getXMLRootElement", "org.graphstream.stream.file", "FileSourceFactory", "public static String getXMLRootElement(String fileName) throws IOException" ], [ "formatStringForQuoting", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String formatStringForQuoting(String str)" ], [ "attributeString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String attributeString(String key, Object value, boolean remove)" ], [ "arrayString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String arrayString(Object value)" ], [ "valueString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String valueString(Object value)" ], [ "hashToString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String hashToString(HashMap<?, ?> hash)" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source)" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s, int options) throws java.io.IOException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decodeFromFile(String filename) throws java.io.IOException" ], [ "encodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeFromFile(String filename) throws java.io.IOException" ], [ "unmutableGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph unmutableGraph(Graph g)" ], [ "synchronizedGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph synchronizedGraph(Graph g)" ], [ "merge", "org.graphstream.graph.implementations", "Graphs", "public static Graph merge(Graph... graphs)" ], [ "clone", "org.graphstream.graph.implementations", "Graphs", "public static Graph clone(Graph g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "version16", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static boolean version16 = false;" ], [ "predefFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[][] predefFractions = new float[11][];" ], [ "predefFractions2", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions2 = { 0f, 1f };" ], [ "predefFractions3", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions3 = { 0f, 0.5f, 1f };" ], [ "predefFractions4", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };" ], [ "predefFractions5", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };" ], [ "predefFractions6", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };" ], [ "predefFractions7", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };" ], [ "predefFractions8", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };" ], [ "predefFractions9", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };" ], [ "predefFractions10", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "protected static ImageCache defaultImageCache;" ], [ "dots", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dots = { 1f, 1f };" ], [ "dashes", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dashes = { 3f, 3f };" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache;" ], [ "NULL_POINT2", "org.graphstream.ui.geom", "Point2", "public static final Point2 NULL_POINT2 = new Point2(0, 0);" ], [ "NULL_POINT3", "org.graphstream.ui.geom", "Point3", "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);" ], [ "DEFAULT_VIEW_ID", "org.graphstream.ui.view", "Viewer", "public static String DEFAULT_VIEW_ID = \"defaultView\";" ], [ "jjbitVec0", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };" ], [ "jjstrLiteralImages", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };" ], [ "lexStateNames", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };" ], [ "jjtoSkip", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };" ], [ "colorMap", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static HashMap<String,Color> colorMap;" ], [ "sharpColor1", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor1;" ], [ "sharpColor2", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor2;" ], [ "cssColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColor;" ], [ "cssColorA", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColorA;" ], [ "awtColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern awtColor;" ], [ "hexaColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern hexaColor;" ], [ "numberUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern numberUnit;" ], [ "number", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern number;" ], [ "acceptedAttribute", "org.graphstream.ui.graphicGraph", "GraphicElement", "protected static Pattern acceptedAttribute;" ], [ "DEFAULT_AN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_CNA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_AE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";" ], [ "DEFAULT_CEA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CEC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CER_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";" ], [ "DEFAULT_CGA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_CL_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";" ], [ "DEFAULT_ST_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";" ], [ "GLOBAL_ENV", "org.graphstream.util", "Environment", "public static Environment GLOBAL_ENV;" ], [ "LEXICAL_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int LEXICAL_ERROR = 0;" ], [ "STATIC_LEXER_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int STATIC_LEXER_ERROR = 1;" ], [ "INVALID_LEXICAL_STATE", "org.graphstream.util.parser", "TokenMgrError", "public static final int INVALID_LEXICAL_STATE = 2;" ], [ "LOOP_DETECTED", "org.graphstream.util.parser", "TokenMgrError", "public static final int LOOP_DETECTED = 3;" ], [ "staticFlag", "org.graphstream.util.parser", "SimpleCharStream", "public static final boolean staticFlag = false;" ], [ "ABBREVIATED_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");" ], [ "FULL_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");" ], [ "ABBREVIATED_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");" ], [ "FULL_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");" ], [ "LOCALE_DATE_AND_TIME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);" ], [ "CENTURY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");" ], [ "DAY_OF_MONTH_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");" ], [ "DATE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");" ], [ "DAY_OF_MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");" ], [ "DATE_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");" ], [ "WEEK_BASED_YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "WEEK_BASED_YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "ABBREVIATED_MONTH_NAME_ALIAS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");" ], [ "HOUR_OF_DAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");" ], [ "HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");" ], [ "DAY_OF_YEAR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");" ], [ "MILLISECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");" ], [ "EPOCH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent EPOCH = new EpochComponent();" ], [ "MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");" ], [ "MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");" ], [ "NEW_LINE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");" ], [ "AM_PM", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent AM_PM = new AMPMComponent();" ], [ "LOCALE_CLOCK_TIME_12_HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");" ], [ "HOUR_AND_MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");" ], [ "SECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");" ], [ "TABULATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");" ], [ "TIME_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");" ], [ "DAY_OF_WEEK_1_7", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");" ], [ "WEEK_OF_YEAR_FROM_SUNDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");" ], [ "WEEK_NUMBER_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");" ], [ "DAY_OF_WEEK_0_6", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");" ], [ "WEEK_OF_YEAR_FROM_MONDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");" ], [ "LOCALE_DATE_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");" ], [ "LOCALE_TIME_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");" ], [ "YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "UTC_OFFSET", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();" ], [ "LOCALE_TIME_ZONE_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");" ], [ "PERCENT", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");" ], [ "jjbitVec0", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoToken = { 0xff01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoSkip = { 0x1eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoToken = { 0xffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "XYZ_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String XYZ_ATTR = \"xyz\";" ], [ "WIDTH_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String WIDTH_ATTR = \"ui.tikz.width\";" ], [ "HEIGHT_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String HEIGHT_ATTR = \"ui.tikz.height\";" ], [ "DEFAULT_WIDTH", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_WIDTH = 10;" ], [ "DEFAULT_HEIGHT", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_HEIGHT = 10;" ], [ "DISPLAY_MIN_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;" ], [ "DISPLAY_MAX_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;" ], [ "jjbitVec0", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };" ], [ "lexStateNames", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoToken = { 0x3ffffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoToken = { 0x3fffffffffffc9L };" ], [ "jjtoSkip", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoSkip = { 0x6L };" ], [ "XMLNS", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";" ], [ "XMLNS_XSI", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";" ], [ "XMLNS_SL", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";" ], [ "XMLNS_VIZ", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";" ], [ "VERSION", "org.graphstream.stream.file.gexf", "GEXF", "public static final String VERSION = \"1.2\";" ], [ "BUFFER_SIZE", "org.graphstream.stream.file.dgs", "DGSParser", "protected static final int BUFFER_SIZE = 4096;" ], [ "ARRAY_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_OPEN = '{';" ], [ "ARRAY_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_CLOSE = '}';" ], [ "MAP_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_OPEN = '[';" ], [ "MAP_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_CLOSE = ']';" ], [ "gradientId", "org.graphstream.stream.file", "FileSinkSVG2", "static int gradientId = 0;" ], [ "gradientId", "org.graphstream.stream.file", "SVGStyle", "static int gradientId = 0;" ], [ "TIME_PREFIX", "org.graphstream.stream", "Timeline", "public static final String TIME_PREFIX = \"time\";" ], [ "SYNC_DISABLE_KEY", "org.graphstream.stream.sync", "SinkTime", "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";" ], [ "disableSync", "org.graphstream.stream.sync", "SinkTime", "protected static final boolean disableSync;" ], [ "LIGHT_YELLOW", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String LIGHT_YELLOW = \"\u001B[33;1m\";" ], [ "RESET", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String RESET = \"\u001B[0m\";" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "IncomingBuffer", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "EVENT_GETVERSION", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_GETVERSION = 0x00;" ], [ "EVENT_START", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_START = 0x01;" ], [ "EVENT_END", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_END = 0x02;" ], [ "EVENT_ADD_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE = 0x10;" ], [ "EVENT_DEL_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE = 0x11;" ], [ "EVENT_ADD_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE = 0x12;" ], [ "EVENT_DEL_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE = 0x13;" ], [ "EVENT_STEP", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_STEP = 0x14;" ], [ "EVENT_CLEARED", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CLEARED = 0x15;" ], [ "EVENT_ADD_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_GRAPH_ATTR = 0x16;" ], [ "EVENT_CHG_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_GRAPH_ATTR = 0x17;" ], [ "EVENT_DEL_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_GRAPH_ATTR = 0x18;" ], [ "EVENT_ADD_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE_ATTR = 0x19;" ], [ "EVENT_CHG_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_NODE_ATTR = 0x1a;" ], [ "EVENT_DEL_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE_ATTR = 0x1b;" ], [ "EVENT_ADD_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE_ATTR = 0x1c;" ], [ "EVENT_CHG_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_EDGE_ATTR = 0x1d;" ], [ "EVENT_DEL_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE_ATTR = 0x1e;" ], [ "TYPE_UNKNOWN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_UNKNOWN = 0x00;" ], [ "TYPE_BOOLEAN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN = 0x50;" ], [ "TYPE_BOOLEAN_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN_ARRAY = 0x51;" ], [ "TYPE_BYTE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE = 0x52;" ], [ "TYPE_BYTE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE_ARRAY = 0x53;" ], [ "TYPE_SHORT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT = 0x54;" ], [ "TYPE_SHORT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT_ARRAY = 0x55;" ], [ "TYPE_INT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT = 0x56;" ], [ "TYPE_INT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT_ARRAY = 0x57;" ], [ "TYPE_LONG", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG = 0x58;" ], [ "TYPE_LONG_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG_ARRAY = 0x59;" ], [ "TYPE_FLOAT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT = 0x5a;" ], [ "TYPE_FLOAT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT_ARRAY = 0x5b;" ], [ "TYPE_DOUBLE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE = 0x5c;" ], [ "TYPE_DOUBLE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE_ARRAY = 0x5d;" ], [ "TYPE_STRING", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_STRING = 0x5e;" ], [ "TYPE_RAW", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_RAW = 0x5f;" ], [ "TYPE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static byte TYPE_ARRAY = 0x60;" ], [ "TYPE_NULL", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_NULL = 0x61;" ], [ "COMMAND", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int COMMAND = 0x70;" ], [ "NO_OPTIONS", "org.graphstream.stream.netstream.packing", "Base64", "public final static int NO_OPTIONS = 0;" ], [ "ENCODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ENCODE = 1;" ], [ "DECODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DECODE = 0;" ], [ "GZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int GZIP = 2;" ], [ "DONT_GUNZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DONT_GUNZIP = 4;" ], [ "DO_BREAK_LINES", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DO_BREAK_LINES = 8;" ], [ "URL_SAFE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int URL_SAFE = 16;" ], [ "ORDERED", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ORDERED = 32;" ], [ "INITIAL_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final int INITIAL_EDGE_CAPACITY;" ], [ "GROWTH_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final double GROWTH_FACTOR = 1.1;" ], [ "I_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char I_EDGE = 0;" ], [ "IO_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char IO_EDGE = 1;" ], [ "O_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char O_EDGE = 2;" ], [ "GROW_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final double GROW_FACTOR = 1.1;" ], [ "DEFAULT_NODE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_NODE_CAPACITY = 128;" ], [ "DEFAULT_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_EDGE_CAPACITY = 1024;" ] ],
  "tokensMethodJavadocValues" : [ [ "\"node added\"", "String" ] ],
  "tokensMethodArguments" : [ [ "sourceId", "java.lang", "String" ], [ "timeId", "", "long" ], [ "nodeId", "java.lang", "String" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "elementSinks", "org.graphstream.stream", "SourceBase", "public Iterable<ElementSink> elementSinks()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "attributeSinks", "org.graphstream.stream", "SourceBase", "public Iterable<AttributeSink> attributeSinks()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "length", "java.lang", "String", "public int length()" ], [ "concat", "java.lang", "String", "public String concat(String arg0)" ], [ "contains", "java.lang", "String", "public boolean contains(CharSequence arg0)" ], [ "substring", "java.lang", "String", "public String substring(int arg0, int arg1)" ], [ "equals", "java.lang", "String", "public boolean equals(Object arg0)" ], [ "subSequence", "java.lang", "String", "public CharSequence subSequence(int arg0, int arg1)" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0, int arg1)" ], [ "transform", "java.lang", "String", "public <R> R transform(Function<? super String, ? extends R> arg0)" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0, int arg1)" ], [ "codePoints", "java.lang", "String", "public IntStream codePoints()" ], [ "codePointBefore", "java.lang", "String", "public int codePointBefore(int arg0)" ], [ "value", "java.lang", "String", "byte[] value()" ], [ "equalsIgnoreCase", "java.lang", "String", "public boolean equalsIgnoreCase(String arg0)" ], [ "toCharArray", "java.lang", "String", "public char[] toCharArray()" ], [ "compareToIgnoreCase", "java.lang", "String", "public int compareToIgnoreCase(String arg0)" ], [ "stripLeading", "java.lang", "String", "public String stripLeading()" ], [ "translateEscapes", "java.lang", "String", "public String translateEscapes()" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0, int arg1)" ], [ "strip", "java.lang", "String", "public String strip()" ], [ "split", "java.lang", "String", "public String[] split(String arg0, int arg1)" ], [ "replace", "java.lang", "String", "public String replace(CharSequence arg0, CharSequence arg1)" ], [ "substring", "java.lang", "String", "public String substring(int arg0)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes()" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)" ], [ "lines", "java.lang", "String", "public Stream<String> lines()" ], [ "replaceFirst", "java.lang", "String", "public String replaceFirst(String arg0, String arg1)" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(Charset arg0)" ], [ "compareTo", "java.lang", "String", "public int compareTo(String arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0, int arg1)" ], [ "stripTrailing", "java.lang", "String", "public String stripTrailing()" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0)" ], [ "isLatin1", "java.lang", "String", "boolean isLatin1()" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0, int arg1)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase(Locale arg0)" ], [ "isBlank", "java.lang", "String", "public boolean isBlank()" ], [ "stripIndent", "java.lang", "String", "public String stripIndent()" ], [ "codePointAt", "java.lang", "String", "public int codePointAt(int arg0)" ], [ "resolveConstantDesc", "java.lang", "String", "public String resolveConstantDesc(MethodHandles.Lookup arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0)" ], [ "replaceAll", "java.lang", "String", "public String replaceAll(String arg0, String arg1)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase()" ], [ "indent", "java.lang", "String", "public String indent(int arg0)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(StringBuffer arg0)" ], [ "describeConstable", "java.lang", "String", "public Optional<String> describeConstable()" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0)" ], [ "offsetByCodePoints", "java.lang", "String", "public int offsetByCodePoints(int arg0, int arg1)" ], [ "intern", "java.lang", "String", "public native String intern()" ], [ "chars", "java.lang", "String", "public IntStream chars()" ], [ "codePointCount", "java.lang", "String", "public int codePointCount(int arg0, int arg1)" ], [ "trim", "java.lang", "String", "public String trim()" ], [ "repeat", "java.lang", "String", "public String repeat(int arg0)" ], [ "isEmpty", "java.lang", "String", "public boolean isEmpty()" ], [ "hashCode", "java.lang", "String", "public int hashCode()" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase(Locale arg0)" ], [ "matches", "java.lang", "String", "public boolean matches(String arg0)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(String arg0) throws UnsupportedEncodingException" ], [ "charAt", "java.lang", "String", "public char charAt(int arg0)" ], [ "replace", "java.lang", "String", "public String replace(char arg0, char arg1)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(CharSequence arg0)" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase()" ], [ "split", "java.lang", "String", "public String[] split(String arg0)" ], [ "formatted", "java.lang", "String", "public String formatted(Object[] arg0)" ], [ "coder", "java.lang", "String", "byte coder()" ], [ "endsWith", "java.lang", "String", "public boolean endsWith(String arg0)" ], [ "toString", "java.lang", "String", "public String toString()" ], [ "compareTo", "java.lang", "Comparable", "public abstract int compareTo(T arg0)" ], [ "subSequence", "java.lang", "CharSequence", "public abstract CharSequence subSequence(int arg0, int arg1)" ], [ "codePoints", "java.lang", "CharSequence", "public default IntStream codePoints()" ], [ "length", "java.lang", "CharSequence", "public abstract int length()" ], [ "charAt", "java.lang", "CharSequence", "public abstract char charAt(int arg0)" ], [ "isEmpty", "java.lang", "CharSequence", "public default boolean isEmpty()" ], [ "chars", "java.lang", "CharSequence", "public default IntStream chars()" ], [ "toString", "java.lang", "CharSequence", "public abstract String toString()" ], [ "describeConstable", "java.lang.constant", "Constable", "public abstract Optional<? extends ConstantDesc> describeConstable()" ], [ "resolveConstantDesc", "java.lang.constant", "ConstantDesc", "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "attrSinks", "org.graphstream.stream", "SourceBase", "protected ArrayList<AttributeSink> attrSinks = new ArrayList<AttributeSink>();" ], [ "eltsSinks", "org.graphstream.stream", "SourceBase", "protected ArrayList<ElementSink> eltsSinks = new ArrayList<ElementSink>();" ], [ "eventQueue", "org.graphstream.stream", "SourceBase", "protected LinkedList<GraphEvent> eventQueue = new LinkedList<GraphEvent>();" ], [ "eventProcessing", "org.graphstream.stream", "SourceBase", "protected boolean eventProcessing = false;" ], [ "sourceId", "org.graphstream.stream", "SourceBase", "protected String sourceId;" ], [ "sourceTime", "org.graphstream.stream", "SourceBase", "protected SourceTime sourceTime;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 3713,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "gs-core-1.3",
  "packageName" : "org.graphstream.stream",
  "className" : "SourceBase",
  "javadocTag" : "@param toNodeId The edge end node.",
  "methodJavadoc" : "    /**\n\t * Send an \"edge added\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param edgeId\n\t *            The edge identifier.\n\t * @param fromNodeId\n\t *            The edge start node.\n\t * @param toNodeId\n\t *            The edge end node.\n\t * @param directed\n\t *            Is the edge directed?.\n\t */",
  "methodSourceCode" : "public void sendEdgeAdded(String sourceId, String edgeId, String fromNodeId, String toNodeId, boolean directed){\n    sendEdgeAdded(sourceId, sourceTime.newEvent(), edgeId, fromNodeId, toNodeId, directed);\n}",
  "classJavadoc" : "/**\n * Base implementation of an input that provide basic sink handling.\n * \n * <p>\n * This implementation can register a set of graph sinks (or separate sets of\n * attributes or elements sinks) and provides protected methods to easily\n * broadcast events to all the sinks (beginning with \"send\").\n * </p>\n * \n * <p>\n * Each time you want to produce an event toward all registered sinks, you call\n * one of the \"send*\" methods with correct parameters. The parameters of the\n * \"send*\" methods maps to the usual GraphStream events.\n * </p>\n * \n * <p>\n * This class is \"reentrant\". This means that if a send*() method is called\n * during the execution of another or the same send*() method, the event is\n * deferred until the first send*() method is finished. This avoid recursive\n * loops if a sink modifies the input during event handling.\n * </p>\n */",
  "classSourceCode" : "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign√©      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.stream;\n\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\n\nimport org.graphstream.graph.implementations.AbstractElement.AttributeChangeEvent;\nimport org.graphstream.stream.sync.SourceTime;\n\n/**\n * Base implementation of an input that provide basic sink handling.\n * \n * <p>\n * This implementation can register a set of graph sinks (or separate sets of\n * attributes or elements sinks) and provides protected methods to easily\n * broadcast events to all the sinks (beginning with \"send\").\n * </p>\n * \n * <p>\n * Each time you want to produce an event toward all registered sinks, you call\n * one of the \"send*\" methods with correct parameters. The parameters of the\n * \"send*\" methods maps to the usual GraphStream events.\n * </p>\n * \n * <p>\n * This class is \"reentrant\". This means that if a send*() method is called\n * during the execution of another or the same send*() method, the event is\n * deferred until the first send*() method is finished. This avoid recursive\n * loops if a sink modifies the input during event handling.\n * </p>\n */\npublic abstract class SourceBase implements Source {\n\t// Attribute\n\n\tpublic enum ElementType {\n\t\tNODE, EDGE, GRAPH\n\t};\n\n\t/**\n\t * Set of graph attributes sinks.\n\t */\n\tprotected ArrayList<AttributeSink> attrSinks = new ArrayList<AttributeSink>();\n\n\t/**\n\t * Set of graph elements sinks.\n\t */\n\tprotected ArrayList<ElementSink> eltsSinks = new ArrayList<ElementSink>();\n\n\t/**\n\t * A queue that allow the management of events (nodes/edge\n\t * add/delete/change) in the right order.\n\t */\n\tprotected LinkedList<GraphEvent> eventQueue = new LinkedList<GraphEvent>();\n\n\t/**\n\t * A boolean that indicates whether or not an Sink event is being sent\n\t * during another one.\n\t */\n\tprotected boolean eventProcessing = false;\n\n\t/**\n\t * Id of this source.\n\t */\n\tprotected String sourceId;\n\t\n\t/**\n\t * Time of this source.\n\t */\n\tprotected SourceTime sourceTime;\n\n\t// Construction\n\n\tprotected SourceBase() {\n\t\tthis(String.format(\"sourceOnThread#%d_%d\", Thread.currentThread()\n\t\t\t\t.getId(), System.currentTimeMillis()\n\t\t\t\t+ ((int) (Math.random() * 1000))));\n\t}\n\n\tprotected SourceBase(String sourceId) {\n\t\tthis.sourceId = sourceId;\n\t\tthis.sourceTime = new SourceTime(sourceId);\n\t}\n\n\t// Access\n\n\tpublic Iterable<AttributeSink> attributeSinks() {\n\t\treturn attrSinks;\n\t}\n\n\tpublic Iterable<ElementSink> elementSinks() {\n\t\treturn eltsSinks;\n\t}\n\n\t// Command\n\n\tpublic void addSink(Sink sink) {\n\t\taddAttributeSink(sink);\n\t\taddElementSink(sink);\n\t}\n\n\tpublic void addAttributeSink(AttributeSink sink) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tattrSinks.add(sink);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new AddToListEvent<AttributeSink>(attrSinks, sink));\n\t\t}\n\t}\n\n\tpublic void addElementSink(ElementSink sink) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\teltsSinks.add(sink);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new AddToListEvent<ElementSink>(eltsSinks, sink));\n\t\t}\n\t}\n\n\tpublic void clearSinks() {\n\t\tclearElementSinks();\n\t\tclearAttributeSinks();\n\t}\n\n\tpublic void clearElementSinks() {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\teltsSinks.clear();\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new ClearListEvent<ElementSink>(eltsSinks));\n\t\t}\n\t}\n\n\tpublic void clearAttributeSinks() {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tattrSinks.clear();\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new ClearListEvent<AttributeSink>(attrSinks));\n\t\t}\n\t}\n\n\tpublic void removeSink(Sink sink) {\n\t\tremoveAttributeSink(sink);\n\t\tremoveElementSink(sink);\n\t}\n\n\tpublic void removeAttributeSink(AttributeSink sink) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tattrSinks.remove(sink);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new RemoveFromListEvent<AttributeSink>(attrSinks,\n\t\t\t\t\tsink));\n\t\t}\n\t}\n\n\tpublic void removeElementSink(ElementSink sink) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\teltsSinks.remove(sink);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue\n\t\t\t\t\t.add(new RemoveFromListEvent<ElementSink>(eltsSinks, sink));\n\t\t}\n\t}\n\n\t/**\n\t * Send a \"graph cleared\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t */\n\tpublic void sendGraphCleared(String sourceId) {\n\t\tsendGraphCleared(sourceId, sourceTime.newEvent());\n\t}\n\n\t/**\n\t * Send a \"graph cleared\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t */\n\tpublic void sendGraphCleared(String sourceId, long timeId) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).graphCleared(sourceId, timeId);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new BeforeGraphClearEvent(sourceId, timeId));\n\t\t}\n\t}\n\n\t/**\n\t * Send a \"step begins\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The graph identifier.\n\t * @param step\n\t *            The step time stamp.\n\t */\n\tpublic void sendStepBegins(String sourceId, double step) {\n\t\tsendStepBegins(sourceId, sourceTime.newEvent(), step);\n\t}\n\n\t/**\n\t * Send a \"step begins\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The graph identifier.\n\t * @param timeId\n\t * @param step\n\t *            The step time stamp.\n\t */\n\tpublic void sendStepBegins(String sourceId, long timeId, double step) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).stepBegins(sourceId, timeId, step);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new StepBeginsEvent(sourceId, timeId, step));\n\t\t}\n\t}\n\n\t/**\n\t * Send a \"node added\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param nodeId\n\t *            The node identifier.\n\t */\n\tpublic void sendNodeAdded(String sourceId, String nodeId) {\n\t\tsendNodeAdded(sourceId, sourceTime.newEvent(), nodeId);\n\t}\n\n\t/**\n\t * Send a \"node added\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param nodeId\n\t *            The node identifier.\n\t */\n\tpublic void sendNodeAdded(String sourceId, long timeId, String nodeId) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).nodeAdded(sourceId, timeId, nodeId);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new AfterNodeAddEvent(sourceId, timeId, nodeId));\n\t\t}\n\t}\n\n\t/**\n\t * Send a \"node removed\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The graph identifier.\n\t * @param nodeId\n\t *            The node identifier.\n\t */\n\tpublic void sendNodeRemoved(String sourceId, String nodeId) {\n\t\tsendNodeRemoved(sourceId, sourceTime.newEvent(), nodeId);\n\t}\n\n\t/**\n\t * Send a \"node removed\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The graph identifier.\n\t * @param timeId\n\t * @param nodeId\n\t *            The node identifier.\n\t */\n\tpublic void sendNodeRemoved(String sourceId, long timeId, String nodeId) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).nodeRemoved(sourceId, timeId, nodeId);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new BeforeNodeRemoveEvent(sourceId, timeId, nodeId));\n\t\t}\n\t}\n\n\t/**\n\t * Send an \"edge added\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param edgeId\n\t *            The edge identifier.\n\t * @param fromNodeId\n\t *            The edge start node.\n\t * @param toNodeId\n\t *            The edge end node.\n\t * @param directed\n\t *            Is the edge directed?.\n\t */\n\tpublic void sendEdgeAdded(String sourceId, String edgeId,\n\t\t\tString fromNodeId, String toNodeId, boolean directed) {\n\t\tsendEdgeAdded(sourceId, sourceTime.newEvent(), edgeId, fromNodeId,\n\t\t\t\ttoNodeId, directed);\n\t}\n\n\t/**\n\t * Send an \"edge added\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param edgeId\n\t *            The edge identifier.\n\t * @param fromNodeId\n\t *            The edge start node.\n\t * @param toNodeId\n\t *            The edge end node.\n\t * @param directed\n\t *            Is the edge directed?.\n\t */\n\tpublic void sendEdgeAdded(String sourceId, long timeId, String edgeId,\n\t\t\tString fromNodeId, String toNodeId, boolean directed) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).edgeAdded(sourceId, timeId, edgeId,\n\t\t\t\t\t\tfromNodeId, toNodeId, directed);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new AfterEdgeAddEvent(sourceId, timeId, edgeId,\n\t\t\t\t\tfromNodeId, toNodeId, directed));\n\t\t}\n\t}\n\n\t/**\n\t * Send a \"edge removed\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param edgeId\n\t *            The edge identifier.\n\t */\n\tpublic void sendEdgeRemoved(String sourceId, String edgeId) {\n\t\tsendEdgeRemoved(sourceId, sourceTime.newEvent(), edgeId);\n\t}\n\n\t/**\n\t * Send a \"edge removed\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param edgeId\n\t *            The edge identifier.\n\t */\n\tpublic void sendEdgeRemoved(String sourceId, long timeId, String edgeId) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).edgeRemoved(sourceId, timeId, edgeId);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new BeforeEdgeRemoveEvent(sourceId, timeId, edgeId));\n\t\t}\n\t}\n\n\t/**\n\t * Send a \"edge attribute added\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param edgeId\n\t *            The edge identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param value\n\t *            The attribute value.\n\t */\n\tpublic void sendEdgeAttributeAdded(String sourceId, String edgeId,\n\t\t\tString attribute, Object value) {\n\t\tsendAttributeChangedEvent(sourceId, edgeId, ElementType.EDGE,\n\t\t\t\tattribute, AttributeChangeEvent.ADD, null, value);\n\t}\n\n\t/**\n\t * Send a \"edge attribute added\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param edgeId\n\t *            The edge identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param value\n\t *            The attribute value.\n\t */\n\tpublic void sendEdgeAttributeAdded(String sourceId, long timeId,\n\t\t\tString edgeId, String attribute, Object value) {\n\t\tsendAttributeChangedEvent(sourceId, timeId, edgeId, ElementType.EDGE,\n\t\t\t\tattribute, AttributeChangeEvent.ADD, null, value);\n\t}\n\n\t/**\n\t * Send a \"edge attribute changed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param edgeId\n\t *            The edge identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param oldValue\n\t *            The old attribute value.\n\t * @param newValue\n\t *            The new attribute value.\n\t */\n\tpublic void sendEdgeAttributeChanged(String sourceId, String edgeId,\n\t\t\tString attribute, Object oldValue, Object newValue) {\n\t\tsendAttributeChangedEvent(sourceId, edgeId, ElementType.EDGE,\n\t\t\t\tattribute, AttributeChangeEvent.CHANGE, oldValue, newValue);\n\t}\n\n\t/**\n\t * Send a \"edge attribute changed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param edgeId\n\t *            The edge identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param oldValue\n\t *            The old attribute value.\n\t * @param newValue\n\t *            The new attribute value.\n\t */\n\tpublic void sendEdgeAttributeChanged(String sourceId, long timeId,\n\t\t\tString edgeId, String attribute, Object oldValue, Object newValue) {\n\t\tsendAttributeChangedEvent(sourceId, timeId, edgeId, ElementType.EDGE,\n\t\t\t\tattribute, AttributeChangeEvent.CHANGE, oldValue, newValue);\n\t}\n\n\t/**\n\t * Send a \"edge attribute removed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param edgeId\n\t *            The edge identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t */\n\tpublic void sendEdgeAttributeRemoved(String sourceId, String edgeId,\n\t\t\tString attribute) {\n\t\tsendAttributeChangedEvent(sourceId, edgeId, ElementType.EDGE,\n\t\t\t\tattribute, AttributeChangeEvent.REMOVE, null, null);\n\t}\n\n\t/**\n\t * Send a \"edge attribute removed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param edgeId\n\t *            The edge identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t */\n\tpublic void sendEdgeAttributeRemoved(String sourceId, long timeId,\n\t\t\tString edgeId, String attribute) {\n\t\tsendAttributeChangedEvent(sourceId, timeId, edgeId, ElementType.EDGE,\n\t\t\t\tattribute, AttributeChangeEvent.REMOVE, null, null);\n\t}\n\n\t/**\n\t * Send a \"graph attribute added\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param value\n\t *            The attribute value.\n\t */\n\tpublic void sendGraphAttributeAdded(String sourceId, String attribute,\n\t\t\tObject value) {\n\t\tsendAttributeChangedEvent(sourceId, null, ElementType.GRAPH, attribute,\n\t\t\t\tAttributeChangeEvent.ADD, null, value);\n\t}\n\n\t/**\n\t * Send a \"graph attribute added\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param attribute\n\t *            The attribute name.\n\t * @param value\n\t *            The attribute value.\n\t */\n\tpublic void sendGraphAttributeAdded(String sourceId, long timeId,\n\t\t\tString attribute, Object value) {\n\t\tsendAttributeChangedEvent(sourceId, timeId, null, ElementType.GRAPH,\n\t\t\t\tattribute, AttributeChangeEvent.ADD, null, value);\n\t}\n\n\t/**\n\t * Send a \"graph attribute changed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param oldValue\n\t *            The attribute old value.\n\t * @param newValue\n\t *            The attribute new value.\n\t */\n\tpublic void sendGraphAttributeChanged(String sourceId, String attribute,\n\t\t\tObject oldValue, Object newValue) {\n\t\tsendAttributeChangedEvent(sourceId, null, ElementType.GRAPH, attribute,\n\t\t\t\tAttributeChangeEvent.CHANGE, oldValue, newValue);\n\t}\n\n\t/**\n\t * Send a \"graph attribute changed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param attribute\n\t *            The attribute name.\n\t * @param oldValue\n\t *            The attribute old value.\n\t * @param newValue\n\t *            The attribute new value.\n\t */\n\tpublic void sendGraphAttributeChanged(String sourceId, long timeId,\n\t\t\tString attribute, Object oldValue, Object newValue) {\n\t\tsendAttributeChangedEvent(sourceId, timeId, null, ElementType.GRAPH,\n\t\t\t\tattribute, AttributeChangeEvent.CHANGE, oldValue, newValue);\n\t}\n\n\t/**\n\t * Send a \"graph attribute removed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t */\n\tpublic void sendGraphAttributeRemoved(String sourceId, String attribute) {\n\t\tsendAttributeChangedEvent(sourceId, null, ElementType.GRAPH, attribute,\n\t\t\t\tAttributeChangeEvent.REMOVE, null, null);\n\t}\n\n\t/**\n\t * Send a \"graph attribute removed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param attribute\n\t *            The attribute name.\n\t */\n\tpublic void sendGraphAttributeRemoved(String sourceId, long timeId,\n\t\t\tString attribute) {\n\t\tsendAttributeChangedEvent(sourceId, timeId, null, ElementType.GRAPH,\n\t\t\t\tattribute, AttributeChangeEvent.REMOVE, null, null);\n\t}\n\n\t/**\n\t * Send a \"node attribute added\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param nodeId\n\t *            The node identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param value\n\t *            The attribute value.\n\t */\n\tpublic void sendNodeAttributeAdded(String sourceId, String nodeId,\n\t\t\tString attribute, Object value) {\n\t\tsendAttributeChangedEvent(sourceId, nodeId, ElementType.NODE,\n\t\t\t\tattribute, AttributeChangeEvent.ADD, null, value);\n\t}\n\n\t/**\n\t * Send a \"node attribute added\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param nodeId\n\t *            The node identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param value\n\t *            The attribute value.\n\t */\n\tpublic void sendNodeAttributeAdded(String sourceId, long timeId,\n\t\t\tString nodeId, String attribute, Object value) {\n\t\tsendAttributeChangedEvent(sourceId, timeId, nodeId, ElementType.NODE,\n\t\t\t\tattribute, AttributeChangeEvent.ADD, null, value);\n\t}\n\n\t/**\n\t * Send a \"node attribute changed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param nodeId\n\t *            The node identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param oldValue\n\t *            The attribute old value.\n\t * @param newValue\n\t *            The attribute new value.\n\t */\n\tpublic void sendNodeAttributeChanged(String sourceId, String nodeId,\n\t\t\tString attribute, Object oldValue, Object newValue) {\n\t\tsendAttributeChangedEvent(sourceId, nodeId, ElementType.NODE,\n\t\t\t\tattribute, AttributeChangeEvent.CHANGE, oldValue, newValue);\n\t}\n\n\t/**\n\t * Send a \"node attribute changed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param nodeId\n\t *            The node identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param oldValue\n\t *            The attribute old value.\n\t * @param newValue\n\t *            The attribute new value.\n\t */\n\tpublic void sendNodeAttributeChanged(String sourceId, long timeId,\n\t\t\tString nodeId, String attribute, Object oldValue, Object newValue) {\n\t\tsendAttributeChangedEvent(sourceId, timeId, nodeId, ElementType.NODE,\n\t\t\t\tattribute, AttributeChangeEvent.CHANGE, oldValue, newValue);\n\t}\n\n\t/**\n\t * Send a \"node attribute removed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param nodeId\n\t *            The node identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t */\n\tpublic void sendNodeAttributeRemoved(String sourceId, String nodeId,\n\t\t\tString attribute) {\n\t\tsendAttributeChangedEvent(sourceId, nodeId, ElementType.NODE,\n\t\t\t\tattribute, AttributeChangeEvent.REMOVE, null, null);\n\t}\n\n\t/**\n\t * Send a \"node attribute removed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param nodeId\n\t *            The node identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t */\n\tpublic void sendNodeAttributeRemoved(String sourceId, long timeId,\n\t\t\tString nodeId, String attribute) {\n\t\tsendAttributeChangedEvent(sourceId, timeId, nodeId, ElementType.NODE,\n\t\t\t\tattribute, AttributeChangeEvent.REMOVE, null, null);\n\t}\n\n\t/**\n\t * Send a add/change/remove attribute event on an element. This method is a\n\t * generic way of notifying of an attribute change and is equivalent to\n\t * individual send*Attribute*() methods.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param eltId\n\t *            The changed element identifier.\n\t * @param eltType\n\t *            The changed element type.\n\t * @param attribute\n\t *            The changed attribute.\n\t * @param event\n\t *            The add/change/remove action.\n\t * @param oldValue\n\t *            The old attribute value (null if the attribute is removed or\n\t *            added).\n\t * @param newValue\n\t *            The new attribute value (null if removed).\n\t */\n\tpublic void sendAttributeChangedEvent(String sourceId, String eltId,\n\t\t\tElementType eltType, String attribute, AttributeChangeEvent event,\n\t\t\tObject oldValue, Object newValue) {\n\t\tsendAttributeChangedEvent(sourceId, sourceTime.newEvent(), eltId,\n\t\t\t\teltType, attribute, event, oldValue, newValue);\n\t}\n\n\tpublic void sendAttributeChangedEvent(String sourceId, long timeId,\n\t\t\tString eltId, ElementType eltType, String attribute,\n\t\t\tAttributeChangeEvent event, Object oldValue, Object newValue) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tif (event == AttributeChangeEvent.ADD) {\n\t\t\t\tif (eltType == ElementType.NODE) {\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).nodeAttributeAdded(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute, newValue);\n\t\t\t\t} else if (eltType == ElementType.EDGE) {\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).edgeAttributeAdded(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute, newValue);\n\t\t\t\t} else {\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).graphAttributeAdded(sourceId, timeId,\n\t\t\t\t\t\t\t\tattribute, newValue);\n\t\t\t\t}\n\t\t\t} else if (event == AttributeChangeEvent.REMOVE) {\n\t\t\t\tif (eltType == ElementType.NODE) {\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).nodeAttributeRemoved(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute);\n\t\t\t\t} else if (eltType == ElementType.EDGE) {\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).edgeAttributeRemoved(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute);\n\t\t\t\t} else {\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).graphAttributeRemoved(sourceId,\n\t\t\t\t\t\t\t\ttimeId, attribute);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (eltType == ElementType.NODE) {\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).nodeAttributeChanged(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute, oldValue, newValue);\n\t\t\t\t} else if (eltType == ElementType.EDGE) {\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).edgeAttributeChanged(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute, oldValue, newValue);\n\t\t\t\t} else {\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).graphAttributeChanged(sourceId,\n\t\t\t\t\t\t\t\ttimeId, attribute, oldValue, newValue);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new AttributeChangedEvent(sourceId, timeId, eltId,\n\t\t\t\t\teltType, attribute, event, oldValue, newValue));\n\t\t}\n\t}\n\n\t// Deferred event management\n\n\t/**\n\t * If in \"event processing mode\", ensure all pending events are processed.\n\t */\n\tprotected void manageEvents() {\n\t\tif (eventProcessing) {\n\t\t\twhile (!eventQueue.isEmpty())\n\t\t\t\teventQueue.remove().trigger();\n\t\t}\n\t}\n\n\t// Events Management\n\n\t/**\n\t * Interface that provide general purpose classification for evens involved\n\t * in graph modifications\n\t */\n\tabstract class GraphEvent {\n\t\tString sourceId;\n\t\tlong timeId;\n\n\t\tGraphEvent(String sourceId, long timeId) {\n\t\t\tthis.sourceId = sourceId;\n\t\t\tthis.timeId = timeId;\n\t\t}\n\n\t\tabstract void trigger();\n\t}\n\n\tclass AfterEdgeAddEvent extends GraphEvent {\n\t\tString edgeId;\n\t\tString fromNodeId;\n\t\tString toNodeId;\n\t\tboolean directed;\n\n\t\tAfterEdgeAddEvent(String sourceId, long timeId, String edgeId,\n\t\t\t\tString fromNodeId, String toNodeId, boolean directed) {\n\t\t\tsuper(sourceId, timeId);\n\t\t\tthis.edgeId = edgeId;\n\t\t\tthis.fromNodeId = fromNodeId;\n\t\t\tthis.toNodeId = toNodeId;\n\t\t\tthis.directed = directed;\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).edgeAdded(sourceId, timeId, edgeId,\n\t\t\t\t\t\tfromNodeId, toNodeId, directed);\n\t\t}\n\t}\n\n\tclass BeforeEdgeRemoveEvent extends GraphEvent {\n\t\tString edgeId;\n\n\t\tBeforeEdgeRemoveEvent(String sourceId, long timeId, String edgeId) {\n\t\t\tsuper(sourceId, timeId);\n\t\t\tthis.edgeId = edgeId;\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).edgeRemoved(sourceId, timeId, edgeId);\n\t\t}\n\t}\n\n\tclass AfterNodeAddEvent extends GraphEvent {\n\t\tString nodeId;\n\n\t\tAfterNodeAddEvent(String sourceId, long timeId, String nodeId) {\n\t\t\tsuper(sourceId, timeId);\n\t\t\tthis.nodeId = nodeId;\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).nodeAdded(sourceId, timeId, nodeId);\n\t\t}\n\t}\n\n\tclass BeforeNodeRemoveEvent extends GraphEvent {\n\t\tString nodeId;\n\n\t\tBeforeNodeRemoveEvent(String sourceId, long timeId, String nodeId) {\n\t\t\tsuper(sourceId, timeId);\n\t\t\tthis.nodeId = nodeId;\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).nodeRemoved(sourceId, timeId, nodeId);\n\t\t}\n\t}\n\n\tclass BeforeGraphClearEvent extends GraphEvent {\n\t\tBeforeGraphClearEvent(String sourceId, long timeId) {\n\t\t\tsuper(sourceId, timeId);\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).graphCleared(sourceId, timeId);\n\t\t}\n\t}\n\n\tclass StepBeginsEvent extends GraphEvent {\n\t\tdouble step;\n\n\t\tStepBeginsEvent(String sourceId, long timeId, double step) {\n\t\t\tsuper(sourceId, timeId);\n\t\t\tthis.step = step;\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).stepBegins(sourceId, timeId, step);\n\t\t}\n\t}\n\n\tclass AttributeChangedEvent extends GraphEvent {\n\t\tElementType eltType;\n\n\t\tString eltId;\n\n\t\tString attribute;\n\n\t\tAttributeChangeEvent event;\n\n\t\tObject oldValue;\n\n\t\tObject newValue;\n\n\t\tAttributeChangedEvent(String sourceId, long timeId, String eltId,\n\t\t\t\tElementType eltType, String attribute,\n\t\t\t\tAttributeChangeEvent event, Object oldValue, Object newValue) {\n\t\t\tsuper(sourceId, timeId);\n\t\t\tthis.eltType = eltType;\n\t\t\tthis.eltId = eltId;\n\t\t\tthis.attribute = attribute;\n\t\t\tthis.event = event;\n\t\t\tthis.oldValue = oldValue;\n\t\t\tthis.newValue = newValue;\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tswitch (event) {\n\t\t\tcase ADD:\n\t\t\t\tswitch (eltType) {\n\t\t\t\tcase NODE:\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).nodeAttributeAdded(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute, newValue);\n\t\t\t\t\tbreak;\n\t\t\t\tcase EDGE:\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).edgeAttributeAdded(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute, newValue);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).graphAttributeAdded(sourceId, timeId,\n\t\t\t\t\t\t\t\tattribute, newValue);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase REMOVE:\n\t\t\t\tswitch (eltType) {\n\t\t\t\tcase NODE:\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).nodeAttributeRemoved(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute);\n\t\t\t\t\tbreak;\n\t\t\t\tcase EDGE:\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).edgeAttributeRemoved(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).graphAttributeRemoved(sourceId,\n\t\t\t\t\t\t\t\ttimeId, attribute);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tswitch (eltType) {\n\t\t\t\tcase NODE:\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).nodeAttributeChanged(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute, oldValue, newValue);\n\t\t\t\t\tbreak;\n\t\t\t\tcase EDGE:\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).edgeAttributeChanged(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute, oldValue, newValue);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).graphAttributeChanged(sourceId,\n\t\t\t\t\t\t\t\ttimeId, attribute, oldValue, newValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tclass AddToListEvent<T> extends GraphEvent {\n\t\tList<T> l;\n\t\tT obj;\n\n\t\tAddToListEvent(List<T> l, T obj) {\n\t\t\tsuper(null, -1);\n\t\t\tthis.l = l;\n\t\t\tthis.obj = obj;\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tl.add(obj);\n\t\t}\n\t}\n\n\tclass RemoveFromListEvent<T> extends GraphEvent {\n\t\tList<T> l;\n\t\tT obj;\n\n\t\tRemoveFromListEvent(List<T> l, T obj) {\n\t\t\tsuper(null, -1);\n\t\t\tthis.l = l;\n\t\t\tthis.obj = obj;\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tl.remove(obj);\n\t\t}\n\t}\n\n\tclass ClearListEvent<T> extends GraphEvent {\n\t\tList<T> l;\n\n\t\tClearListEvent(List<T> l) {\n\t\t\tsuper(null, -1);\n\t\t\tthis.l = l;\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tl.clear();\n\t\t}\n\t}\n}",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "DefaultCamera", "org.graphstream.ui.swingViewer.util" ], [ "GradientFactory", "org.graphstream.ui.swingViewer.util" ], [ "GraphMetrics", "org.graphstream.ui.swingViewer.util" ], [ "Graphics2DOutput", "org.graphstream.ui.swingViewer.util" ], [ "ImageCache", "org.graphstream.ui.swingViewer.util" ], [ "StrokeFactory", "org.graphstream.ui.swingViewer.util" ], [ "FontCache", "org.graphstream.ui.swingViewer.util" ], [ "FontSlot", "org.graphstream.ui.swingViewer.util" ], [ "DefaultView", "org.graphstream.ui.swingViewer" ], [ "SpriteRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "ElementRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "NodeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "Arrow", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "Shape", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "EdgeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "SwingBasicGraphRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "GraphRendererBase", "org.graphstream.ui.swingViewer" ], [ "GraphRenderer", "org.graphstream.ui.swingViewer" ], [ "LayerRenderer", "org.graphstream.ui.swingViewer" ], [ "ViewPanel", "org.graphstream.ui.swingViewer" ], [ "Layouts", "org.graphstream.ui.layout" ], [ "Layout", "org.graphstream.ui.layout" ], [ "LayoutRunner", "org.graphstream.ui.layout" ], [ "NodeParticle", "org.graphstream.ui.layout.springbox" ], [ "GraphCellData", "org.graphstream.ui.layout.springbox" ], [ "EdgeSpring", "org.graphstream.ui.layout.springbox" ], [ "Energies", "org.graphstream.ui.layout.springbox" ], [ "BarnesHutLayout", "org.graphstream.ui.layout.springbox" ], [ "LinLog", "org.graphstream.ui.layout.springbox.implementations" ], [ "LinLogNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBoxNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBox", "org.graphstream.ui.layout.springbox.implementations" ], [ "Point2", "org.graphstream.ui.geom" ], [ "Vector2", "org.graphstream.ui.geom" ], [ "Vector3", "org.graphstream.ui.geom" ], [ "Point3", "org.graphstream.ui.geom" ], [ "ViewerListener", "org.graphstream.ui.view" ], [ "MouseManager", "org.graphstream.ui.view.util" ], [ "ShortcutManager", "org.graphstream.ui.view.util" ], [ "DefaultShortcutManager", "org.graphstream.ui.view.util" ], [ "FpsCounter", "org.graphstream.ui.view.util" ], [ "CubicCurve", "org.graphstream.ui.view.util" ], [ "DefaultMouseManager", "org.graphstream.ui.view.util" ], [ "Selection", "org.graphstream.ui.view" ], [ "ViewerPipe", "org.graphstream.ui.view" ], [ "Viewer", "org.graphstream.ui.view" ], [ "View", "org.graphstream.ui.view" ], [ "Camera", "org.graphstream.ui.view" ], [ "Sprite", "org.graphstream.ui.spriteManager" ], [ "InvalidSpriteIDException", "org.graphstream.ui.spriteManager" ], [ "SpriteManager", "org.graphstream.ui.spriteManager" ], [ "SpriteFactory", "org.graphstream.ui.spriteManager" ], [ "StyleGroupListener", "org.graphstream.ui.graphicGraph" ], [ "Colors", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Values", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetListener", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetParserTokenManager", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParserConstants", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParser", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "Style", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheet", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleConstants", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Selector", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Value", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Rule", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "GraphicNode", "org.graphstream.ui.graphicGraph" ], [ "StyleGroup", "org.graphstream.ui.graphicGraph" ], [ "GraphPosLengthUtils", "org.graphstream.ui.graphicGraph" ], [ "GraphicEdge", "org.graphstream.ui.graphicGraph" ], [ "GraphicElementChangeListener", "org.graphstream.ui.graphicGraph" ], [ "GraphicGraph", "org.graphstream.ui.graphicGraph" ], [ "StyleGroupSet", "org.graphstream.ui.graphicGraph" ], [ "GraphicSprite", "org.graphstream.ui.graphicGraph" ], [ "GraphicElement", "org.graphstream.ui.graphicGraph" ], [ "VerboseSink", "org.graphstream.util" ], [ "GraphListeners", "org.graphstream.util" ], [ "Environment", "org.graphstream.util" ], [ "GraphDiff", "org.graphstream.util" ], [ "Filters", "org.graphstream.util" ], [ "FilteredEdgeIterator", "org.graphstream.util" ], [ "Parser", "org.graphstream.util.parser" ], [ "ParserFactory", "org.graphstream.util.parser" ], [ "TokenMgrError", "org.graphstream.util.parser" ], [ "ParseException", "org.graphstream.util.parser" ], [ "SimpleCharStream", "org.graphstream.util.parser" ], [ "Token", "org.graphstream.util.parser" ], [ "ISODateIO", "org.graphstream.util.time" ], [ "ISODateComponent", "org.graphstream.util.time" ], [ "FilteredNodeIterator", "org.graphstream.util" ], [ "FixedArrayList", "org.graphstream.util.set" ], [ "StepCounter", "org.graphstream.util" ], [ "GraphSpells", "org.graphstream.util.cumulative" ], [ "CumulativeAttributes", "org.graphstream.util.cumulative" ], [ "CumulativeSpells", "org.graphstream.util.cumulative" ], [ "Filter", "org.graphstream.util" ], [ "PipeAdapter", "org.graphstream.stream" ], [ "GraphParseException", "org.graphstream.stream" ], [ "ElementSink", "org.graphstream.stream" ], [ "URLSource", "org.graphstream.stream.net" ], [ "HTTPSource", "org.graphstream.stream.net" ], [ "SourceAdapter", "org.graphstream.stream" ], [ "AttributeSink", "org.graphstream.stream" ], [ "GMLParserConstants", "org.graphstream.stream.file.gml" ], [ "GMLParserTokenManager", "org.graphstream.stream.file.gml" ], [ "GMLContext", "org.graphstream.stream.file.gml" ], [ "Graphics", "org.graphstream.stream.file.gml" ], [ "KeyValues", "org.graphstream.stream.file.gml" ], [ "GMLParser", "org.graphstream.stream.file.gml" ], [ "FileSinkGraphML", "org.graphstream.stream.file" ], [ "TLPParserConstants", "org.graphstream.stream.file.tlp" ], [ "TLPParser", "org.graphstream.stream.file.tlp" ], [ "TLPParserTokenManager", "org.graphstream.stream.file.tlp" ], [ "FileSinkFactory", "org.graphstream.stream.file" ], [ "FileSourceEdge", "org.graphstream.stream.file" ], [ "FileSinkBase", "org.graphstream.stream.file" ], [ "FileSinkTikZ", "org.graphstream.stream.file" ], [ "FileSourceGEXF", "org.graphstream.stream.file" ], [ "DOTParser", "org.graphstream.stream.file.dot" ], [ "DOTParserConstants", "org.graphstream.stream.file.dot" ], [ "DOTParserTokenManager", "org.graphstream.stream.file.dot" ], [ "FileSink", "org.graphstream.stream.file" ], [ "PajekContext", "org.graphstream.stream.file.pajek" ], [ "Graphics", "org.graphstream.stream.file.pajek" ], [ "NodeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeMatrix", "org.graphstream.stream.file.pajek" ], [ "PajekParserTokenManager", "org.graphstream.stream.file.pajek" ], [ "PajekParserConstants", "org.graphstream.stream.file.pajek" ], [ "FileSourceXML", "org.graphstream.stream.file" ], [ "FileSinkBaseFiltered", "org.graphstream.stream.file" ], [ "FileSinkDOT", "org.graphstream.stream.file" ], [ "FileSourceParser", "org.graphstream.stream.file" ], [ "FileSinkDGSFiltered", "org.graphstream.stream.file" ], [ "FileSourceDOT", "org.graphstream.stream.file" ], [ "FileSourceDGS1And2", "org.graphstream.stream.file" ], [ "FileSourceGraphML", "org.graphstream.stream.file" ], [ "FileSourceFactory", "org.graphstream.stream.file" ], [ "FileSinkImages", "org.graphstream.stream.file" ], [ "FileSinkDynamicGML", "org.graphstream.stream.file" ], [ "FileSinkSVG", "org.graphstream.stream.file" ], [ "GEXFSpell", "org.graphstream.stream.file.gexf" ], [ "SmartXMLWriter", "org.graphstream.stream.file.gexf" ], [ "GEXFElement", "org.graphstream.stream.file.gexf" ], [ "GEXFEdges", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValues", "org.graphstream.stream.file.gexf" ], [ "GEXFEdge", "org.graphstream.stream.file.gexf" ], [ "GEXFSpells", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValue", "org.graphstream.stream.file.gexf" ], [ "GEXFNodes", "org.graphstream.stream.file.gexf" ], [ "GEXFNode", "org.graphstream.stream.file.gexf" ], [ "GEXFMeta", "org.graphstream.stream.file.gexf" ], [ "GEXFAttributes", "org.graphstream.stream.file.gexf" ], [ "GEXF", "org.graphstream.stream.file.gexf" ], [ "GEXFGraph", "org.graphstream.stream.file.gexf" ], [ "GEXFAttribute", "org.graphstream.stream.file.gexf" ], [ "OldFileSourceDGS", "org.graphstream.stream.file.dgs" ], [ "DGSParser", "org.graphstream.stream.file.dgs" ], [ "FileSourceBase", "org.graphstream.stream.file" ], [ "FileSinkGML", "org.graphstream.stream.file" ], [ "FileSourceDGS", "org.graphstream.stream.file" ], [ "FileSinkDGSUtility", "org.graphstream.stream.file" ], [ "FileSourceTLP", "org.graphstream.stream.file" ], [ "FileSinkSVG2", "org.graphstream.stream.file" ], [ "FileSource", "org.graphstream.stream.file" ], [ "FileSourceNCol", "org.graphstream.stream.file" ], [ "FileSourcePajek", "org.graphstream.stream.file" ], [ "FileSourceGPX", "org.graphstream.stream.file" ], [ "FileSourceLGL", "org.graphstream.stream.file" ], [ "FileSinkGEXF2", "org.graphstream.stream.file" ], [ "FileSourceGML", "org.graphstream.stream.file" ], [ "FileSinkGEXF", "org.graphstream.stream.file" ], [ "FileSinkDGS", "org.graphstream.stream.file" ], [ "ProxyPipe", "org.graphstream.stream" ], [ "Sink", "org.graphstream.stream" ], [ "Timeline", "org.graphstream.stream" ], [ "Pipe", "org.graphstream.stream" ], [ "SinkAdapter", "org.graphstream.stream" ], [ "Replayable", "org.graphstream.stream" ], [ "Source", "org.graphstream.stream" ], [ "AnnotatedSink", "org.graphstream.stream" ], [ "GraphReplay", "org.graphstream.stream" ], [ "AttributePipe", "org.graphstream.stream" ], [ "SinkTime", "org.graphstream.stream.sync" ], [ "SourceTime", "org.graphstream.stream.sync" ], [ "PipeBase", "org.graphstream.stream" ], [ "ThreadProxyPipe", "org.graphstream.stream.thread" ], [ "ThreadProxyPipeOld", "org.graphstream.stream.thread" ], [ "RMISource", "org.graphstream.stream.rmi" ], [ "RMIAdapterOut", "org.graphstream.stream.rmi" ], [ "RMISink", "org.graphstream.stream.rmi" ], [ "RMIAdapterIn", "org.graphstream.stream.rmi" ], [ "SourceBase", "org.graphstream.stream" ], [ "NetStreamDecoder", "org.graphstream.stream.netstream" ], [ "NetStreamReceiver", "org.graphstream.stream.netstream" ], [ "NetStreamConstants", "org.graphstream.stream.netstream" ], [ "NetStreamSender", "org.graphstream.stream.netstream" ], [ "DefaultNetStreamDecoder", "org.graphstream.stream.netstream" ], [ "Base64", "org.graphstream.stream.netstream.packing" ], [ "NetStreamUnpacker", "org.graphstream.stream.netstream.packing" ], [ "Base64Packer", "org.graphstream.stream.netstream.packing" ], [ "Base64Unpacker", "org.graphstream.stream.netstream.packing" ], [ "NetStreamPacker", "org.graphstream.stream.netstream.packing" ], [ "AttributePredicate", "org.graphstream.stream" ], [ "Element", "org.graphstream.graph" ], [ "Node", "org.graphstream.graph" ], [ "BreadthFirstIterator", "org.graphstream.graph" ], [ "Graph", "org.graphstream.graph" ], [ "EdgeRejectedException", "org.graphstream.graph" ], [ "CompoundAttribute", "org.graphstream.graph" ], [ "Structure", "org.graphstream.graph" ], [ "DepthFirstIterator", "org.graphstream.graph" ], [ "NullAttributeException", "org.graphstream.graph" ], [ "IdAlreadyInUseException", "org.graphstream.graph" ], [ "EdgeFactory", "org.graphstream.graph" ], [ "ElementNotFoundException", "org.graphstream.graph" ], [ "OneAttributeElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListNode", "org.graphstream.graph.implementations" ], [ "SingleNode", "org.graphstream.graph.implementations" ], [ "AbstractElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListGraph", "org.graphstream.graph.implementations" ], [ "AbstractNode", "org.graphstream.graph.implementations" ], [ "DefaultGraph", "org.graphstream.graph.implementations" ], [ "MultiGraph", "org.graphstream.graph.implementations" ], [ "Graphs", "org.graphstream.graph.implementations" ], [ "SingleGraph", "org.graphstream.graph.implementations" ], [ "MultiNode", "org.graphstream.graph.implementations" ], [ "AbstractGraph", "org.graphstream.graph.implementations" ], [ "AbstractEdge", "org.graphstream.graph.implementations" ], [ "GraphFactory", "org.graphstream.graph" ], [ "NodeFactory", "org.graphstream.graph" ], [ "Edge", "org.graphstream.graph" ], [ "Path", "org.graphstream.graph" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "gradientInArea", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)" ], [ "linearGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)" ], [ "createFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static float[] createFractions(Style style)" ], [ "createColors", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static Color[] createColors(Style style)" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "public static ImageCache defaultImageCache()" ], [ "generateStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "public static Stroke generateStroke(Style style, GraphMetrics metrics)" ], [ "generatePlainStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)" ], [ "generateDotsStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)" ], [ "generateDashesStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache()" ], [ "newLayoutAlgorithm", "org.graphstream.ui.layout", "Layouts", "public static Layout newLayoutAlgorithm()" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static double eval(double x0, double x1, double x2, double x3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static double derivative(double x0, double x1, double x2, double x3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "newGraphRenderer", "org.graphstream.ui.view", "Viewer", "public static GraphRenderer newGraphRenderer()" ], [ "getPositionValue", "org.graphstream.ui.spriteManager", "SpriteManager", "protected static Values getPositionValue(Object value)" ], [ "convertColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Color convertColor(Object anyValue)" ], [ "convertLabel", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static String convertLabel(Object value)" ], [ "convertWidth", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static float convertWidth(Object value)" ], [ "convertValue", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Value convertValue(Object value)" ], [ "convertUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Units convertUnit(String unit)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Graph graph, String id)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Graph graph, String id)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Node node)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Node node)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Graph graph, String id)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Edge edge)" ], [ "getGlobalEnvironment", "org.graphstream.util", "Environment", "public static Environment getGlobalEnvironment()" ], [ "falseFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> falseFilter()" ], [ "trueFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> trueFilter()" ], [ "byAttributeFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)" ], [ "separateNodeAndEdgeFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)" ], [ "byExtremitiesFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)" ], [ "byIdFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byIdFilter(String idPattern)" ], [ "isContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)" ], [ "isIdContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)" ], [ "and", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)" ], [ "or", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)" ], [ "xor", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)" ], [ "not", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> not(Filter<T> f)" ], [ "addEscapes", "org.graphstream.util.parser", "TokenMgrError", "protected static final String addEscapes(String str)" ], [ "LexicalError", "org.graphstream.util.parser", "TokenMgrError", "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)" ], [ "add_escapes", "org.graphstream.util.parser", "ParseException", "static String add_escapes(String str)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind, String image)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind)" ], [ "countStepInFile", "org.graphstream.util", "StepCounter", "public static int countStepInFile(String path) throws IOException" ], [ "GET", "org.graphstream.stream.net", "HTTPSource", "protected static HashMap<String, Object> GET(HttpExchange ex)" ], [ "sinkFor", "org.graphstream.stream.file", "FileSinkFactory", "public static FileSink sinkFor(String filename)" ], [ "formatId", "org.graphstream.stream.file", "FileSinkTikZ", "protected static String formatId(String id)" ], [ "getInt", "org.graphstream.stream.file.pajek", "PajekContext", "protected static int getInt(Token nb) throws ParseException" ], [ "getReal", "org.graphstream.stream.file.pajek", "PajekContext", "protected static double getReal(Token nb) throws ParseException" ], [ "toColorValue", "org.graphstream.stream.file.pajek", "PajekContext", "public static String toColorValue(Token R, Token G, Token B) throws ParseException" ], [ "sourceFor", "org.graphstream.stream.file", "FileSourceFactory", "public static FileSource sourceFor(String fileName) throws IOException" ], [ "getXMLRootElement", "org.graphstream.stream.file", "FileSourceFactory", "public static String getXMLRootElement(String fileName) throws IOException" ], [ "formatStringForQuoting", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String formatStringForQuoting(String str)" ], [ "attributeString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String attributeString(String key, Object value, boolean remove)" ], [ "arrayString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String arrayString(Object value)" ], [ "valueString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String valueString(Object value)" ], [ "hashToString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String hashToString(HashMap<?, ?> hash)" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source)" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s, int options) throws java.io.IOException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decodeFromFile(String filename) throws java.io.IOException" ], [ "encodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeFromFile(String filename) throws java.io.IOException" ], [ "unmutableGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph unmutableGraph(Graph g)" ], [ "synchronizedGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph synchronizedGraph(Graph g)" ], [ "merge", "org.graphstream.graph.implementations", "Graphs", "public static Graph merge(Graph... graphs)" ], [ "clone", "org.graphstream.graph.implementations", "Graphs", "public static Graph clone(Graph g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "version16", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static boolean version16 = false;" ], [ "predefFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[][] predefFractions = new float[11][];" ], [ "predefFractions2", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions2 = { 0f, 1f };" ], [ "predefFractions3", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions3 = { 0f, 0.5f, 1f };" ], [ "predefFractions4", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };" ], [ "predefFractions5", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };" ], [ "predefFractions6", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };" ], [ "predefFractions7", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };" ], [ "predefFractions8", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };" ], [ "predefFractions9", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };" ], [ "predefFractions10", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "protected static ImageCache defaultImageCache;" ], [ "dots", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dots = { 1f, 1f };" ], [ "dashes", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dashes = { 3f, 3f };" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache;" ], [ "NULL_POINT2", "org.graphstream.ui.geom", "Point2", "public static final Point2 NULL_POINT2 = new Point2(0, 0);" ], [ "NULL_POINT3", "org.graphstream.ui.geom", "Point3", "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);" ], [ "DEFAULT_VIEW_ID", "org.graphstream.ui.view", "Viewer", "public static String DEFAULT_VIEW_ID = \"defaultView\";" ], [ "jjbitVec0", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };" ], [ "jjstrLiteralImages", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };" ], [ "lexStateNames", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };" ], [ "jjtoSkip", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };" ], [ "colorMap", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static HashMap<String,Color> colorMap;" ], [ "sharpColor1", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor1;" ], [ "sharpColor2", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor2;" ], [ "cssColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColor;" ], [ "cssColorA", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColorA;" ], [ "awtColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern awtColor;" ], [ "hexaColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern hexaColor;" ], [ "numberUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern numberUnit;" ], [ "number", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern number;" ], [ "acceptedAttribute", "org.graphstream.ui.graphicGraph", "GraphicElement", "protected static Pattern acceptedAttribute;" ], [ "DEFAULT_AN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_CNA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_AE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";" ], [ "DEFAULT_CEA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CEC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CER_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";" ], [ "DEFAULT_CGA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_CL_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";" ], [ "DEFAULT_ST_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";" ], [ "GLOBAL_ENV", "org.graphstream.util", "Environment", "public static Environment GLOBAL_ENV;" ], [ "LEXICAL_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int LEXICAL_ERROR = 0;" ], [ "STATIC_LEXER_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int STATIC_LEXER_ERROR = 1;" ], [ "INVALID_LEXICAL_STATE", "org.graphstream.util.parser", "TokenMgrError", "public static final int INVALID_LEXICAL_STATE = 2;" ], [ "LOOP_DETECTED", "org.graphstream.util.parser", "TokenMgrError", "public static final int LOOP_DETECTED = 3;" ], [ "staticFlag", "org.graphstream.util.parser", "SimpleCharStream", "public static final boolean staticFlag = false;" ], [ "ABBREVIATED_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");" ], [ "FULL_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");" ], [ "ABBREVIATED_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");" ], [ "FULL_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");" ], [ "LOCALE_DATE_AND_TIME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);" ], [ "CENTURY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");" ], [ "DAY_OF_MONTH_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");" ], [ "DATE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");" ], [ "DAY_OF_MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");" ], [ "DATE_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");" ], [ "WEEK_BASED_YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "WEEK_BASED_YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "ABBREVIATED_MONTH_NAME_ALIAS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");" ], [ "HOUR_OF_DAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");" ], [ "HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");" ], [ "DAY_OF_YEAR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");" ], [ "MILLISECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");" ], [ "EPOCH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent EPOCH = new EpochComponent();" ], [ "MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");" ], [ "MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");" ], [ "NEW_LINE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");" ], [ "AM_PM", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent AM_PM = new AMPMComponent();" ], [ "LOCALE_CLOCK_TIME_12_HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");" ], [ "HOUR_AND_MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");" ], [ "SECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");" ], [ "TABULATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");" ], [ "TIME_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");" ], [ "DAY_OF_WEEK_1_7", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");" ], [ "WEEK_OF_YEAR_FROM_SUNDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");" ], [ "WEEK_NUMBER_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");" ], [ "DAY_OF_WEEK_0_6", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");" ], [ "WEEK_OF_YEAR_FROM_MONDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");" ], [ "LOCALE_DATE_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");" ], [ "LOCALE_TIME_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");" ], [ "YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "UTC_OFFSET", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();" ], [ "LOCALE_TIME_ZONE_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");" ], [ "PERCENT", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");" ], [ "jjbitVec0", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoToken = { 0xff01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoSkip = { 0x1eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoToken = { 0xffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "XYZ_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String XYZ_ATTR = \"xyz\";" ], [ "WIDTH_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String WIDTH_ATTR = \"ui.tikz.width\";" ], [ "HEIGHT_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String HEIGHT_ATTR = \"ui.tikz.height\";" ], [ "DEFAULT_WIDTH", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_WIDTH = 10;" ], [ "DEFAULT_HEIGHT", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_HEIGHT = 10;" ], [ "DISPLAY_MIN_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;" ], [ "DISPLAY_MAX_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;" ], [ "jjbitVec0", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };" ], [ "lexStateNames", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoToken = { 0x3ffffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoToken = { 0x3fffffffffffc9L };" ], [ "jjtoSkip", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoSkip = { 0x6L };" ], [ "XMLNS", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";" ], [ "XMLNS_XSI", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";" ], [ "XMLNS_SL", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";" ], [ "XMLNS_VIZ", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";" ], [ "VERSION", "org.graphstream.stream.file.gexf", "GEXF", "public static final String VERSION = \"1.2\";" ], [ "BUFFER_SIZE", "org.graphstream.stream.file.dgs", "DGSParser", "protected static final int BUFFER_SIZE = 4096;" ], [ "ARRAY_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_OPEN = '{';" ], [ "ARRAY_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_CLOSE = '}';" ], [ "MAP_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_OPEN = '[';" ], [ "MAP_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_CLOSE = ']';" ], [ "gradientId", "org.graphstream.stream.file", "FileSinkSVG2", "static int gradientId = 0;" ], [ "gradientId", "org.graphstream.stream.file", "SVGStyle", "static int gradientId = 0;" ], [ "TIME_PREFIX", "org.graphstream.stream", "Timeline", "public static final String TIME_PREFIX = \"time\";" ], [ "SYNC_DISABLE_KEY", "org.graphstream.stream.sync", "SinkTime", "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";" ], [ "disableSync", "org.graphstream.stream.sync", "SinkTime", "protected static final boolean disableSync;" ], [ "LIGHT_YELLOW", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String LIGHT_YELLOW = \"\u001B[33;1m\";" ], [ "RESET", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String RESET = \"\u001B[0m\";" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "IncomingBuffer", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "EVENT_GETVERSION", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_GETVERSION = 0x00;" ], [ "EVENT_START", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_START = 0x01;" ], [ "EVENT_END", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_END = 0x02;" ], [ "EVENT_ADD_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE = 0x10;" ], [ "EVENT_DEL_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE = 0x11;" ], [ "EVENT_ADD_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE = 0x12;" ], [ "EVENT_DEL_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE = 0x13;" ], [ "EVENT_STEP", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_STEP = 0x14;" ], [ "EVENT_CLEARED", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CLEARED = 0x15;" ], [ "EVENT_ADD_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_GRAPH_ATTR = 0x16;" ], [ "EVENT_CHG_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_GRAPH_ATTR = 0x17;" ], [ "EVENT_DEL_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_GRAPH_ATTR = 0x18;" ], [ "EVENT_ADD_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE_ATTR = 0x19;" ], [ "EVENT_CHG_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_NODE_ATTR = 0x1a;" ], [ "EVENT_DEL_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE_ATTR = 0x1b;" ], [ "EVENT_ADD_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE_ATTR = 0x1c;" ], [ "EVENT_CHG_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_EDGE_ATTR = 0x1d;" ], [ "EVENT_DEL_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE_ATTR = 0x1e;" ], [ "TYPE_UNKNOWN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_UNKNOWN = 0x00;" ], [ "TYPE_BOOLEAN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN = 0x50;" ], [ "TYPE_BOOLEAN_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN_ARRAY = 0x51;" ], [ "TYPE_BYTE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE = 0x52;" ], [ "TYPE_BYTE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE_ARRAY = 0x53;" ], [ "TYPE_SHORT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT = 0x54;" ], [ "TYPE_SHORT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT_ARRAY = 0x55;" ], [ "TYPE_INT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT = 0x56;" ], [ "TYPE_INT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT_ARRAY = 0x57;" ], [ "TYPE_LONG", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG = 0x58;" ], [ "TYPE_LONG_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG_ARRAY = 0x59;" ], [ "TYPE_FLOAT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT = 0x5a;" ], [ "TYPE_FLOAT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT_ARRAY = 0x5b;" ], [ "TYPE_DOUBLE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE = 0x5c;" ], [ "TYPE_DOUBLE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE_ARRAY = 0x5d;" ], [ "TYPE_STRING", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_STRING = 0x5e;" ], [ "TYPE_RAW", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_RAW = 0x5f;" ], [ "TYPE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static byte TYPE_ARRAY = 0x60;" ], [ "TYPE_NULL", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_NULL = 0x61;" ], [ "COMMAND", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int COMMAND = 0x70;" ], [ "NO_OPTIONS", "org.graphstream.stream.netstream.packing", "Base64", "public final static int NO_OPTIONS = 0;" ], [ "ENCODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ENCODE = 1;" ], [ "DECODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DECODE = 0;" ], [ "GZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int GZIP = 2;" ], [ "DONT_GUNZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DONT_GUNZIP = 4;" ], [ "DO_BREAK_LINES", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DO_BREAK_LINES = 8;" ], [ "URL_SAFE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int URL_SAFE = 16;" ], [ "ORDERED", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ORDERED = 32;" ], [ "INITIAL_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final int INITIAL_EDGE_CAPACITY;" ], [ "GROWTH_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final double GROWTH_FACTOR = 1.1;" ], [ "I_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char I_EDGE = 0;" ], [ "IO_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char IO_EDGE = 1;" ], [ "O_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char O_EDGE = 2;" ], [ "GROW_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final double GROW_FACTOR = 1.1;" ], [ "DEFAULT_NODE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_NODE_CAPACITY = 128;" ], [ "DEFAULT_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_EDGE_CAPACITY = 1024;" ] ],
  "tokensMethodJavadocValues" : [ [ "\"edge added\"", "String" ] ],
  "tokensMethodArguments" : [ [ "sourceId", "java.lang", "String" ], [ "edgeId", "java.lang", "String" ], [ "fromNodeId", "java.lang", "String" ], [ "toNodeId", "java.lang", "String" ], [ "directed", "", "boolean" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "elementSinks", "org.graphstream.stream", "SourceBase", "public Iterable<ElementSink> elementSinks()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "attributeSinks", "org.graphstream.stream", "SourceBase", "public Iterable<AttributeSink> attributeSinks()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "subSequence", "java.lang", "String", "public CharSequence subSequence(int arg0, int arg1)" ], [ "translateEscapes", "java.lang", "String", "public String translateEscapes()" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0)" ], [ "coder", "java.lang", "String", "byte coder()" ], [ "endsWith", "java.lang", "String", "public boolean endsWith(String arg0)" ], [ "isLatin1", "java.lang", "String", "boolean isLatin1()" ], [ "isEmpty", "java.lang", "String", "public boolean isEmpty()" ], [ "charAt", "java.lang", "String", "public char charAt(int arg0)" ], [ "resolveConstantDesc", "java.lang", "String", "public String resolveConstantDesc(MethodHandles.Lookup arg0)" ], [ "replaceAll", "java.lang", "String", "public String replaceAll(String arg0, String arg1)" ], [ "toString", "java.lang", "String", "public String toString()" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(CharSequence arg0)" ], [ "substring", "java.lang", "String", "public String substring(int arg0, int arg1)" ], [ "value", "java.lang", "String", "byte[] value()" ], [ "indent", "java.lang", "String", "public String indent(int arg0)" ], [ "codePointBefore", "java.lang", "String", "public int codePointBefore(int arg0)" ], [ "replace", "java.lang", "String", "public String replace(char arg0, char arg1)" ], [ "replaceFirst", "java.lang", "String", "public String replaceFirst(String arg0, String arg1)" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0, int arg1)" ], [ "compareToIgnoreCase", "java.lang", "String", "public int compareToIgnoreCase(String arg0)" ], [ "concat", "java.lang", "String", "public String concat(String arg0)" ], [ "describeConstable", "java.lang", "String", "public Optional<String> describeConstable()" ], [ "repeat", "java.lang", "String", "public String repeat(int arg0)" ], [ "replace", "java.lang", "String", "public String replace(CharSequence arg0, CharSequence arg1)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(Charset arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0)" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase()" ], [ "codePointCount", "java.lang", "String", "public int codePointCount(int arg0, int arg1)" ], [ "split", "java.lang", "String", "public String[] split(String arg0)" ], [ "transform", "java.lang", "String", "public <R> R transform(Function<? super String, ? extends R> arg0)" ], [ "codePoints", "java.lang", "String", "public IntStream codePoints()" ], [ "lines", "java.lang", "String", "public Stream<String> lines()" ], [ "isBlank", "java.lang", "String", "public boolean isBlank()" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0, int arg1)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(StringBuffer arg0)" ], [ "strip", "java.lang", "String", "public String strip()" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(String arg0) throws UnsupportedEncodingException" ], [ "stripLeading", "java.lang", "String", "public String stripLeading()" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase()" ], [ "matches", "java.lang", "String", "public boolean matches(String arg0)" ], [ "offsetByCodePoints", "java.lang", "String", "public int offsetByCodePoints(int arg0, int arg1)" ], [ "formatted", "java.lang", "String", "public String formatted(Object[] arg0)" ], [ "compareTo", "java.lang", "String", "public int compareTo(String arg0)" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0)" ], [ "toCharArray", "java.lang", "String", "public char[] toCharArray()" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0, int arg1)" ], [ "trim", "java.lang", "String", "public String trim()" ], [ "contains", "java.lang", "String", "public boolean contains(CharSequence arg0)" ], [ "substring", "java.lang", "String", "public String substring(int arg0)" ], [ "codePointAt", "java.lang", "String", "public int codePointAt(int arg0)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes()" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase(Locale arg0)" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0, int arg1)" ], [ "intern", "java.lang", "String", "public native String intern()" ], [ "stripTrailing", "java.lang", "String", "public String stripTrailing()" ], [ "chars", "java.lang", "String", "public IntStream chars()" ], [ "stripIndent", "java.lang", "String", "public String stripIndent()" ], [ "equals", "java.lang", "String", "public boolean equals(Object arg0)" ], [ "length", "java.lang", "String", "public int length()" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0)" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase(Locale arg0)" ], [ "equalsIgnoreCase", "java.lang", "String", "public boolean equalsIgnoreCase(String arg0)" ], [ "hashCode", "java.lang", "String", "public int hashCode()" ], [ "split", "java.lang", "String", "public String[] split(String arg0, int arg1)" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0, int arg1)" ], [ "compareTo", "java.lang", "Comparable", "public abstract int compareTo(T arg0)" ], [ "isEmpty", "java.lang", "CharSequence", "public default boolean isEmpty()" ], [ "subSequence", "java.lang", "CharSequence", "public abstract CharSequence subSequence(int arg0, int arg1)" ], [ "charAt", "java.lang", "CharSequence", "public abstract char charAt(int arg0)" ], [ "length", "java.lang", "CharSequence", "public abstract int length()" ], [ "chars", "java.lang", "CharSequence", "public default IntStream chars()" ], [ "codePoints", "java.lang", "CharSequence", "public default IntStream codePoints()" ], [ "toString", "java.lang", "CharSequence", "public abstract String toString()" ], [ "describeConstable", "java.lang.constant", "Constable", "public abstract Optional<? extends ConstantDesc> describeConstable()" ], [ "resolveConstantDesc", "java.lang.constant", "ConstantDesc", "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "attrSinks", "org.graphstream.stream", "SourceBase", "protected ArrayList<AttributeSink> attrSinks = new ArrayList<AttributeSink>();" ], [ "eltsSinks", "org.graphstream.stream", "SourceBase", "protected ArrayList<ElementSink> eltsSinks = new ArrayList<ElementSink>();" ], [ "eventQueue", "org.graphstream.stream", "SourceBase", "protected LinkedList<GraphEvent> eventQueue = new LinkedList<GraphEvent>();" ], [ "eventProcessing", "org.graphstream.stream", "SourceBase", "protected boolean eventProcessing = false;" ], [ "sourceId", "org.graphstream.stream", "SourceBase", "protected String sourceId;" ], [ "sourceTime", "org.graphstream.stream", "SourceBase", "protected SourceTime sourceTime;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 3730,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "gs-core-1.3",
  "packageName" : "org.graphstream.stream",
  "className" : "SourceBase",
  "javadocTag" : "@param sourceId The source identifier.",
  "methodJavadoc" : "    /**\n\t * Send a \"edge attribute added\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param edgeId\n\t *            The edge identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param value\n\t *            The attribute value.\n\t */",
  "methodSourceCode" : "public void sendEdgeAttributeAdded(String sourceId, long timeId, String edgeId, String attribute, Object value){\n    sendAttributeChangedEvent(sourceId, timeId, edgeId, ElementType.EDGE, attribute, AttributeChangeEvent.ADD, null, value);\n}",
  "classJavadoc" : "/**\n * Base implementation of an input that provide basic sink handling.\n * \n * <p>\n * This implementation can register a set of graph sinks (or separate sets of\n * attributes or elements sinks) and provides protected methods to easily\n * broadcast events to all the sinks (beginning with \"send\").\n * </p>\n * \n * <p>\n * Each time you want to produce an event toward all registered sinks, you call\n * one of the \"send*\" methods with correct parameters. The parameters of the\n * \"send*\" methods maps to the usual GraphStream events.\n * </p>\n * \n * <p>\n * This class is \"reentrant\". This means that if a send*() method is called\n * during the execution of another or the same send*() method, the event is\n * deferred until the first send*() method is finished. This avoid recursive\n * loops if a sink modifies the input during event handling.\n * </p>\n */",
  "classSourceCode" : "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign√©      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.stream;\n\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\n\nimport org.graphstream.graph.implementations.AbstractElement.AttributeChangeEvent;\nimport org.graphstream.stream.sync.SourceTime;\n\n/**\n * Base implementation of an input that provide basic sink handling.\n * \n * <p>\n * This implementation can register a set of graph sinks (or separate sets of\n * attributes or elements sinks) and provides protected methods to easily\n * broadcast events to all the sinks (beginning with \"send\").\n * </p>\n * \n * <p>\n * Each time you want to produce an event toward all registered sinks, you call\n * one of the \"send*\" methods with correct parameters. The parameters of the\n * \"send*\" methods maps to the usual GraphStream events.\n * </p>\n * \n * <p>\n * This class is \"reentrant\". This means that if a send*() method is called\n * during the execution of another or the same send*() method, the event is\n * deferred until the first send*() method is finished. This avoid recursive\n * loops if a sink modifies the input during event handling.\n * </p>\n */\npublic abstract class SourceBase implements Source {\n\t// Attribute\n\n\tpublic enum ElementType {\n\t\tNODE, EDGE, GRAPH\n\t};\n\n\t/**\n\t * Set of graph attributes sinks.\n\t */\n\tprotected ArrayList<AttributeSink> attrSinks = new ArrayList<AttributeSink>();\n\n\t/**\n\t * Set of graph elements sinks.\n\t */\n\tprotected ArrayList<ElementSink> eltsSinks = new ArrayList<ElementSink>();\n\n\t/**\n\t * A queue that allow the management of events (nodes/edge\n\t * add/delete/change) in the right order.\n\t */\n\tprotected LinkedList<GraphEvent> eventQueue = new LinkedList<GraphEvent>();\n\n\t/**\n\t * A boolean that indicates whether or not an Sink event is being sent\n\t * during another one.\n\t */\n\tprotected boolean eventProcessing = false;\n\n\t/**\n\t * Id of this source.\n\t */\n\tprotected String sourceId;\n\t\n\t/**\n\t * Time of this source.\n\t */\n\tprotected SourceTime sourceTime;\n\n\t// Construction\n\n\tprotected SourceBase() {\n\t\tthis(String.format(\"sourceOnThread#%d_%d\", Thread.currentThread()\n\t\t\t\t.getId(), System.currentTimeMillis()\n\t\t\t\t+ ((int) (Math.random() * 1000))));\n\t}\n\n\tprotected SourceBase(String sourceId) {\n\t\tthis.sourceId = sourceId;\n\t\tthis.sourceTime = new SourceTime(sourceId);\n\t}\n\n\t// Access\n\n\tpublic Iterable<AttributeSink> attributeSinks() {\n\t\treturn attrSinks;\n\t}\n\n\tpublic Iterable<ElementSink> elementSinks() {\n\t\treturn eltsSinks;\n\t}\n\n\t// Command\n\n\tpublic void addSink(Sink sink) {\n\t\taddAttributeSink(sink);\n\t\taddElementSink(sink);\n\t}\n\n\tpublic void addAttributeSink(AttributeSink sink) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tattrSinks.add(sink);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new AddToListEvent<AttributeSink>(attrSinks, sink));\n\t\t}\n\t}\n\n\tpublic void addElementSink(ElementSink sink) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\teltsSinks.add(sink);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new AddToListEvent<ElementSink>(eltsSinks, sink));\n\t\t}\n\t}\n\n\tpublic void clearSinks() {\n\t\tclearElementSinks();\n\t\tclearAttributeSinks();\n\t}\n\n\tpublic void clearElementSinks() {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\teltsSinks.clear();\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new ClearListEvent<ElementSink>(eltsSinks));\n\t\t}\n\t}\n\n\tpublic void clearAttributeSinks() {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tattrSinks.clear();\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new ClearListEvent<AttributeSink>(attrSinks));\n\t\t}\n\t}\n\n\tpublic void removeSink(Sink sink) {\n\t\tremoveAttributeSink(sink);\n\t\tremoveElementSink(sink);\n\t}\n\n\tpublic void removeAttributeSink(AttributeSink sink) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tattrSinks.remove(sink);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new RemoveFromListEvent<AttributeSink>(attrSinks,\n\t\t\t\t\tsink));\n\t\t}\n\t}\n\n\tpublic void removeElementSink(ElementSink sink) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\teltsSinks.remove(sink);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue\n\t\t\t\t\t.add(new RemoveFromListEvent<ElementSink>(eltsSinks, sink));\n\t\t}\n\t}\n\n\t/**\n\t * Send a \"graph cleared\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t */\n\tpublic void sendGraphCleared(String sourceId) {\n\t\tsendGraphCleared(sourceId, sourceTime.newEvent());\n\t}\n\n\t/**\n\t * Send a \"graph cleared\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t */\n\tpublic void sendGraphCleared(String sourceId, long timeId) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).graphCleared(sourceId, timeId);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new BeforeGraphClearEvent(sourceId, timeId));\n\t\t}\n\t}\n\n\t/**\n\t * Send a \"step begins\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The graph identifier.\n\t * @param step\n\t *            The step time stamp.\n\t */\n\tpublic void sendStepBegins(String sourceId, double step) {\n\t\tsendStepBegins(sourceId, sourceTime.newEvent(), step);\n\t}\n\n\t/**\n\t * Send a \"step begins\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The graph identifier.\n\t * @param timeId\n\t * @param step\n\t *            The step time stamp.\n\t */\n\tpublic void sendStepBegins(String sourceId, long timeId, double step) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).stepBegins(sourceId, timeId, step);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new StepBeginsEvent(sourceId, timeId, step));\n\t\t}\n\t}\n\n\t/**\n\t * Send a \"node added\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param nodeId\n\t *            The node identifier.\n\t */\n\tpublic void sendNodeAdded(String sourceId, String nodeId) {\n\t\tsendNodeAdded(sourceId, sourceTime.newEvent(), nodeId);\n\t}\n\n\t/**\n\t * Send a \"node added\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param nodeId\n\t *            The node identifier.\n\t */\n\tpublic void sendNodeAdded(String sourceId, long timeId, String nodeId) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).nodeAdded(sourceId, timeId, nodeId);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new AfterNodeAddEvent(sourceId, timeId, nodeId));\n\t\t}\n\t}\n\n\t/**\n\t * Send a \"node removed\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The graph identifier.\n\t * @param nodeId\n\t *            The node identifier.\n\t */\n\tpublic void sendNodeRemoved(String sourceId, String nodeId) {\n\t\tsendNodeRemoved(sourceId, sourceTime.newEvent(), nodeId);\n\t}\n\n\t/**\n\t * Send a \"node removed\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The graph identifier.\n\t * @param timeId\n\t * @param nodeId\n\t *            The node identifier.\n\t */\n\tpublic void sendNodeRemoved(String sourceId, long timeId, String nodeId) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).nodeRemoved(sourceId, timeId, nodeId);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new BeforeNodeRemoveEvent(sourceId, timeId, nodeId));\n\t\t}\n\t}\n\n\t/**\n\t * Send an \"edge added\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param edgeId\n\t *            The edge identifier.\n\t * @param fromNodeId\n\t *            The edge start node.\n\t * @param toNodeId\n\t *            The edge end node.\n\t * @param directed\n\t *            Is the edge directed?.\n\t */\n\tpublic void sendEdgeAdded(String sourceId, String edgeId,\n\t\t\tString fromNodeId, String toNodeId, boolean directed) {\n\t\tsendEdgeAdded(sourceId, sourceTime.newEvent(), edgeId, fromNodeId,\n\t\t\t\ttoNodeId, directed);\n\t}\n\n\t/**\n\t * Send an \"edge added\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param edgeId\n\t *            The edge identifier.\n\t * @param fromNodeId\n\t *            The edge start node.\n\t * @param toNodeId\n\t *            The edge end node.\n\t * @param directed\n\t *            Is the edge directed?.\n\t */\n\tpublic void sendEdgeAdded(String sourceId, long timeId, String edgeId,\n\t\t\tString fromNodeId, String toNodeId, boolean directed) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).edgeAdded(sourceId, timeId, edgeId,\n\t\t\t\t\t\tfromNodeId, toNodeId, directed);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new AfterEdgeAddEvent(sourceId, timeId, edgeId,\n\t\t\t\t\tfromNodeId, toNodeId, directed));\n\t\t}\n\t}\n\n\t/**\n\t * Send a \"edge removed\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param edgeId\n\t *            The edge identifier.\n\t */\n\tpublic void sendEdgeRemoved(String sourceId, String edgeId) {\n\t\tsendEdgeRemoved(sourceId, sourceTime.newEvent(), edgeId);\n\t}\n\n\t/**\n\t * Send a \"edge removed\" event to all element sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param edgeId\n\t *            The edge identifier.\n\t */\n\tpublic void sendEdgeRemoved(String sourceId, long timeId, String edgeId) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).edgeRemoved(sourceId, timeId, edgeId);\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new BeforeEdgeRemoveEvent(sourceId, timeId, edgeId));\n\t\t}\n\t}\n\n\t/**\n\t * Send a \"edge attribute added\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param edgeId\n\t *            The edge identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param value\n\t *            The attribute value.\n\t */\n\tpublic void sendEdgeAttributeAdded(String sourceId, String edgeId,\n\t\t\tString attribute, Object value) {\n\t\tsendAttributeChangedEvent(sourceId, edgeId, ElementType.EDGE,\n\t\t\t\tattribute, AttributeChangeEvent.ADD, null, value);\n\t}\n\n\t/**\n\t * Send a \"edge attribute added\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param edgeId\n\t *            The edge identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param value\n\t *            The attribute value.\n\t */\n\tpublic void sendEdgeAttributeAdded(String sourceId, long timeId,\n\t\t\tString edgeId, String attribute, Object value) {\n\t\tsendAttributeChangedEvent(sourceId, timeId, edgeId, ElementType.EDGE,\n\t\t\t\tattribute, AttributeChangeEvent.ADD, null, value);\n\t}\n\n\t/**\n\t * Send a \"edge attribute changed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param edgeId\n\t *            The edge identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param oldValue\n\t *            The old attribute value.\n\t * @param newValue\n\t *            The new attribute value.\n\t */\n\tpublic void sendEdgeAttributeChanged(String sourceId, String edgeId,\n\t\t\tString attribute, Object oldValue, Object newValue) {\n\t\tsendAttributeChangedEvent(sourceId, edgeId, ElementType.EDGE,\n\t\t\t\tattribute, AttributeChangeEvent.CHANGE, oldValue, newValue);\n\t}\n\n\t/**\n\t * Send a \"edge attribute changed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param edgeId\n\t *            The edge identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param oldValue\n\t *            The old attribute value.\n\t * @param newValue\n\t *            The new attribute value.\n\t */\n\tpublic void sendEdgeAttributeChanged(String sourceId, long timeId,\n\t\t\tString edgeId, String attribute, Object oldValue, Object newValue) {\n\t\tsendAttributeChangedEvent(sourceId, timeId, edgeId, ElementType.EDGE,\n\t\t\t\tattribute, AttributeChangeEvent.CHANGE, oldValue, newValue);\n\t}\n\n\t/**\n\t * Send a \"edge attribute removed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param edgeId\n\t *            The edge identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t */\n\tpublic void sendEdgeAttributeRemoved(String sourceId, String edgeId,\n\t\t\tString attribute) {\n\t\tsendAttributeChangedEvent(sourceId, edgeId, ElementType.EDGE,\n\t\t\t\tattribute, AttributeChangeEvent.REMOVE, null, null);\n\t}\n\n\t/**\n\t * Send a \"edge attribute removed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param edgeId\n\t *            The edge identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t */\n\tpublic void sendEdgeAttributeRemoved(String sourceId, long timeId,\n\t\t\tString edgeId, String attribute) {\n\t\tsendAttributeChangedEvent(sourceId, timeId, edgeId, ElementType.EDGE,\n\t\t\t\tattribute, AttributeChangeEvent.REMOVE, null, null);\n\t}\n\n\t/**\n\t * Send a \"graph attribute added\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param value\n\t *            The attribute value.\n\t */\n\tpublic void sendGraphAttributeAdded(String sourceId, String attribute,\n\t\t\tObject value) {\n\t\tsendAttributeChangedEvent(sourceId, null, ElementType.GRAPH, attribute,\n\t\t\t\tAttributeChangeEvent.ADD, null, value);\n\t}\n\n\t/**\n\t * Send a \"graph attribute added\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param attribute\n\t *            The attribute name.\n\t * @param value\n\t *            The attribute value.\n\t */\n\tpublic void sendGraphAttributeAdded(String sourceId, long timeId,\n\t\t\tString attribute, Object value) {\n\t\tsendAttributeChangedEvent(sourceId, timeId, null, ElementType.GRAPH,\n\t\t\t\tattribute, AttributeChangeEvent.ADD, null, value);\n\t}\n\n\t/**\n\t * Send a \"graph attribute changed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param oldValue\n\t *            The attribute old value.\n\t * @param newValue\n\t *            The attribute new value.\n\t */\n\tpublic void sendGraphAttributeChanged(String sourceId, String attribute,\n\t\t\tObject oldValue, Object newValue) {\n\t\tsendAttributeChangedEvent(sourceId, null, ElementType.GRAPH, attribute,\n\t\t\t\tAttributeChangeEvent.CHANGE, oldValue, newValue);\n\t}\n\n\t/**\n\t * Send a \"graph attribute changed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param attribute\n\t *            The attribute name.\n\t * @param oldValue\n\t *            The attribute old value.\n\t * @param newValue\n\t *            The attribute new value.\n\t */\n\tpublic void sendGraphAttributeChanged(String sourceId, long timeId,\n\t\t\tString attribute, Object oldValue, Object newValue) {\n\t\tsendAttributeChangedEvent(sourceId, timeId, null, ElementType.GRAPH,\n\t\t\t\tattribute, AttributeChangeEvent.CHANGE, oldValue, newValue);\n\t}\n\n\t/**\n\t * Send a \"graph attribute removed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t */\n\tpublic void sendGraphAttributeRemoved(String sourceId, String attribute) {\n\t\tsendAttributeChangedEvent(sourceId, null, ElementType.GRAPH, attribute,\n\t\t\t\tAttributeChangeEvent.REMOVE, null, null);\n\t}\n\n\t/**\n\t * Send a \"graph attribute removed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param attribute\n\t *            The attribute name.\n\t */\n\tpublic void sendGraphAttributeRemoved(String sourceId, long timeId,\n\t\t\tString attribute) {\n\t\tsendAttributeChangedEvent(sourceId, timeId, null, ElementType.GRAPH,\n\t\t\t\tattribute, AttributeChangeEvent.REMOVE, null, null);\n\t}\n\n\t/**\n\t * Send a \"node attribute added\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param nodeId\n\t *            The node identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param value\n\t *            The attribute value.\n\t */\n\tpublic void sendNodeAttributeAdded(String sourceId, String nodeId,\n\t\t\tString attribute, Object value) {\n\t\tsendAttributeChangedEvent(sourceId, nodeId, ElementType.NODE,\n\t\t\t\tattribute, AttributeChangeEvent.ADD, null, value);\n\t}\n\n\t/**\n\t * Send a \"node attribute added\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param nodeId\n\t *            The node identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param value\n\t *            The attribute value.\n\t */\n\tpublic void sendNodeAttributeAdded(String sourceId, long timeId,\n\t\t\tString nodeId, String attribute, Object value) {\n\t\tsendAttributeChangedEvent(sourceId, timeId, nodeId, ElementType.NODE,\n\t\t\t\tattribute, AttributeChangeEvent.ADD, null, value);\n\t}\n\n\t/**\n\t * Send a \"node attribute changed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param nodeId\n\t *            The node identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param oldValue\n\t *            The attribute old value.\n\t * @param newValue\n\t *            The attribute new value.\n\t */\n\tpublic void sendNodeAttributeChanged(String sourceId, String nodeId,\n\t\t\tString attribute, Object oldValue, Object newValue) {\n\t\tsendAttributeChangedEvent(sourceId, nodeId, ElementType.NODE,\n\t\t\t\tattribute, AttributeChangeEvent.CHANGE, oldValue, newValue);\n\t}\n\n\t/**\n\t * Send a \"node attribute changed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param nodeId\n\t *            The node identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t * @param oldValue\n\t *            The attribute old value.\n\t * @param newValue\n\t *            The attribute new value.\n\t */\n\tpublic void sendNodeAttributeChanged(String sourceId, long timeId,\n\t\t\tString nodeId, String attribute, Object oldValue, Object newValue) {\n\t\tsendAttributeChangedEvent(sourceId, timeId, nodeId, ElementType.NODE,\n\t\t\t\tattribute, AttributeChangeEvent.CHANGE, oldValue, newValue);\n\t}\n\n\t/**\n\t * Send a \"node attribute removed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param nodeId\n\t *            The node identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t */\n\tpublic void sendNodeAttributeRemoved(String sourceId, String nodeId,\n\t\t\tString attribute) {\n\t\tsendAttributeChangedEvent(sourceId, nodeId, ElementType.NODE,\n\t\t\t\tattribute, AttributeChangeEvent.REMOVE, null, null);\n\t}\n\n\t/**\n\t * Send a \"node attribute removed\" event to all attribute sinks.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param timeId\n\t * @param nodeId\n\t *            The node identifier.\n\t * @param attribute\n\t *            The attribute name.\n\t */\n\tpublic void sendNodeAttributeRemoved(String sourceId, long timeId,\n\t\t\tString nodeId, String attribute) {\n\t\tsendAttributeChangedEvent(sourceId, timeId, nodeId, ElementType.NODE,\n\t\t\t\tattribute, AttributeChangeEvent.REMOVE, null, null);\n\t}\n\n\t/**\n\t * Send a add/change/remove attribute event on an element. This method is a\n\t * generic way of notifying of an attribute change and is equivalent to\n\t * individual send*Attribute*() methods.\n\t * \n\t * @param sourceId\n\t *            The source identifier.\n\t * @param eltId\n\t *            The changed element identifier.\n\t * @param eltType\n\t *            The changed element type.\n\t * @param attribute\n\t *            The changed attribute.\n\t * @param event\n\t *            The add/change/remove action.\n\t * @param oldValue\n\t *            The old attribute value (null if the attribute is removed or\n\t *            added).\n\t * @param newValue\n\t *            The new attribute value (null if removed).\n\t */\n\tpublic void sendAttributeChangedEvent(String sourceId, String eltId,\n\t\t\tElementType eltType, String attribute, AttributeChangeEvent event,\n\t\t\tObject oldValue, Object newValue) {\n\t\tsendAttributeChangedEvent(sourceId, sourceTime.newEvent(), eltId,\n\t\t\t\teltType, attribute, event, oldValue, newValue);\n\t}\n\n\tpublic void sendAttributeChangedEvent(String sourceId, long timeId,\n\t\t\tString eltId, ElementType eltType, String attribute,\n\t\t\tAttributeChangeEvent event, Object oldValue, Object newValue) {\n\t\tif (!eventProcessing) {\n\t\t\teventProcessing = true;\n\t\t\tmanageEvents();\n\n\t\t\tif (event == AttributeChangeEvent.ADD) {\n\t\t\t\tif (eltType == ElementType.NODE) {\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).nodeAttributeAdded(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute, newValue);\n\t\t\t\t} else if (eltType == ElementType.EDGE) {\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).edgeAttributeAdded(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute, newValue);\n\t\t\t\t} else {\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).graphAttributeAdded(sourceId, timeId,\n\t\t\t\t\t\t\t\tattribute, newValue);\n\t\t\t\t}\n\t\t\t} else if (event == AttributeChangeEvent.REMOVE) {\n\t\t\t\tif (eltType == ElementType.NODE) {\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).nodeAttributeRemoved(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute);\n\t\t\t\t} else if (eltType == ElementType.EDGE) {\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).edgeAttributeRemoved(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute);\n\t\t\t\t} else {\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).graphAttributeRemoved(sourceId,\n\t\t\t\t\t\t\t\ttimeId, attribute);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (eltType == ElementType.NODE) {\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).nodeAttributeChanged(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute, oldValue, newValue);\n\t\t\t\t} else if (eltType == ElementType.EDGE) {\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).edgeAttributeChanged(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute, oldValue, newValue);\n\t\t\t\t} else {\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).graphAttributeChanged(sourceId,\n\t\t\t\t\t\t\t\ttimeId, attribute, oldValue, newValue);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmanageEvents();\n\t\t\teventProcessing = false;\n\t\t} else {\n\t\t\teventQueue.add(new AttributeChangedEvent(sourceId, timeId, eltId,\n\t\t\t\t\teltType, attribute, event, oldValue, newValue));\n\t\t}\n\t}\n\n\t// Deferred event management\n\n\t/**\n\t * If in \"event processing mode\", ensure all pending events are processed.\n\t */\n\tprotected void manageEvents() {\n\t\tif (eventProcessing) {\n\t\t\twhile (!eventQueue.isEmpty())\n\t\t\t\teventQueue.remove().trigger();\n\t\t}\n\t}\n\n\t// Events Management\n\n\t/**\n\t * Interface that provide general purpose classification for evens involved\n\t * in graph modifications\n\t */\n\tabstract class GraphEvent {\n\t\tString sourceId;\n\t\tlong timeId;\n\n\t\tGraphEvent(String sourceId, long timeId) {\n\t\t\tthis.sourceId = sourceId;\n\t\t\tthis.timeId = timeId;\n\t\t}\n\n\t\tabstract void trigger();\n\t}\n\n\tclass AfterEdgeAddEvent extends GraphEvent {\n\t\tString edgeId;\n\t\tString fromNodeId;\n\t\tString toNodeId;\n\t\tboolean directed;\n\n\t\tAfterEdgeAddEvent(String sourceId, long timeId, String edgeId,\n\t\t\t\tString fromNodeId, String toNodeId, boolean directed) {\n\t\t\tsuper(sourceId, timeId);\n\t\t\tthis.edgeId = edgeId;\n\t\t\tthis.fromNodeId = fromNodeId;\n\t\t\tthis.toNodeId = toNodeId;\n\t\t\tthis.directed = directed;\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).edgeAdded(sourceId, timeId, edgeId,\n\t\t\t\t\t\tfromNodeId, toNodeId, directed);\n\t\t}\n\t}\n\n\tclass BeforeEdgeRemoveEvent extends GraphEvent {\n\t\tString edgeId;\n\n\t\tBeforeEdgeRemoveEvent(String sourceId, long timeId, String edgeId) {\n\t\t\tsuper(sourceId, timeId);\n\t\t\tthis.edgeId = edgeId;\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).edgeRemoved(sourceId, timeId, edgeId);\n\t\t}\n\t}\n\n\tclass AfterNodeAddEvent extends GraphEvent {\n\t\tString nodeId;\n\n\t\tAfterNodeAddEvent(String sourceId, long timeId, String nodeId) {\n\t\t\tsuper(sourceId, timeId);\n\t\t\tthis.nodeId = nodeId;\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).nodeAdded(sourceId, timeId, nodeId);\n\t\t}\n\t}\n\n\tclass BeforeNodeRemoveEvent extends GraphEvent {\n\t\tString nodeId;\n\n\t\tBeforeNodeRemoveEvent(String sourceId, long timeId, String nodeId) {\n\t\t\tsuper(sourceId, timeId);\n\t\t\tthis.nodeId = nodeId;\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).nodeRemoved(sourceId, timeId, nodeId);\n\t\t}\n\t}\n\n\tclass BeforeGraphClearEvent extends GraphEvent {\n\t\tBeforeGraphClearEvent(String sourceId, long timeId) {\n\t\t\tsuper(sourceId, timeId);\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).graphCleared(sourceId, timeId);\n\t\t}\n\t}\n\n\tclass StepBeginsEvent extends GraphEvent {\n\t\tdouble step;\n\n\t\tStepBeginsEvent(String sourceId, long timeId, double step) {\n\t\t\tsuper(sourceId, timeId);\n\t\t\tthis.step = step;\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tfor (int i = 0; i < eltsSinks.size(); i++)\n\t\t\t\teltsSinks.get(i).stepBegins(sourceId, timeId, step);\n\t\t}\n\t}\n\n\tclass AttributeChangedEvent extends GraphEvent {\n\t\tElementType eltType;\n\n\t\tString eltId;\n\n\t\tString attribute;\n\n\t\tAttributeChangeEvent event;\n\n\t\tObject oldValue;\n\n\t\tObject newValue;\n\n\t\tAttributeChangedEvent(String sourceId, long timeId, String eltId,\n\t\t\t\tElementType eltType, String attribute,\n\t\t\t\tAttributeChangeEvent event, Object oldValue, Object newValue) {\n\t\t\tsuper(sourceId, timeId);\n\t\t\tthis.eltType = eltType;\n\t\t\tthis.eltId = eltId;\n\t\t\tthis.attribute = attribute;\n\t\t\tthis.event = event;\n\t\t\tthis.oldValue = oldValue;\n\t\t\tthis.newValue = newValue;\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tswitch (event) {\n\t\t\tcase ADD:\n\t\t\t\tswitch (eltType) {\n\t\t\t\tcase NODE:\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).nodeAttributeAdded(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute, newValue);\n\t\t\t\t\tbreak;\n\t\t\t\tcase EDGE:\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).edgeAttributeAdded(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute, newValue);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).graphAttributeAdded(sourceId, timeId,\n\t\t\t\t\t\t\t\tattribute, newValue);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase REMOVE:\n\t\t\t\tswitch (eltType) {\n\t\t\t\tcase NODE:\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).nodeAttributeRemoved(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute);\n\t\t\t\t\tbreak;\n\t\t\t\tcase EDGE:\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).edgeAttributeRemoved(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).graphAttributeRemoved(sourceId,\n\t\t\t\t\t\t\t\ttimeId, attribute);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tswitch (eltType) {\n\t\t\t\tcase NODE:\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).nodeAttributeChanged(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute, oldValue, newValue);\n\t\t\t\t\tbreak;\n\t\t\t\tcase EDGE:\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).edgeAttributeChanged(sourceId, timeId,\n\t\t\t\t\t\t\t\teltId, attribute, oldValue, newValue);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tfor (int i = 0; i < attrSinks.size(); i++)\n\t\t\t\t\t\tattrSinks.get(i).graphAttributeChanged(sourceId,\n\t\t\t\t\t\t\t\ttimeId, attribute, oldValue, newValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tclass AddToListEvent<T> extends GraphEvent {\n\t\tList<T> l;\n\t\tT obj;\n\n\t\tAddToListEvent(List<T> l, T obj) {\n\t\t\tsuper(null, -1);\n\t\t\tthis.l = l;\n\t\t\tthis.obj = obj;\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tl.add(obj);\n\t\t}\n\t}\n\n\tclass RemoveFromListEvent<T> extends GraphEvent {\n\t\tList<T> l;\n\t\tT obj;\n\n\t\tRemoveFromListEvent(List<T> l, T obj) {\n\t\t\tsuper(null, -1);\n\t\t\tthis.l = l;\n\t\t\tthis.obj = obj;\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tl.remove(obj);\n\t\t}\n\t}\n\n\tclass ClearListEvent<T> extends GraphEvent {\n\t\tList<T> l;\n\n\t\tClearListEvent(List<T> l) {\n\t\t\tsuper(null, -1);\n\t\t\tthis.l = l;\n\t\t}\n\n\t\tvoid trigger() {\n\t\t\tl.clear();\n\t\t}\n\t}\n}",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "DefaultCamera", "org.graphstream.ui.swingViewer.util" ], [ "GradientFactory", "org.graphstream.ui.swingViewer.util" ], [ "GraphMetrics", "org.graphstream.ui.swingViewer.util" ], [ "Graphics2DOutput", "org.graphstream.ui.swingViewer.util" ], [ "ImageCache", "org.graphstream.ui.swingViewer.util" ], [ "StrokeFactory", "org.graphstream.ui.swingViewer.util" ], [ "FontCache", "org.graphstream.ui.swingViewer.util" ], [ "FontSlot", "org.graphstream.ui.swingViewer.util" ], [ "DefaultView", "org.graphstream.ui.swingViewer" ], [ "SpriteRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "ElementRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "NodeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "Arrow", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "Shape", "org.graphstream.ui.swingViewer.basicRenderer.shapes" ], [ "EdgeRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "SwingBasicGraphRenderer", "org.graphstream.ui.swingViewer.basicRenderer" ], [ "GraphRendererBase", "org.graphstream.ui.swingViewer" ], [ "GraphRenderer", "org.graphstream.ui.swingViewer" ], [ "LayerRenderer", "org.graphstream.ui.swingViewer" ], [ "ViewPanel", "org.graphstream.ui.swingViewer" ], [ "Layouts", "org.graphstream.ui.layout" ], [ "Layout", "org.graphstream.ui.layout" ], [ "LayoutRunner", "org.graphstream.ui.layout" ], [ "NodeParticle", "org.graphstream.ui.layout.springbox" ], [ "GraphCellData", "org.graphstream.ui.layout.springbox" ], [ "EdgeSpring", "org.graphstream.ui.layout.springbox" ], [ "Energies", "org.graphstream.ui.layout.springbox" ], [ "BarnesHutLayout", "org.graphstream.ui.layout.springbox" ], [ "LinLog", "org.graphstream.ui.layout.springbox.implementations" ], [ "LinLogNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBoxNodeParticle", "org.graphstream.ui.layout.springbox.implementations" ], [ "SpringBox", "org.graphstream.ui.layout.springbox.implementations" ], [ "Point2", "org.graphstream.ui.geom" ], [ "Vector2", "org.graphstream.ui.geom" ], [ "Vector3", "org.graphstream.ui.geom" ], [ "Point3", "org.graphstream.ui.geom" ], [ "ViewerListener", "org.graphstream.ui.view" ], [ "MouseManager", "org.graphstream.ui.view.util" ], [ "ShortcutManager", "org.graphstream.ui.view.util" ], [ "DefaultShortcutManager", "org.graphstream.ui.view.util" ], [ "FpsCounter", "org.graphstream.ui.view.util" ], [ "CubicCurve", "org.graphstream.ui.view.util" ], [ "DefaultMouseManager", "org.graphstream.ui.view.util" ], [ "Selection", "org.graphstream.ui.view" ], [ "ViewerPipe", "org.graphstream.ui.view" ], [ "Viewer", "org.graphstream.ui.view" ], [ "View", "org.graphstream.ui.view" ], [ "Camera", "org.graphstream.ui.view" ], [ "Sprite", "org.graphstream.ui.spriteManager" ], [ "InvalidSpriteIDException", "org.graphstream.ui.spriteManager" ], [ "SpriteManager", "org.graphstream.ui.spriteManager" ], [ "SpriteFactory", "org.graphstream.ui.spriteManager" ], [ "StyleGroupListener", "org.graphstream.ui.graphicGraph" ], [ "Colors", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Values", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetListener", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheetParserTokenManager", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParserConstants", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "StyleSheetParser", "org.graphstream.ui.graphicGraph.stylesheet.parser" ], [ "Style", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleSheet", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "StyleConstants", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Selector", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Value", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "Rule", "org.graphstream.ui.graphicGraph.stylesheet" ], [ "GraphicNode", "org.graphstream.ui.graphicGraph" ], [ "StyleGroup", "org.graphstream.ui.graphicGraph" ], [ "GraphPosLengthUtils", "org.graphstream.ui.graphicGraph" ], [ "GraphicEdge", "org.graphstream.ui.graphicGraph" ], [ "GraphicElementChangeListener", "org.graphstream.ui.graphicGraph" ], [ "GraphicGraph", "org.graphstream.ui.graphicGraph" ], [ "StyleGroupSet", "org.graphstream.ui.graphicGraph" ], [ "GraphicSprite", "org.graphstream.ui.graphicGraph" ], [ "GraphicElement", "org.graphstream.ui.graphicGraph" ], [ "VerboseSink", "org.graphstream.util" ], [ "GraphListeners", "org.graphstream.util" ], [ "Environment", "org.graphstream.util" ], [ "GraphDiff", "org.graphstream.util" ], [ "Filters", "org.graphstream.util" ], [ "FilteredEdgeIterator", "org.graphstream.util" ], [ "Parser", "org.graphstream.util.parser" ], [ "ParserFactory", "org.graphstream.util.parser" ], [ "TokenMgrError", "org.graphstream.util.parser" ], [ "ParseException", "org.graphstream.util.parser" ], [ "SimpleCharStream", "org.graphstream.util.parser" ], [ "Token", "org.graphstream.util.parser" ], [ "ISODateIO", "org.graphstream.util.time" ], [ "ISODateComponent", "org.graphstream.util.time" ], [ "FilteredNodeIterator", "org.graphstream.util" ], [ "FixedArrayList", "org.graphstream.util.set" ], [ "StepCounter", "org.graphstream.util" ], [ "GraphSpells", "org.graphstream.util.cumulative" ], [ "CumulativeAttributes", "org.graphstream.util.cumulative" ], [ "CumulativeSpells", "org.graphstream.util.cumulative" ], [ "Filter", "org.graphstream.util" ], [ "PipeAdapter", "org.graphstream.stream" ], [ "GraphParseException", "org.graphstream.stream" ], [ "ElementSink", "org.graphstream.stream" ], [ "URLSource", "org.graphstream.stream.net" ], [ "HTTPSource", "org.graphstream.stream.net" ], [ "SourceAdapter", "org.graphstream.stream" ], [ "AttributeSink", "org.graphstream.stream" ], [ "GMLParserConstants", "org.graphstream.stream.file.gml" ], [ "GMLParserTokenManager", "org.graphstream.stream.file.gml" ], [ "GMLContext", "org.graphstream.stream.file.gml" ], [ "Graphics", "org.graphstream.stream.file.gml" ], [ "KeyValues", "org.graphstream.stream.file.gml" ], [ "GMLParser", "org.graphstream.stream.file.gml" ], [ "FileSinkGraphML", "org.graphstream.stream.file" ], [ "TLPParserConstants", "org.graphstream.stream.file.tlp" ], [ "TLPParser", "org.graphstream.stream.file.tlp" ], [ "TLPParserTokenManager", "org.graphstream.stream.file.tlp" ], [ "FileSinkFactory", "org.graphstream.stream.file" ], [ "FileSourceEdge", "org.graphstream.stream.file" ], [ "FileSinkBase", "org.graphstream.stream.file" ], [ "FileSinkTikZ", "org.graphstream.stream.file" ], [ "FileSourceGEXF", "org.graphstream.stream.file" ], [ "DOTParser", "org.graphstream.stream.file.dot" ], [ "DOTParserConstants", "org.graphstream.stream.file.dot" ], [ "DOTParserTokenManager", "org.graphstream.stream.file.dot" ], [ "FileSink", "org.graphstream.stream.file" ], [ "PajekContext", "org.graphstream.stream.file.pajek" ], [ "Graphics", "org.graphstream.stream.file.pajek" ], [ "NodeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeGraphics", "org.graphstream.stream.file.pajek" ], [ "EdgeMatrix", "org.graphstream.stream.file.pajek" ], [ "PajekParserTokenManager", "org.graphstream.stream.file.pajek" ], [ "PajekParserConstants", "org.graphstream.stream.file.pajek" ], [ "FileSourceXML", "org.graphstream.stream.file" ], [ "FileSinkBaseFiltered", "org.graphstream.stream.file" ], [ "FileSinkDOT", "org.graphstream.stream.file" ], [ "FileSourceParser", "org.graphstream.stream.file" ], [ "FileSinkDGSFiltered", "org.graphstream.stream.file" ], [ "FileSourceDOT", "org.graphstream.stream.file" ], [ "FileSourceDGS1And2", "org.graphstream.stream.file" ], [ "FileSourceGraphML", "org.graphstream.stream.file" ], [ "FileSourceFactory", "org.graphstream.stream.file" ], [ "FileSinkImages", "org.graphstream.stream.file" ], [ "FileSinkDynamicGML", "org.graphstream.stream.file" ], [ "FileSinkSVG", "org.graphstream.stream.file" ], [ "GEXFSpell", "org.graphstream.stream.file.gexf" ], [ "SmartXMLWriter", "org.graphstream.stream.file.gexf" ], [ "GEXFElement", "org.graphstream.stream.file.gexf" ], [ "GEXFEdges", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValues", "org.graphstream.stream.file.gexf" ], [ "GEXFEdge", "org.graphstream.stream.file.gexf" ], [ "GEXFSpells", "org.graphstream.stream.file.gexf" ], [ "GEXFAttValue", "org.graphstream.stream.file.gexf" ], [ "GEXFNodes", "org.graphstream.stream.file.gexf" ], [ "GEXFNode", "org.graphstream.stream.file.gexf" ], [ "GEXFMeta", "org.graphstream.stream.file.gexf" ], [ "GEXFAttributes", "org.graphstream.stream.file.gexf" ], [ "GEXF", "org.graphstream.stream.file.gexf" ], [ "GEXFGraph", "org.graphstream.stream.file.gexf" ], [ "GEXFAttribute", "org.graphstream.stream.file.gexf" ], [ "OldFileSourceDGS", "org.graphstream.stream.file.dgs" ], [ "DGSParser", "org.graphstream.stream.file.dgs" ], [ "FileSourceBase", "org.graphstream.stream.file" ], [ "FileSinkGML", "org.graphstream.stream.file" ], [ "FileSourceDGS", "org.graphstream.stream.file" ], [ "FileSinkDGSUtility", "org.graphstream.stream.file" ], [ "FileSourceTLP", "org.graphstream.stream.file" ], [ "FileSinkSVG2", "org.graphstream.stream.file" ], [ "FileSource", "org.graphstream.stream.file" ], [ "FileSourceNCol", "org.graphstream.stream.file" ], [ "FileSourcePajek", "org.graphstream.stream.file" ], [ "FileSourceGPX", "org.graphstream.stream.file" ], [ "FileSourceLGL", "org.graphstream.stream.file" ], [ "FileSinkGEXF2", "org.graphstream.stream.file" ], [ "FileSourceGML", "org.graphstream.stream.file" ], [ "FileSinkGEXF", "org.graphstream.stream.file" ], [ "FileSinkDGS", "org.graphstream.stream.file" ], [ "ProxyPipe", "org.graphstream.stream" ], [ "Sink", "org.graphstream.stream" ], [ "Timeline", "org.graphstream.stream" ], [ "Pipe", "org.graphstream.stream" ], [ "SinkAdapter", "org.graphstream.stream" ], [ "Replayable", "org.graphstream.stream" ], [ "Source", "org.graphstream.stream" ], [ "AnnotatedSink", "org.graphstream.stream" ], [ "GraphReplay", "org.graphstream.stream" ], [ "AttributePipe", "org.graphstream.stream" ], [ "SinkTime", "org.graphstream.stream.sync" ], [ "SourceTime", "org.graphstream.stream.sync" ], [ "PipeBase", "org.graphstream.stream" ], [ "ThreadProxyPipe", "org.graphstream.stream.thread" ], [ "ThreadProxyPipeOld", "org.graphstream.stream.thread" ], [ "RMISource", "org.graphstream.stream.rmi" ], [ "RMIAdapterOut", "org.graphstream.stream.rmi" ], [ "RMISink", "org.graphstream.stream.rmi" ], [ "RMIAdapterIn", "org.graphstream.stream.rmi" ], [ "SourceBase", "org.graphstream.stream" ], [ "NetStreamDecoder", "org.graphstream.stream.netstream" ], [ "NetStreamReceiver", "org.graphstream.stream.netstream" ], [ "NetStreamConstants", "org.graphstream.stream.netstream" ], [ "NetStreamSender", "org.graphstream.stream.netstream" ], [ "DefaultNetStreamDecoder", "org.graphstream.stream.netstream" ], [ "Base64", "org.graphstream.stream.netstream.packing" ], [ "NetStreamUnpacker", "org.graphstream.stream.netstream.packing" ], [ "Base64Packer", "org.graphstream.stream.netstream.packing" ], [ "Base64Unpacker", "org.graphstream.stream.netstream.packing" ], [ "NetStreamPacker", "org.graphstream.stream.netstream.packing" ], [ "AttributePredicate", "org.graphstream.stream" ], [ "Element", "org.graphstream.graph" ], [ "Node", "org.graphstream.graph" ], [ "BreadthFirstIterator", "org.graphstream.graph" ], [ "Graph", "org.graphstream.graph" ], [ "EdgeRejectedException", "org.graphstream.graph" ], [ "CompoundAttribute", "org.graphstream.graph" ], [ "Structure", "org.graphstream.graph" ], [ "DepthFirstIterator", "org.graphstream.graph" ], [ "NullAttributeException", "org.graphstream.graph" ], [ "IdAlreadyInUseException", "org.graphstream.graph" ], [ "EdgeFactory", "org.graphstream.graph" ], [ "ElementNotFoundException", "org.graphstream.graph" ], [ "OneAttributeElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListNode", "org.graphstream.graph.implementations" ], [ "SingleNode", "org.graphstream.graph.implementations" ], [ "AbstractElement", "org.graphstream.graph.implementations" ], [ "AdjacencyListGraph", "org.graphstream.graph.implementations" ], [ "AbstractNode", "org.graphstream.graph.implementations" ], [ "DefaultGraph", "org.graphstream.graph.implementations" ], [ "MultiGraph", "org.graphstream.graph.implementations" ], [ "Graphs", "org.graphstream.graph.implementations" ], [ "SingleGraph", "org.graphstream.graph.implementations" ], [ "MultiNode", "org.graphstream.graph.implementations" ], [ "AbstractGraph", "org.graphstream.graph.implementations" ], [ "AbstractEdge", "org.graphstream.graph.implementations" ], [ "GraphFactory", "org.graphstream.graph" ], [ "NodeFactory", "org.graphstream.graph" ], [ "Edge", "org.graphstream.graph" ], [ "Path", "org.graphstream.graph" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "gradientInArea", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)" ], [ "linearGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)" ], [ "radialGradientFromStyle", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)" ], [ "createFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static float[] createFractions(Style style)" ], [ "createColors", "org.graphstream.ui.swingViewer.util", "GradientFactory", "protected static Color[] createColors(Style style)" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "public static ImageCache defaultImageCache()" ], [ "generateStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "public static Stroke generateStroke(Style style, GraphMetrics metrics)" ], [ "generatePlainStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)" ], [ "generateDotsStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)" ], [ "generateDashesStroke", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache()" ], [ "newLayoutAlgorithm", "org.graphstream.ui.layout", "Layouts", "public static Layout newLayoutAlgorithm()" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static double eval(double x0, double x1, double x2, double x3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "eval", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static double derivative(double x0, double x1, double x2, double x3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)" ], [ "derivative", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)" ], [ "perpendicular", "org.graphstream.ui.view.util", "CubicCurve", "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)" ], [ "newGraphRenderer", "org.graphstream.ui.view", "Viewer", "public static GraphRenderer newGraphRenderer()" ], [ "getPositionValue", "org.graphstream.ui.spriteManager", "SpriteManager", "protected static Values getPositionValue(Object value)" ], [ "convertColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Color convertColor(Object anyValue)" ], [ "convertLabel", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static String convertLabel(Object value)" ], [ "convertWidth", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static float convertWidth(Object value)" ], [ "convertValue", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "public static Value convertValue(Object value)" ], [ "convertUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Units convertUnit(String unit)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Graph graph, String id)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Graph graph, String id)" ], [ "nodePosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double[] nodePosition(Node node)" ], [ "nodePointPosition", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static Point3 nodePointPosition(Node node)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Graph graph, String id)" ], [ "edgeLength", "org.graphstream.ui.graphicGraph", "GraphPosLengthUtils", "public static double edgeLength(Edge edge)" ], [ "getGlobalEnvironment", "org.graphstream.util", "Environment", "public static Environment getGlobalEnvironment()" ], [ "falseFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> falseFilter()" ], [ "trueFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> trueFilter()" ], [ "byAttributeFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)" ], [ "separateNodeAndEdgeFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)" ], [ "byExtremitiesFilter", "org.graphstream.util", "Filters", "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)" ], [ "byIdFilter", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> byIdFilter(String idPattern)" ], [ "isContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)" ], [ "isIdContained", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)" ], [ "and", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)" ], [ "or", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)" ], [ "xor", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)" ], [ "not", "org.graphstream.util", "Filters", "public static <T extends Element> Filter<T> not(Filter<T> f)" ], [ "addEscapes", "org.graphstream.util.parser", "TokenMgrError", "protected static final String addEscapes(String str)" ], [ "LexicalError", "org.graphstream.util.parser", "TokenMgrError", "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)" ], [ "add_escapes", "org.graphstream.util.parser", "ParseException", "static String add_escapes(String str)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind, String image)" ], [ "newToken", "org.graphstream.util.parser", "Token", "public static Token newToken(int ofKind)" ], [ "countStepInFile", "org.graphstream.util", "StepCounter", "public static int countStepInFile(String path) throws IOException" ], [ "GET", "org.graphstream.stream.net", "HTTPSource", "protected static HashMap<String, Object> GET(HttpExchange ex)" ], [ "sinkFor", "org.graphstream.stream.file", "FileSinkFactory", "public static FileSink sinkFor(String filename)" ], [ "formatId", "org.graphstream.stream.file", "FileSinkTikZ", "protected static String formatId(String id)" ], [ "getInt", "org.graphstream.stream.file.pajek", "PajekContext", "protected static int getInt(Token nb) throws ParseException" ], [ "getReal", "org.graphstream.stream.file.pajek", "PajekContext", "protected static double getReal(Token nb) throws ParseException" ], [ "toColorValue", "org.graphstream.stream.file.pajek", "PajekContext", "public static String toColorValue(Token R, Token G, Token B) throws ParseException" ], [ "sourceFor", "org.graphstream.stream.file", "FileSourceFactory", "public static FileSource sourceFor(String fileName) throws IOException" ], [ "getXMLRootElement", "org.graphstream.stream.file", "FileSourceFactory", "public static String getXMLRootElement(String fileName) throws IOException" ], [ "formatStringForQuoting", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String formatStringForQuoting(String str)" ], [ "attributeString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String attributeString(String key, Object value, boolean remove)" ], [ "arrayString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String arrayString(Object value)" ], [ "valueString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String valueString(Object value)" ], [ "hashToString", "org.graphstream.stream.file", "FileSinkDGSUtility", "protected static String hashToString(HashMap<?, ?> hash)" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException" ], [ "encodeObject", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int options) throws java.io.IOException" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len)" ], [ "encodeBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source)" ], [ "encodeBytesToBytes", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s) throws java.io.IOException" ], [ "decode", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decode(String s, int options) throws java.io.IOException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeToObject", "org.graphstream.stream.netstream.packing", "Base64", "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException" ], [ "decodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static byte[] decodeFromFile(String filename) throws java.io.IOException" ], [ "encodeFromFile", "org.graphstream.stream.netstream.packing", "Base64", "public static String encodeFromFile(String filename) throws java.io.IOException" ], [ "unmutableGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph unmutableGraph(Graph g)" ], [ "synchronizedGraph", "org.graphstream.graph.implementations", "Graphs", "public static Graph synchronizedGraph(Graph g)" ], [ "merge", "org.graphstream.graph.implementations", "Graphs", "public static Graph merge(Graph... graphs)" ], [ "clone", "org.graphstream.graph.implementations", "Graphs", "public static Graph clone(Graph g)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "version16", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static boolean version16 = false;" ], [ "predefFractions", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[][] predefFractions = new float[11][];" ], [ "predefFractions2", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions2 = { 0f, 1f };" ], [ "predefFractions3", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions3 = { 0f, 0.5f, 1f };" ], [ "predefFractions4", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };" ], [ "predefFractions5", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };" ], [ "predefFractions6", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };" ], [ "predefFractions7", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };" ], [ "predefFractions8", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };" ], [ "predefFractions9", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };" ], [ "predefFractions10", "org.graphstream.ui.swingViewer.util", "GradientFactory", "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };" ], [ "defaultImageCache", "org.graphstream.ui.swingViewer.util", "ImageCache", "protected static ImageCache defaultImageCache;" ], [ "dots", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dots = { 1f, 1f };" ], [ "dashes", "org.graphstream.ui.swingViewer.util", "StrokeFactory", "protected static float[] dashes = { 3f, 3f };" ], [ "defaultFontCache", "org.graphstream.ui.swingViewer.util", "FontCache", "public static FontCache defaultFontCache;" ], [ "NULL_POINT2", "org.graphstream.ui.geom", "Point2", "public static final Point2 NULL_POINT2 = new Point2(0, 0);" ], [ "NULL_POINT3", "org.graphstream.ui.geom", "Point3", "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);" ], [ "DEFAULT_VIEW_ID", "org.graphstream.ui.view", "Viewer", "public static String DEFAULT_VIEW_ID = \"defaultView\";" ], [ "jjbitVec0", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };" ], [ "jjstrLiteralImages", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };" ], [ "lexStateNames", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };" ], [ "jjtoSkip", "org.graphstream.ui.graphicGraph.stylesheet.parser", "StyleSheetParserTokenManager", "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };" ], [ "colorMap", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static HashMap<String,Color> colorMap;" ], [ "sharpColor1", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor1;" ], [ "sharpColor2", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern sharpColor2;" ], [ "cssColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColor;" ], [ "cssColorA", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern cssColorA;" ], [ "awtColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern awtColor;" ], [ "hexaColor", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern hexaColor;" ], [ "numberUnit", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern numberUnit;" ], [ "number", "org.graphstream.ui.graphicGraph.stylesheet", "StyleConstants", "protected static Pattern number;" ], [ "acceptedAttribute", "org.graphstream.ui.graphicGraph", "GraphicElement", "protected static Pattern acceptedAttribute;" ], [ "DEFAULT_AN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_CNA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CNR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DN_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";" ], [ "DEFAULT_AE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";" ], [ "DEFAULT_CEA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CEC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CER_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_DE_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";" ], [ "DEFAULT_CGA_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGC_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";" ], [ "DEFAULT_CGR_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";" ], [ "DEFAULT_CL_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";" ], [ "DEFAULT_ST_FORMAT", "org.graphstream.util", "VerboseSink", "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";" ], [ "GLOBAL_ENV", "org.graphstream.util", "Environment", "public static Environment GLOBAL_ENV;" ], [ "LEXICAL_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int LEXICAL_ERROR = 0;" ], [ "STATIC_LEXER_ERROR", "org.graphstream.util.parser", "TokenMgrError", "public static final int STATIC_LEXER_ERROR = 1;" ], [ "INVALID_LEXICAL_STATE", "org.graphstream.util.parser", "TokenMgrError", "public static final int INVALID_LEXICAL_STATE = 2;" ], [ "LOOP_DETECTED", "org.graphstream.util.parser", "TokenMgrError", "public static final int LOOP_DETECTED = 3;" ], [ "staticFlag", "org.graphstream.util.parser", "SimpleCharStream", "public static final boolean staticFlag = false;" ], [ "ABBREVIATED_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");" ], [ "FULL_WEEKDAY_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");" ], [ "ABBREVIATED_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");" ], [ "FULL_MONTH_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");" ], [ "LOCALE_DATE_AND_TIME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);" ], [ "CENTURY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");" ], [ "DAY_OF_MONTH_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");" ], [ "DATE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");" ], [ "DAY_OF_MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");" ], [ "DATE_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");" ], [ "WEEK_BASED_YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "WEEK_BASED_YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "ABBREVIATED_MONTH_NAME_ALIAS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");" ], [ "HOUR_OF_DAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");" ], [ "HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");" ], [ "DAY_OF_YEAR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");" ], [ "MILLISECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");" ], [ "EPOCH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent EPOCH = new EpochComponent();" ], [ "MONTH", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");" ], [ "MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");" ], [ "NEW_LINE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");" ], [ "AM_PM", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent AM_PM = new AMPMComponent();" ], [ "LOCALE_CLOCK_TIME_12_HOUR", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");" ], [ "HOUR_AND_MINUTE", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");" ], [ "SECOND", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");" ], [ "TABULATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");" ], [ "TIME_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");" ], [ "DAY_OF_WEEK_1_7", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");" ], [ "WEEK_OF_YEAR_FROM_SUNDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");" ], [ "WEEK_NUMBER_ISO8601", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");" ], [ "DAY_OF_WEEK_0_6", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");" ], [ "WEEK_OF_YEAR_FROM_MONDAY", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");" ], [ "LOCALE_DATE_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");" ], [ "LOCALE_TIME_REPRESENTATION", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");" ], [ "YEAR_2_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");" ], [ "YEAR_4_DIGITS", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");" ], [ "UTC_OFFSET", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();" ], [ "LOCALE_TIME_ZONE_NAME", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");" ], [ "PERCENT", "org.graphstream.util.time", "ISODateComponent", "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");" ], [ "jjbitVec0", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoToken = { 0xff01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.gml", "GMLParserTokenManager", "static final long[] jjtoSkip = { 0x1eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoToken = { 0xffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.tlp", "TLPParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "XYZ_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String XYZ_ATTR = \"xyz\";" ], [ "WIDTH_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String WIDTH_ATTR = \"ui.tikz.width\";" ], [ "HEIGHT_ATTR", "org.graphstream.stream.file", "FileSinkTikZ", "public static final String HEIGHT_ATTR = \"ui.tikz.height\";" ], [ "DEFAULT_WIDTH", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_WIDTH = 10;" ], [ "DEFAULT_HEIGHT", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DEFAULT_HEIGHT = 10;" ], [ "DISPLAY_MIN_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;" ], [ "DISPLAY_MAX_SIZE_IN_MM", "org.graphstream.stream.file", "FileSinkTikZ", "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;" ], [ "jjbitVec0", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };" ], [ "lexStateNames", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoToken = { 0x3ffffffc01L };" ], [ "jjtoSkip", "org.graphstream.stream.file.dot", "DOTParserTokenManager", "static final long[] jjtoSkip = { 0x7eL };" ], [ "jjbitVec0", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };" ], [ "jjnextStates", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };" ], [ "jjstrLiteralImages", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };" ], [ "lexStateNames", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "public static final String[] lexStateNames = { \"DEFAULT\" };" ], [ "jjtoToken", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoToken = { 0x3fffffffffffc9L };" ], [ "jjtoSkip", "org.graphstream.stream.file.pajek", "PajekParserTokenManager", "static final long[] jjtoSkip = { 0x6L };" ], [ "XMLNS", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";" ], [ "XMLNS_XSI", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";" ], [ "XMLNS_SL", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";" ], [ "XMLNS_VIZ", "org.graphstream.stream.file.gexf", "GEXF", "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";" ], [ "VERSION", "org.graphstream.stream.file.gexf", "GEXF", "public static final String VERSION = \"1.2\";" ], [ "BUFFER_SIZE", "org.graphstream.stream.file.dgs", "DGSParser", "protected static final int BUFFER_SIZE = 4096;" ], [ "ARRAY_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_OPEN = '{';" ], [ "ARRAY_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int ARRAY_CLOSE = '}';" ], [ "MAP_OPEN", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_OPEN = '[';" ], [ "MAP_CLOSE", "org.graphstream.stream.file.dgs", "DGSParser", "public static final int MAP_CLOSE = ']';" ], [ "gradientId", "org.graphstream.stream.file", "FileSinkSVG2", "static int gradientId = 0;" ], [ "gradientId", "org.graphstream.stream.file", "SVGStyle", "static int gradientId = 0;" ], [ "TIME_PREFIX", "org.graphstream.stream", "Timeline", "public static final String TIME_PREFIX = \"time\";" ], [ "SYNC_DISABLE_KEY", "org.graphstream.stream.sync", "SinkTime", "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";" ], [ "disableSync", "org.graphstream.stream.sync", "SinkTime", "protected static final boolean disableSync;" ], [ "LIGHT_YELLOW", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String LIGHT_YELLOW = \"\u001B[33;1m\";" ], [ "RESET", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final String RESET = \"\u001B[0m\";" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "NetStreamReceiver", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "BUFFER_INITIAL_SIZE", "org.graphstream.stream.netstream", "IncomingBuffer", "protected static final int BUFFER_INITIAL_SIZE = 8192;" ], [ "EVENT_GETVERSION", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_GETVERSION = 0x00;" ], [ "EVENT_START", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_START = 0x01;" ], [ "EVENT_END", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_END = 0x02;" ], [ "EVENT_ADD_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE = 0x10;" ], [ "EVENT_DEL_NODE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE = 0x11;" ], [ "EVENT_ADD_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE = 0x12;" ], [ "EVENT_DEL_EDGE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE = 0x13;" ], [ "EVENT_STEP", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_STEP = 0x14;" ], [ "EVENT_CLEARED", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CLEARED = 0x15;" ], [ "EVENT_ADD_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_GRAPH_ATTR = 0x16;" ], [ "EVENT_CHG_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_GRAPH_ATTR = 0x17;" ], [ "EVENT_DEL_GRAPH_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_GRAPH_ATTR = 0x18;" ], [ "EVENT_ADD_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_NODE_ATTR = 0x19;" ], [ "EVENT_CHG_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_NODE_ATTR = 0x1a;" ], [ "EVENT_DEL_NODE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_NODE_ATTR = 0x1b;" ], [ "EVENT_ADD_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_ADD_EDGE_ATTR = 0x1c;" ], [ "EVENT_CHG_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_CHG_EDGE_ATTR = 0x1d;" ], [ "EVENT_DEL_EDGE_ATTR", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int EVENT_DEL_EDGE_ATTR = 0x1e;" ], [ "TYPE_UNKNOWN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_UNKNOWN = 0x00;" ], [ "TYPE_BOOLEAN", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN = 0x50;" ], [ "TYPE_BOOLEAN_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BOOLEAN_ARRAY = 0x51;" ], [ "TYPE_BYTE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE = 0x52;" ], [ "TYPE_BYTE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_BYTE_ARRAY = 0x53;" ], [ "TYPE_SHORT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT = 0x54;" ], [ "TYPE_SHORT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_SHORT_ARRAY = 0x55;" ], [ "TYPE_INT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT = 0x56;" ], [ "TYPE_INT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_INT_ARRAY = 0x57;" ], [ "TYPE_LONG", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG = 0x58;" ], [ "TYPE_LONG_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_LONG_ARRAY = 0x59;" ], [ "TYPE_FLOAT", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT = 0x5a;" ], [ "TYPE_FLOAT_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_FLOAT_ARRAY = 0x5b;" ], [ "TYPE_DOUBLE", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE = 0x5c;" ], [ "TYPE_DOUBLE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_DOUBLE_ARRAY = 0x5d;" ], [ "TYPE_STRING", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_STRING = 0x5e;" ], [ "TYPE_RAW", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_RAW = 0x5f;" ], [ "TYPE_ARRAY", "org.graphstream.stream.netstream", "NetStreamConstants", "public static byte TYPE_ARRAY = 0x60;" ], [ "TYPE_NULL", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int TYPE_NULL = 0x61;" ], [ "COMMAND", "org.graphstream.stream.netstream", "NetStreamConstants", "public static int COMMAND = 0x70;" ], [ "NO_OPTIONS", "org.graphstream.stream.netstream.packing", "Base64", "public final static int NO_OPTIONS = 0;" ], [ "ENCODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ENCODE = 1;" ], [ "DECODE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DECODE = 0;" ], [ "GZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int GZIP = 2;" ], [ "DONT_GUNZIP", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DONT_GUNZIP = 4;" ], [ "DO_BREAK_LINES", "org.graphstream.stream.netstream.packing", "Base64", "public final static int DO_BREAK_LINES = 8;" ], [ "URL_SAFE", "org.graphstream.stream.netstream.packing", "Base64", "public final static int URL_SAFE = 16;" ], [ "ORDERED", "org.graphstream.stream.netstream.packing", "Base64", "public final static int ORDERED = 32;" ], [ "INITIAL_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final int INITIAL_EDGE_CAPACITY;" ], [ "GROWTH_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final double GROWTH_FACTOR = 1.1;" ], [ "I_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char I_EDGE = 0;" ], [ "IO_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char IO_EDGE = 1;" ], [ "O_EDGE", "org.graphstream.graph.implementations", "AdjacencyListNode", "protected static final char O_EDGE = 2;" ], [ "GROW_FACTOR", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final double GROW_FACTOR = 1.1;" ], [ "DEFAULT_NODE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_NODE_CAPACITY = 128;" ], [ "DEFAULT_EDGE_CAPACITY", "org.graphstream.graph.implementations", "AdjacencyListGraph", "public static final int DEFAULT_EDGE_CAPACITY = 1024;" ] ],
  "tokensMethodJavadocValues" : [ [ "\"edge attribute added\"", "String" ] ],
  "tokensMethodArguments" : [ [ "sourceId", "java.lang", "String" ], [ "timeId", "", "long" ], [ "edgeId", "java.lang", "String" ], [ "attribute", "java.lang", "String" ], [ "value", "java.lang", "Object" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "elementSinks", "org.graphstream.stream", "SourceBase", "public Iterable<ElementSink> elementSinks()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "attributeSinks", "org.graphstream.stream", "SourceBase", "public Iterable<AttributeSink> attributeSinks()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "charAt", "java.lang", "String", "public char charAt(int arg0)" ], [ "stripTrailing", "java.lang", "String", "public String stripTrailing()" ], [ "isLatin1", "java.lang", "String", "boolean isLatin1()" ], [ "indent", "java.lang", "String", "public String indent(int arg0)" ], [ "lines", "java.lang", "String", "public Stream<String> lines()" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(StringBuffer arg0)" ], [ "codePointCount", "java.lang", "String", "public int codePointCount(int arg0, int arg1)" ], [ "replace", "java.lang", "String", "public String replace(CharSequence arg0, CharSequence arg1)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes()" ], [ "repeat", "java.lang", "String", "public String repeat(int arg0)" ], [ "isBlank", "java.lang", "String", "public boolean isBlank()" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0)" ], [ "describeConstable", "java.lang", "String", "public Optional<String> describeConstable()" ], [ "replace", "java.lang", "String", "public String replace(char arg0, char arg1)" ], [ "codePointBefore", "java.lang", "String", "public int codePointBefore(int arg0)" ], [ "split", "java.lang", "String", "public String[] split(String arg0, int arg1)" ], [ "matches", "java.lang", "String", "public boolean matches(String arg0)" ], [ "split", "java.lang", "String", "public String[] split(String arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0)" ], [ "transform", "java.lang", "String", "public <R> R transform(Function<? super String, ? extends R> arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0, int arg1)" ], [ "substring", "java.lang", "String", "public String substring(int arg0)" ], [ "hashCode", "java.lang", "String", "public int hashCode()" ], [ "subSequence", "java.lang", "String", "public CharSequence subSequence(int arg0, int arg1)" ], [ "codePoints", "java.lang", "String", "public IntStream codePoints()" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase()" ], [ "substring", "java.lang", "String", "public String substring(int arg0, int arg1)" ], [ "length", "java.lang", "String", "public int length()" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)" ], [ "compareTo", "java.lang", "String", "public int compareTo(String arg0)" ], [ "contains", "java.lang", "String", "public boolean contains(CharSequence arg0)" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0, int arg1)" ], [ "toString", "java.lang", "String", "public String toString()" ], [ "replaceAll", "java.lang", "String", "public String replaceAll(String arg0, String arg1)" ], [ "trim", "java.lang", "String", "public String trim()" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0, int arg1)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(CharSequence arg0)" ], [ "intern", "java.lang", "String", "public native String intern()" ], [ "resolveConstantDesc", "java.lang", "String", "public String resolveConstantDesc(MethodHandles.Lookup arg0)" ], [ "formatted", "java.lang", "String", "public String formatted(Object[] arg0)" ], [ "toCharArray", "java.lang", "String", "public char[] toCharArray()" ], [ "strip", "java.lang", "String", "public String strip()" ], [ "equals", "java.lang", "String", "public boolean equals(Object arg0)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(String arg0) throws UnsupportedEncodingException" ], [ "concat", "java.lang", "String", "public String concat(String arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0, int arg1)" ], [ "compareToIgnoreCase", "java.lang", "String", "public int compareToIgnoreCase(String arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase(Locale arg0)" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase()" ], [ "coder", "java.lang", "String", "byte coder()" ], [ "equalsIgnoreCase", "java.lang", "String", "public boolean equalsIgnoreCase(String arg0)" ], [ "translateEscapes", "java.lang", "String", "public String translateEscapes()" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0, int arg1)" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)" ], [ "value", "java.lang", "String", "byte[] value()" ], [ "isEmpty", "java.lang", "String", "public boolean isEmpty()" ], [ "stripLeading", "java.lang", "String", "public String stripLeading()" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase(Locale arg0)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(Charset arg0)" ], [ "replaceFirst", "java.lang", "String", "public String replaceFirst(String arg0, String arg1)" ], [ "stripIndent", "java.lang", "String", "public String stripIndent()" ], [ "offsetByCodePoints", "java.lang", "String", "public int offsetByCodePoints(int arg0, int arg1)" ], [ "endsWith", "java.lang", "String", "public boolean endsWith(String arg0)" ], [ "chars", "java.lang", "String", "public IntStream chars()" ], [ "codePointAt", "java.lang", "String", "public int codePointAt(int arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0)" ], [ "compareTo", "java.lang", "Comparable", "public abstract int compareTo(T arg0)" ], [ "length", "java.lang", "CharSequence", "public abstract int length()" ], [ "subSequence", "java.lang", "CharSequence", "public abstract CharSequence subSequence(int arg0, int arg1)" ], [ "charAt", "java.lang", "CharSequence", "public abstract char charAt(int arg0)" ], [ "isEmpty", "java.lang", "CharSequence", "public default boolean isEmpty()" ], [ "codePoints", "java.lang", "CharSequence", "public default IntStream codePoints()" ], [ "chars", "java.lang", "CharSequence", "public default IntStream chars()" ], [ "toString", "java.lang", "CharSequence", "public abstract String toString()" ], [ "describeConstable", "java.lang.constant", "Constable", "public abstract Optional<? extends ConstantDesc> describeConstable()" ], [ "resolveConstantDesc", "java.lang.constant", "ConstantDesc", "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "attrSinks", "org.graphstream.stream", "SourceBase", "protected ArrayList<AttributeSink> attrSinks = new ArrayList<AttributeSink>();" ], [ "eltsSinks", "org.graphstream.stream", "SourceBase", "protected ArrayList<ElementSink> eltsSinks = new ArrayList<ElementSink>();" ], [ "eventQueue", "org.graphstream.stream", "SourceBase", "protected LinkedList<GraphEvent> eventQueue = new LinkedList<GraphEvent>();" ], [ "eventProcessing", "org.graphstream.stream", "SourceBase", "protected boolean eventProcessing = false;" ], [ "sourceId", "org.graphstream.stream", "SourceBase", "protected String sourceId;" ], [ "sourceTime", "org.graphstream.stream", "SourceBase", "protected SourceTime sourceTime;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
} ]